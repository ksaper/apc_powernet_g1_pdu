#
# PySNMP MIB module PowerNet-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/PowerNet-MIB
# Produced by pysmi-0.0.6 at Tue Sep 12 12:02:07 2017
# On host Bester.local platform Darwin version 16.7.0 by user sa_1
# Using Python version 2.7.10 (v2.7.10:15c95b7d81dc, May 23 2015, 09:33:12)
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, IpAddress, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
apc = MibIdentifier((1, 3, 6, 1, 4, 1, 318))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1))
apcmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 4))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1))
mcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 2))
mtrapargs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 3))
mfiletransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4))
mconfigClock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1, 6))
mfiletransferStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 1))
mfiletransferConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2))
mfiletransferControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 3))
mfiletransferConfigSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1))
mfiletransferConfigTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2))
mfiletransferConfigFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1))
measureUps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2))
miniSNMPadapter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3))
masterswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4))
masterswitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5))
masterswitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6))
dcDM3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7))
automaticTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8))
dc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9))
environmentalMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10))
netlock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11))
rPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12))
airConditioners = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13))
rARU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14))
xPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15))
battMan = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16))
xATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18))
consolePortServer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19))
accessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20))
apcLocalDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21))
isxModularDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22))
isxModularPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23))
universalInputOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25))
rPDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26))
cooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27))
powerNetSubAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1))
struxureWareOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2))
struxureWareOperationsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1))
powerNetSoftwareSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1))
powerNetSoftwareConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2))
backUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 1))
smartUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2))
matrixUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3))
masterSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4))
symmetraUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5))
dp100E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 6))
dp300E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 7))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8))
redundantSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 9))
dcPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10))
automaticXferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 11))
netLock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 12))
symmetra3PhaseUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13))
networkAir = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14))
infraStruXurePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 15))
ais5000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16))
smartUPS3Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17))
battManager = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 18))
infraStruXureATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 19))
conPortServ = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20))
gutor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21))
accControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22))
symmetraPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23))
isxModDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24))
isxServers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25))
smartUPS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 27))
galaxy = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28))
eps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30))
battManIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1))
battManSystemCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2))
battManUnitCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3))
battManStringCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4))
battManBatteryCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5))
battManConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6))
battManAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7))
battManSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8))
battManStringStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9))
battManBatteryStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10))
battManInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11))
battManControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12))
battManTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13))
battManUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14))
xPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1))
xPDUDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2))
xPDUACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3))
xPDUCircuitBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4))
xPDUInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5))
xPDUOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6))
xPDUMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7))
xPDUMainInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1))
xPDUBypassInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2))
xPDUUPSInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3))
xPDUSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4))
xPDUGroundMonitorPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5))
xPDUSystemBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1))
xPDUBranchBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2))
xATSIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1))
xATSDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2))
xATSSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3))
xATSACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4))
xATSTesting = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5))
xATSInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6))
xATSOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7))
xATSMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 8))
xATSSwitchStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1))
xATSSwitchSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2))
xATSSwitchTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3))
xATSSwitchBlockMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4))
xATSSwitchStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5))
xATSSource1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1))
xATSSource2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2))
xATSSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3))
xATSTestingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1))
xATSTestingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2))
xATSTestingSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3))
xATSTestingSimulatePowerFail = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4))
xATSGenerator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1))
xATSGeneratorIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1))
xATSGeneratorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2))
xATSGeneratorAdvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3))
xATSGeneratorOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4))
xATSGeneratorSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5))
xATSGeneratorService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6))
xATSGeneratorFuelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7))
cpsAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1))
cpsAP930xSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1))
cpsAP930xConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2))
cpsAP930xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3))
cpsAP930xAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4))
smartUPS250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 1))
smartUPS400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 2))
smartUPS600 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 3))
smartUPS900 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 4))
smartUPS1250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 5))
smartUPS2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 6))
smartUPS450 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 7))
smartUPS700 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 8))
smartUPS1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 9))
smartUPS1400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 10))
smartUPS2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 11))
smartUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 12))
smartUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 13))
smartUPS7500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 14))
smartUPS10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 15))
smartUPS1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 16))
smartUPS3000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 17))
smartUPS5000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 18))
smartUPS8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 19))
matrixUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 1))
matrixUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 2))
masterSwitchV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 1))
masterSwitchV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 2))
masterSwitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 3))
masterSwitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 4))
masterSwitchrPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 5))
masterSwitchrPDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 6))
masterSwitchsPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 7))
symmetraUPS4kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 1))
symmetraUPS8kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 2))
symmetraUPS12kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 3))
symmetraUPS16kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 4))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 1))
environmentalMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 2))
emu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 3))
mem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 4))
dm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 1))
dcmim2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 2))
symmetra3PhaseUPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 1))
symmetra3PhaseUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 2))
symmetra3PhaseUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 3))
symmetra3PhaseUPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 4))
airFMSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 1))
rackAirRemovalUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 2))
airPASeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 3))
airIRSC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 4))
airIRRC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 5))
airIRRP100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 6))
airIRRP500Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 7))
airIRRD100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 8))
airInRoomPerimeter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 9))
airACRC300Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 10))
airIRRDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 12))
ais5000UPS10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 1))
ais5000UPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 2))
ais5000UPS30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 3))
ais5000UPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 4))
ais5000UPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 5))
ais5000UPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 6))
ais5000UPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 7))
smartUPS3Phase10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 1))
smartUPS3Phase15kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 2))
smartUPS3Phase20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 3))
smartUPS3Phase30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 4))
smartUPS3Phase40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 5))
galaxy7000UPS200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 1))
galaxy7000UPS250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 2))
galaxy7000UPS300kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 3))
galaxy7000UPS400kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 4))
galaxy7000UPS500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 5))
galaxy7000SSC800kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 6))
galaxy7000SSC1200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 7))
galaxy7000SSC2000kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 8))
galaxy300UPS10kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 9))
galaxy300UPS15kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 10))
galaxy300UPS20kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 11))
galaxy300UPS30kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 12))
galaxy300UPS40kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 13))
galaxy300UPS10kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 14))
galaxy300UPS15kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 15))
galaxy300UPS20kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 16))
galaxy300UPS30kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 17))
galaxy5000UPS20KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 18))
galaxy5000UPS30KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 19))
galaxy5000UPS40KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 20))
galaxy5000UPS50KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 21))
galaxy5000UPS60KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 22))
galaxy5000UPS80KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 23))
galaxy5000UPS100KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 24))
galaxy5000UPS120KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 25))
galaxy5000UPS130KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 26))
galaxy5500UPS20KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 27))
galaxy5500UPS30KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 28))
galaxy5500UPS40KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 29))
galaxy5500UPS50KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 30))
galaxy5500UPS60KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 31))
galaxy5500UPS80KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 32))
galaxy5500UPS100KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 33))
galaxy5500UPS120KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 34))
galaxy5500UPS130KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 35))
galaxyVMUPS50kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 36))
galaxyVMUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 37))
galaxyVMUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 38))
galaxyVMUPS90kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 39))
galaxyVMUPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 40))
galaxyVMUPS110kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 41))
galaxyVMUPS120kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 42))
galaxyVMUPS130kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 43))
galaxyVMUPS160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 44))
galaxyVMUPS180kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 45))
galaxyVMUPS200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 46))
galaxyVMUPS225kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 47))
galaxy9000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 48))
galaxy9000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 49))
galaxy9000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 50))
galaxy9000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 51))
eps6000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 1))
eps6000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 2))
eps6000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 3))
eps6000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 4))
eps7000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 5))
eps7000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 6))
eps7000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 7))
eps7000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 8))
eps8000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 9))
eps8000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 10))
eps8000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 11))
eps8000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 12))
conPortServAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20, 1))
gutorPEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 1))
gutorPDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 2))
gutorWEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 3))
gutorWDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 4))
gutorSDC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 5))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7))
upsComm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8))
upsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9))
upsSyncCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10))
upsState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11))
upsOutletGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12))
upsDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13))
upsParallelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14))
upsPhysicalLayout = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15))
upsIntegratedATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16))
upsBasicIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1))
upsAdvIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2))
upsBasicBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1))
upsAdvBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2))
upsHighPrecBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3))
upsBasicInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1))
upsAdvInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2))
upsHighPrecInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3))
upsBasicOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1))
upsAdvOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2))
upsHighPrecOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3))
upsBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1))
upsAdvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2))
upsBasicControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1))
upsAdvControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2))
upsBasicTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 1))
upsAdvTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2))
upsPhaseResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1))
upsPhaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2))
upsPhaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3))
upsSyncCtrlGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1))
upsSyncCtrlGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2))
upsBasicState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1))
upsAdvState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2))
upsOutletGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1))
upsOutletGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2))
upsOutletGroupControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3))
upsDiagnosticIM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1))
upsDiagnosticPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2))
upsDiagnosticBatteries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3))
upsDiagnosticSubsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4))
upsDiagnosticExternalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5))
upsDiagnosticComBus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6))
upsDiagSwitchGear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1))
upsDiagMCCBBox = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2))
upsDiagTransformer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3))
upsDiagFlyWheel = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 4))
mUpsEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1))
mUpsContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2))
serialPort = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1))
serialPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 1))
serialPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2))
serialPort2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1))
serialPort2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2))
sPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1))
sPDUMasterControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2))
sPDUMasterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3))
sPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4))
sPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5))
sPDUIdentVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1))
sPDUMasterControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2))
sPDUMasterConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3))
sPDUMasterStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4))
sPDUOutletControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5))
sPDUOutletConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6))
sPDUOutletStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7))
sPDUIdentMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1))
sPDUMasterControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2))
sPDUMasterConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3))
sPDUMasterStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4))
sPDUOutletControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5))
sPDUOutletConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6))
sPDUOutletStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7))
sPDUOutletConfigMSPall = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1))
sPDUOutletConfigMSPgs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2))
sPDUOutletConfigMSPannun = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3))
sPDUOutletConfigMSPmups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4))
rPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1))
rPDULoad = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2))
rPDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3))
rPDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4))
rPDUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5))
rPDULoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1))
rPDULoadPhaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2))
rPDULoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3))
rPDULoadBankConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4))
rPDUOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1))
rPDUOutletPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2))
rPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3))
rPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4))
rPDUOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5))
rPDUOutletBank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6))
rPDUPowerSupplyDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1))
dm3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1))
dm3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2))
dm3Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3))
dm3IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1))
dm3ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1))
dm3ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2))
dm3ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3))
dm3ConfigPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4))
dm3ConfigRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5))
dm3ConfigDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6))
dm3ConfigRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1))
dm3ConfigConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2))
dm3ConfigRectThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1))
dm3ConfigRectAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2))
dm3ConfigConvThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1))
dm3ConfigConvAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2))
dm3ConfigOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1))
dm3ConfigInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2))
dm3ConfigBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1))
dm3ConfigFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2))
dm3StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1))
dm3StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2))
dm3StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3))
dm3StatusOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4))
dm3StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5))
dm3StatusPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6))
dm3StatusRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7))
dm3StatusDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8))
dm3StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1))
dm3StatusConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2))
dm3StatusOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1))
dm3StatusInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2))
dm3StatusBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1))
dm3StatusFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2))
atsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1))
atsCalibration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2))
atsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3))
atsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4))
atsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5))
atsCalibrationInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1))
atsCalibrationPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2))
atsCalibrationOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3))
atsStatusDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1))
atsStatusResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2))
atsStatusInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3))
atsStatusOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4))
dcmim2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1))
dcmim2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2))
dcmim2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3))
dcmim2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4))
dcmim2IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1))
dcmim2ControlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1))
dcmim2ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1))
dcmim2ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2))
dcmim2ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3))
dcmim2StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1))
dcmim2StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2))
dcmim2StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3))
dcmim2StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4))
dcmim2StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1))
integrated = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2))
envMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3))
modEnvMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4))
emIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1))
emConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2))
emStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3))
iemIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1))
iemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2))
iemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3))
emsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1))
emsOutputRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2))
emsOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3))
emsSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4))
emsAlarmDeviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5))
emsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6))
emsProbeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7))
emsInputContactConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8))
emsOutputRelayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9))
emsOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10))
emsSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11))
emsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12))
emsProbeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13))
emsInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14))
emsOutputRelayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15))
emsOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16))
emsAlarmDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17))
emsSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18))
memModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1))
memSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2))
memInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3))
memOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4))
memOutlets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5))
memBeacons = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6))
nlIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 1))
nlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 2))
airFM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1))
airFMIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1))
airFMStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2))
airFMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3))
airFMSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4))
airFMModule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5))
airFMAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6))
airFMGroupSysRoles = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4))
airFMGroupCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5))
airFMGroupLoadShare = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6))
airFMGroupFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7))
airFMGroupFailoverSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1))
airFMGroupFailoverMod = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2))
airFMSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1))
airFMSysDemands = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2))
airFMSysSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3))
airFMSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4))
airFMSysCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5))
airFMSysHumidify = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6))
airFMSysDehumidify = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7))
airFMSysReheat = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8))
airFMSysThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9))
airFMSysInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10))
airFMSysOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11))
airFMSysAlarmMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12))
airFMSysAlarmMapSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1))
airFMSysAlarmMapMainMod = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2))
airFMSysAlarmMapExpMod1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3))
airFMSysAlarmMapExpMod2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4))
airFMSysAlarmMapInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5))
airFMSysAlarmMapOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6))
airFMModIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1))
airFMModStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2))
airFMModProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3))
airFMModCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4))
airFMModHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5))
airFMModBlower1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6))
airFMModBlower2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7))
airFMModRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8))
airFMModServIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9))
airFMModServIntResets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10))
airPA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2))
airPAIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1))
airPAStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2))
airIR = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3))
airIRAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1))
airIRRC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2))
airIRRP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3))
airIRSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4))
airIRRCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1))
airIRRCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2))
airIRRCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1))
airIRRCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2))
airIRRCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3))
airIRRCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1))
airIRRCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2))
airIRRCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3))
airIRRCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4))
airIRRCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5))
airIRRCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6))
airIRRP100 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1))
airIRRP500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2))
airIRRP100Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1))
airIRRP100Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2))
airIRRP100GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1))
airIRRP100GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2))
airIRRP100GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3))
airIRRP100UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1))
airIRRP100UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2))
airIRRP100UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3))
airIRRP100UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4))
airIRRP100UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5))
airIRRP100UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6))
airIRRP500Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1))
airIRRP500Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2))
airIRRP500GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1))
airIRRP500GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2))
airIRRP500GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3))
airIRRP500UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1))
airIRRP500UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2))
airIRRP500UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3))
airIRRP500UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4))
airIRRP500UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5))
airIRRP500UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6))
airIRSCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1))
airIRSCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1))
airIRSCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2))
airIRSCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3))
airIRSCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4))
airIRSCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5))
airIRSCUnitSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6))
airIRSCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7))
airIRSCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2))
airIRSCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1))
airIRSCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2))
airIRSCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3))
airIRGen2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4))
airIRG2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1))
airIRG2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2))
airIRG2Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3))
airIRG2RC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 4))
airIRG2RD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5))
airIRG2SC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 6))
airIRG2RA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 7))
airIRG2GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1))
airIRG2GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2))
airIRG2GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3))
airIRG2RDType1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 1))
airIRG2RDType2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2))
airIRG2RDT2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1))
airIRG2RDT2RunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2))
airIRG2RDT2ServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3))
airIRG2RDT2Thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4))
airIRG2RDT2Setpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 5))
airIRG2RDT2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6))
airInRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5))
airIRmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1))
airIRmAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2))
airIRmPerimeter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3))
airIRmPmCommon1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2))
airIRmPmCommon2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3))
airIRmPmCommon3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4))
airIRmPmCommon4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5))
airIRmPmCommon5 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6))
airIRmPmCompressor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7))
airIRmPmCompressor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8))
airIRmPmSuctionValve1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 9))
airIRmPmSuctionValve2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 10))
airIRmPmEheating1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11))
airIRmPmEheating2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12))
airIRmPmEheating3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13))
airIRmPmEheating4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14))
airIRmPmGECWvalve = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15))
airIRmPmGvalve = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16))
airIRmPmDrycooler1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17))
airIRmPmDrycooler2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18))
airIRmPmDrycooler3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19))
airIRmPmDrycooler4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20))
airIRmPmPump1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21))
airIRmPmPump2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22))
airIRmPmPump3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23))
airIRmPmPump4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24))
airIRmPmHotgasHeating = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25))
airIRmPmPWWHeating = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26))
airIRmPmHumidifier1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27))
airIRmPmHumidifier2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28))
airIRmPmDehumidification = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31))
airIRmPmFan1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32))
airIRmPmFan2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33))
airIRmPmFan3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34))
airIRmPmLouver1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35))
airIRmPmLouver2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36))
airIRmPmLouver3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37))
airIRmPmAuxAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 38))
airIRmPmAuxAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 39))
airIRmPmAuxAlarm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 40))
airIRmPmAuxAlarm4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 41))
airIRmPmAuxAlarm5 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 42))
airIRmPmAlarmBits = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43))
airIRmPmMyZone = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44))
airIRmPmGlobalZoneData = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45))
airIRGen3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6))
airIRG3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1))
airIRG3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2))
airIRG3Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3))
airIRG3RDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4))
airIRG3CM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5))
rARUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1))
rARUConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2))
rARUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3))
rARUFanStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4))
rARUPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5))
rARUSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6))
accessPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1))
accessPXIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1))
accessPXConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2))
accessPXConfigFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3))
accessPXStatusFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4))
accessPXConfigRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5))
accessPXStatusRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6))
accessPXConfigBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7))
accessPXStatusBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8))
apcLocalDisplayIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1))
apcLocalDisplayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2))
accPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22, 1))
isxModularPduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1))
isxModularPduDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2))
isxModularPduStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3))
symmetraPx48kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 1))
symmetraPx160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 2))
symmetraPx250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 3))
symmetraPx500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 4))
symmetraPx100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 5))
symmetraPxDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 6))
isx24ModuleHalfRackPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 1))
isx6ModuleRackPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 2))
isxModularDistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1))
isxModularDistModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2))
isxModularDistSubFeeds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3))
isxModularDistTotals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4))
isxModularDistSysVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1))
isxModularDistSysCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2))
isxModularDistSysPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3))
isxcBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 1))
isxcStandard = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 2))
isxcEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 3))
isxcVirtual = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 4))
uioSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1))
uioInputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2))
uioOutputRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3))
mconfigNumTrapReceivers = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 1), Integer32()).setMaxAccess("readonly")
mconfigTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 318, 2, 1, 2), )
mconfigTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "trapIndex"))
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
receiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3),))).setMaxAccess("readonly")
acceptThisReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
receiveTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("powernet", 1), ("ietf", 2), ("both", 3),))).setMaxAccess("readonly")
mconfigBOOTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readonly")
mconfigTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
newCodeAuthentViaTFTP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("validNewAgentCodeImage", 2), ("sameAgentCodeImage", 3), ("invalidAgentCodeImage", 4),))).setMaxAccess("readonly")
mconfigClockDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 1), DisplayString()).setMaxAccess("readwrite")
mconfigClockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 2), DisplayString()).setMaxAccess("readwrite")
mcontrolRestartAgent = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("restartCurrentAgent", 1), ("continueCurrentAgent", 2), ("loadAndExecuteNewAgent", 3), ("restartWithoutAgent", 4), ("resetNetworkAndRestart", 5), ("resetNetworkLeaveModeAndRestart", 6),))).setMaxAccess("readwrite")
mtrapargsInteger = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 1), Integer32()).setMaxAccess("readonly")
mtrapargsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 2), IpAddress()).setMaxAccess("readonly")
mtrapargsString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
mtrapargsGauge = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
mtrapargsTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
mtrapargsInteger02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 6), Integer32()).setMaxAccess("readonly")
mtrapargsInteger03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 7), Integer32()).setMaxAccess("readonly")
mtrapargsIpAddress02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 8), IpAddress()).setMaxAccess("readonly")
mtrapargsIpAddress03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 9), IpAddress()).setMaxAccess("readonly")
mtrapargsString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 10), DisplayString()).setMaxAccess("readonly")
mtrapargsString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 11), DisplayString()).setMaxAccess("readonly")
mtrapargsGauge02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 12), Gauge32()).setMaxAccess("readonly")
mtrapargsGauge03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 13), Gauge32()).setMaxAccess("readonly")
mtrapargsTimeTicks02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 14), TimeTicks()).setMaxAccess("readonly")
mtrapargsTimeTicks03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 15), TimeTicks()).setMaxAccess("readonly")
mtrapargsString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 16), DisplayString()).setMaxAccess("readonly")
mtrapargsString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 17), DisplayString()).setMaxAccess("readonly")
mtrapargsInteger04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 18), Integer32()).setMaxAccess("readonly")
mtrapargsInteger05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 19), Integer32()).setMaxAccess("readonly")
mtrapargsString06 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 20), DisplayString()).setMaxAccess("readonly")
mtrapargsString07 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 21), DisplayString()).setMaxAccess("readonly")
mtrapargsString08 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 22), DisplayString()).setMaxAccess("readonly")
mtrapargsOctetString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 23), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 24), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 25), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 26), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 27), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString06 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 28), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString07 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 29), OctetString()).setMaxAccess("readonly")
mtrapargsOctetString08 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 30), OctetString()).setMaxAccess("readonly")
mfiletransferStatusLastTransferResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("lastFileTransferResultSuccessful", 1), ("lastFileTransferResultNotAvailable", 2), ("lastFileTransferResultFailureUnknown", 3), ("lastFileTransferResultFailureServerInaccessible", 4), ("lastFileTransferResultFailureServerAccessDenied", 5), ("lastFileTransferResultFailureFileNotFound", 6), ("lastFileTransferResultFailureFileTypeUnknown", 7), ("lastFileTransferResultFailureFileCorrupted", 8),))).setMaxAccess("readonly")
mfiletransferConfigSettingsFilename = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
mfiletransferConfigTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
mfiletransferConfigFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
mfiletransferConfigFTPServerUser = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
mfiletransferConfigFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
mfiletransferControlInitiateFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("doNotInitiateFileTransfer", 1), ("initiateFileTransferDownloadViaTFTP", 2), ("initiateFileTransferDownloadViaFTP", 3),))).setMaxAccess("readwrite")
battManIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
battManIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
battManIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
battManIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
battManIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
battManIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
battManOhmicValueCorrectionFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
battManUnitCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 1), Integer32()).setMaxAccess("readonly")
battManUnitCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2), )
battManUnitCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManUnitCalibIndex"))
battManUnitCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
battManBatteryVoltageZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
battManBatteryVoltageSpanCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
battManStringCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 1), Integer32()).setMaxAccess("readonly")
battManStringCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2), )
battManStringCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManStringCalibIndex"))
battManStringCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManDCCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
battManACCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
battManProbeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("amps1000", 1), ("amps500", 2), ("amps100", 3), ("amps200", 4), ("amps2000", 5),))).setMaxAccess("readwrite")
battManString1BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 1), Integer32()).setMaxAccess("readonly")
battManString1BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2), )
battManString1BatteryCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1BatteryCalibIndex"))
battManString1BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManString1BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
battManString2BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 3), Integer32()).setMaxAccess("readonly")
battManString2BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4), )
battManString2BatteryCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2BatteryCalibIndex"))
battManString2BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
battManString2BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
battManConfigApplication = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("silcon", 1), ("other", 2),))).setMaxAccess("readwrite")
battManConfigBatteryChemistry = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("leadAcid", 1), ("nickel-Cadmium", 2),))).setMaxAccess("readwrite")
battManConfigBatteryAHCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
battManConfigNumberofStrings = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 4), Integer32()).setMaxAccess("readwrite")
battManConfigBatteriesperString = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 5), Integer32()).setMaxAccess("readwrite")
battManConfigCellsperBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 6,)).clone(namedValues=NamedValues(("oneCell", 1), ("twoCells", 2), ("fourCells", 4), ("sixCells", 6),))).setMaxAccess("readwrite")
battManConfigMinCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 7), Integer32()).setMaxAccess("readwrite")
battManConfigMaxCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 8), Integer32()).setMaxAccess("readwrite")
battManConfigMaxPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 9), Integer32()).setMaxAccess("readwrite")
battManConfigMaxPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 10), Integer32()).setMaxAccess("readwrite")
battManConfigMaxAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 11), Integer32()).setMaxAccess("readwrite")
battManConfigMaxAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 12), Integer32()).setMaxAccess("readwrite")
battManConfigMinAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 13), Integer32()).setMaxAccess("readwrite")
battManConfigMinAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 14), Integer32()).setMaxAccess("readwrite")
battManConfigMaxRippleCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 15), Integer32()).setMaxAccess("readwrite")
battManConfigMaxCurrentAcceptanceDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 16), Integer32()).setMaxAccess("readwrite")
battManConfigMonitorWireLength = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fiftyFeetOrLess", 1), ("moreThanFiftyFeet", 2),))).setMaxAccess("readwrite")
battManConfigDischargeVoltageAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 18), Integer32()).setMaxAccess("readwrite")
battManConfigAutoAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
battManConfigSuspendCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 20), Integer32()).setMaxAccess("readwrite")
battManConfigOhmicTestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 21), Integer32()).setMaxAccess("readwrite")
battManConfigNumberOfBoosts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 22), Integer32()).setMaxAccess("readwrite")
battManAlarmManagementController = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManAlarmBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManAlarmCharger = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManAlarmEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 1), Integer32()).setMaxAccess("readonly")
battManSystemAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 2), Integer32()).setMaxAccess("readonly")
battManSystemPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 3), Integer32()).setMaxAccess("readonly")
battManSystemPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 4), Integer32()).setMaxAccess("readonly")
battManSystemAmbientHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemAmbientLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemPilotBatteryHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemPilotProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemAmbientProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemConfigurationInvalid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManSystemSuspendVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 1), Integer32()).setMaxAccess("readonly")
battManInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2), )
battManInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManInputContactIndex"))
battManInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
battManInputContactAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
battManInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
battManInputContactAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
battManStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 1), Integer32()).setMaxAccess("readonly")
battManStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2), )
battManStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManStringIndex"))
battManStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManStringCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
battManStringRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
battManStringChargerHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManStringChargerLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManStringCurrentProbeDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManStringOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManStringHighRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManStringVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
battManStringDischargeLess5Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
battManStringDischarge5to10Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
battManStringDischarge10to60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
battManStringDischargeMore60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
battManString1BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 1), Integer32()).setMaxAccess("readonly")
battManString1BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2), )
battManString1BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1BatteryIndex"))
battManString1BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManString1BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
battManString1BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
battManString1BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString1BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 3), Integer32()).setMaxAccess("readonly")
battManString2BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4), )
battManString2BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2BatteryIndex"))
battManString2BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
battManString2BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
battManString2BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
battManString2BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManString2BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManRemoteAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
battManResetChargeCurrentDeviationBenchmark = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
battManResetLowestDischargeVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
battManResetDischargeCounters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
battManString1OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 1), DisplayString()).setMaxAccess("readonly")
battManString1OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 2), Integer32()).setMaxAccess("readonly")
battManString1OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3), )
battManString1OhmicValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1OhmicValueIndex"))
battManString1OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
battManString1OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 4), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5), )
battManString1ResponseTestChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestChangeIndex"))
battManString1ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
battManString2OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 6), DisplayString()).setMaxAccess("readonly")
battManString2OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 7), Integer32()).setMaxAccess("readonly")
battManString2OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8), )
battManString2OhmicValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2OhmicValueIndex"))
battManString2OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
battManString2OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 2), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 9), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10), )
battManString2ResponseTestChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestChangeIndex"))
battManString2ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 2), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 11), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12), )
battManString1ResponseTestCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestCurrentIndex"))
battManString1ResponseTestCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1, 2), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 13), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14), )
battManString2ResponseTestCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestCurrentIndex"))
battManString2ResponseTestCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1, 2), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestCurrentBenchmarkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 15), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestCurrentBenchmarkTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16), )
battManString1ResponseTestCurrentBenchmarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestCurrentBenchmarkIndex"))
battManString1ResponseTestCurrentBenchmarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1, 1), Integer32()).setMaxAccess("readonly")
battManString1ResponseTestCurrentBenchmarkData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1, 2), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestCurrentBenchmarkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 17), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestCurrentBenchmarkTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18), )
battManString2ResponseTestCurrentBenchmarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestCurrentBenchmarkIndex"))
battManString2ResponseTestCurrentBenchmarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1, 1), Integer32()).setMaxAccess("readonly")
battManString2ResponseTestCurrentBenchmarkData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1, 2), Integer32()).setMaxAccess("readonly")
battManUnitStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 1), Integer32()).setMaxAccess("readonly")
battManUnitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2), )
battManUnitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManUnitStatusIndex"))
battManUnitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
battManUnitStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
battManUnitHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
battManUnitFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
battManUnitCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
battManUnitRelayStuck = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
xPDUIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 1), DisplayString()).setMaxAccess("readwrite")
xPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
xPDUIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
xPDUIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
xPDUIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
xPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
xPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
xPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
xPDUDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 1), Integer32()).setMaxAccess("readonly")
xPDUDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2),))).setMaxAccess("readonly")
xPDUDeviceNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 3), Integer32()).setMaxAccess("readonly")
xPDUDeviceMainInputBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 4), Integer32()).setMaxAccess("readonly")
xPDUDevicePanelBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 5), Integer32()).setMaxAccess("readonly")
xPDUDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceLoadTieBreakerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceLoadTestPortPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceFusesPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceBypassInputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceCrossTieOutputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceEarthGroundMonitorPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
xPDUDeviceInfraStruXureType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("typeB", 1), ("typeC", 2),))).setMaxAccess("readonly")
xPDUMainInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
xPDUMainInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
xPDUMainInputVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
xPDUMainInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4), )
xPDUMainInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUMainInputVoltagePhaseIndex"))
xPDUMainInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xPDUMainInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
xPDUMainInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
xPDUBypassInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
xPDUBypassInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
xPDUBypassInputVoltagePhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 3), Integer32()).setMaxAccess("readonly")
xPDUBypassInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4), )
xPDUBypassInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUBypassInputVoltagePhaseIndex"))
xPDUBypassInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xPDUBypassInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
xPDUBypassInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
xPDUUPSInputVoltagePhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 1), Integer32()).setMaxAccess("readonly")
xPDUUPSInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2), )
xPDUUPSInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUUPSInputVoltagePhaseIndex"))
xPDUUPSInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xPDUUPSInputVoltageLtoNPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2), ("unknown", 3),))).setMaxAccess("readonly")
xPDUSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 1), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 2), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 3), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 4), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 5), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("freqToleranceOff", 1), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ("freqToleranceNine", 10),))).setMaxAccess("readwrite")
xPDUSystemOutputMaxKWPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 7), Integer32()).setMaxAccess("readwrite")
xPDUSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
xPDUSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
xPDUSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUSystemOutputOverCurrentNeutralThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 13), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14), )
xPDUSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUSystemOutputPhaseIndex"))
xPDUSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xPDUSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 3), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 4), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 5), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 6), Integer32()).setMaxAccess("readonly")
xPDUSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 7), Integer32()).setMaxAccess("readonly")
xPDUGroundCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 1), Integer32()).setMaxAccess("readonly")
xPDUGroundCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,50))).setMaxAccess("readwrite")
xPDUSystemBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
xPDUSystemBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2), )
xPDUSystemBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUSystemBreakerTableIndex"))
xPDUSystemBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
xPDUSystemBreakerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,79))).setMaxAccess("readonly")
xPDUSystemBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3),))).setMaxAccess("readonly")
xPDUNumOfBranchBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 1), Integer32()).setMaxAccess("readonly")
xPDUBranchBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 2), Integer32()).setMaxAccess("readonly")
xPDUBranchBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3), )
xPDUBranchBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUBranchBreakerTableIndex"))
xPDUBranchBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
xPDUBranchBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUBranchBreakerRDPFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("remoteDistribution", 1), ("noRemoteDistribution", 2),))).setMaxAccess("readonly")
xPDUBranchBreakerTieIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("breakerUnTied", 1), ("breakerTied", 2),))).setMaxAccess("readwrite")
xPDUBranchBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
xPDUBranchBreakerOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUBranchBreakerUnderCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUBranchBreakerMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUBranchBreakerMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xPDUBranchBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
xPDUBranchBreakerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
xPDUInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 1), Integer32()).setMaxAccess("readonly")
xPDUInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 2), Integer32()).setMaxAccess("readonly")
xPDUInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3), )
xPDUInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUInputContactNumber"))
xPDUInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
xPDUInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
xPDUInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
xPDUInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3),))).setMaxAccess("readonly")
xPDUOutputRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 1), Integer32()).setMaxAccess("readonly")
xPDUOutputRelaysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 2), Integer32()).setMaxAccess("readonly")
xPDUOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3), )
xPDUOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUOutputRelayNumber"))
xPDUOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
xPDUOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
xPDUOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
xPDUOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3),))).setMaxAccess("readonly")
xPDUEPOMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("armed", 1), ("disarmed", 2), ("unknown", 3),))).setMaxAccess("readonly")
xPDUTransformTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("overtemp", 2), ("noTransformerPresent", 3), ("unknown", 4),))).setMaxAccess("readonly")
xPDUCoolingFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("failed", 2), ("noCoolingFansPresent", 3), ("unknown", 4),))).setMaxAccess("readonly")
xATSIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
xATSIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
xATSIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
xATSIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
xATSIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
xATSIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 6), DisplayString()).setMaxAccess("readonly")
xATSIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 7), DisplayString()).setMaxAccess("readonly")
xATSIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 8), DisplayString()).setMaxAccess("readonly")
xATSDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2),))).setMaxAccess("readonly")
xATSDeviceNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 2), Integer32()).setMaxAccess("readonly")
xATSDeviceNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 3), Integer32()).setMaxAccess("readonly")
xATSDeviceTransferSwitchRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 4), Integer32()).setMaxAccess("readonly")
xATSDeviceDCBackUpPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
xATSSwitchStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("none", 1), ("source1", 2), ("source2", 3), ("fault", 4), ("unknown", 5),))).setMaxAccess("readonly")
xATSSwitchStatusOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("automatic", 1), ("notInAutoAbnormal", 2), ("notInAuto", 3), ("unknown", 4),))).setMaxAccess("readonly")
xATSSwitchStatusAutomaticOperationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSSwitchStatusEngineStartSignal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("run", 1), ("stop", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSSwitchSettingsLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
xATSSwitchSettingsHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
xATSSwitchSettingsMaxFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
xATSSwitchSettingsMinPhaseBalance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
xATSSwitchSettingsNominalRotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("abc", 1), ("cba", 2), ("any", 3), ("unknown", 4),))).setMaxAccess("readwrite")
xATSSwitchSettingsAllowClosedTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 3),))).setMaxAccess("readwrite")
xATSSwitchSettingsMaxSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
xATSSwitchSettingsNeutralTransferTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
xATSSwitchSettingsClearLatchedAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
xATSSwitchSettingsSetToFactoryDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
xATSSwitchTimersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 1), Integer32()).setMaxAccess("readonly")
xATSSwitchTimersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2), )
xATSSwitchTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSwitchTimersIndex"))
xATSSwitchTimersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
xATSSwitchTimersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
xATSSwitchTimersAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
xATSSwitchTimersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("inactive", 1), ("active", 2),))).setMaxAccess("readonly")
xATSSwitchTimersRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
xATSSwitchTimersDelaySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
xATSSwitchBlockMapTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 1), Integer32()).setMaxAccess("readonly")
xATSSwitchBlockMapTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2), )
xATSSwitchBlockMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSwitchBlockMapIndex"))
xATSSwitchBlockMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
xATSSwitchBlockMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
xATSSwitchBlockMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
xATSSwitchBlockMapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
xATSSwitchStatisticsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 1), Integer32()).setMaxAccess("readonly")
xATSSwitchStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2), )
xATSSwitchStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSwitchStatisticsIndex"))
xATSSwitchStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
xATSSwitchStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
xATSSwitchStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
xATSSwitchStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
xATSSource1Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
xATSSource1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("tripped", 3), ("unknown", 4),))).setMaxAccess("readonly")
xATSSource1Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 3), Integer32()).setMaxAccess("readonly")
xATSSource1Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("sourceGood", 1), ("lowVoltage", 2), ("highVoltage", 3), ("phaseImbalance", 4), ("freqOutOfRange", 5), ("badRotation", 6), ("unknown", 7),))).setMaxAccess("readonly")
xATSSource1Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("abc", 1), ("cba", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSSource1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 6), Integer32()).setMaxAccess("readonly")
xATSSource1PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7), )
xATSSource1PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSource1Index"))
xATSSource1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xATSSource1VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
xATSSource1VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
xATSSource2Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 1), DisplayString()).setMaxAccess("readwrite")
xATSSource2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("tripped", 3), ("unknown", 4),))).setMaxAccess("readonly")
xATSSource2Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 3), Integer32()).setMaxAccess("readonly")
xATSSource2Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("sourceGood", 1), ("lowVoltage", 2), ("highVoltage", 3), ("phaseImbalance", 4), ("freqOutOfRange", 5), ("badRotation", 6), ("unknown", 7),))).setMaxAccess("readonly")
xATSSource2Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("abc", 1), ("cba", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSSource2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 6), Integer32()).setMaxAccess("readonly")
xATSSource2PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7), )
xATSSource2PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSource2Index"))
xATSSource2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xATSSource2VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
xATSSource2VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
xATSSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 1), Integer32()).setMaxAccess("readonly")
xATSSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 2), Integer32()).setMaxAccess("readonly")
xATSSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 3), Integer32()).setMaxAccess("readonly")
xATSSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 4), Integer32()).setMaxAccess("readonly")
xATSSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("freqToleranceOff", 1), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ("freqToleranceNine", 10),))).setMaxAccess("readwrite")
xATSSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 6), Integer32()).setMaxAccess("readwrite")
xATSSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
xATSSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xATSSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xATSSystemOutputAlarmDelayThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 10), Integer32()).setMaxAccess("readwrite")
xATSSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 11), Integer32()).setMaxAccess("readonly")
xATSSystemOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12), )
xATSSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSystemOutputPhaseIndex"))
xATSSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xATSSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
xATSSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
xATSSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
xATSSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
xATSSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
xATSSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 7), Integer32()).setMaxAccess("readonly")
xATSTestingStatusSelectTestProcess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("engineStartTest", 1), ("systemLoadTest", 2), ("generatorHoldTest", 3), ("cancelTest", 4),))).setMaxAccess("readwrite")
xATSTestingStatusTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("noTestInProcess", 1), ("testPending", 2), ("startingEngine", 3), ("engineWarmingUp", 4), ("awaitingTransferToS2", 5), ("testingWithLoad", 6), ("awaitingRetransferToS1", 7), ("testingWithoutLoad", 8), ("stoppingEngine", 9), ("holdingOnGenerator", 10),))).setMaxAccess("readonly")
xATSTestingStatusProfileWarmupTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
xATSTestingStatusProfileLoadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
xATSTestingStatusProfileUnloadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
xATSTestingResultsLastDateOfTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 1), DisplayString()).setMaxAccess("readonly")
xATSTestingResultsLastResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,)).clone(namedValues=NamedValues(("noResultsAvailable", 1), ("startTestPassed", 2), ("loadTestPassed", 3), ("startSignalFailure", 4), ("failedGenNotInAuto", 5), ("failedGenEmerStop", 6), ("failedGenShutdown", 7), ("failedGenDidNotStart", 8), ("failedS2NeverGood", 9), ("genFailedDuringWarmup", 10), ("failureOnXferToS1", 11), ("genFailedLoaded", 12), ("failureOnRexferToS2", 13), ("failedOnCooldown", 14), ("genFailedToStop", 15), ("failedAtsInternalFault", 16), ("failedAtsNotInAuto", 17), ("canceledManualTest", 18), ("canceledScheduledTest", 19),))).setMaxAccess("readonly")
xATSTestingResultsTestLastTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
xATSTestingResultsLastCrankDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 4), Integer32()).setMaxAccess("readonly")
xATSTestingResultsLastWarmupDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 5), Integer32()).setMaxAccess("readonly")
xATSTestingResultsLastLoadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 6), Integer32()).setMaxAccess("readonly")
xATSTestingResultsLastUnloadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 7), Integer32()).setMaxAccess("readonly")
xATSTestingScheduleFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("never", 1), ("daily", 2), ("weekly", 3), ("monthly", 4),))).setMaxAccess("readwrite")
xATSTestingScheduleTestDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
xATSTestingScheduleTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 3), DisplayString()).setMaxAccess("readwrite")
xATSTestingScheduleTestWithLoadInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("applyLoadEveryTest", 1), ("neverApplyLoad", 2), ("applyLoadMonthly", 3), ("applyLoadMonthlyDetailed", 4),))).setMaxAccess("readwrite")
xATSTestingScheduleTestWithLoadSelectMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 5), DisplayString()).setMaxAccess("readwrite")
xATSTestingScheduleNextTestDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 6), DisplayString()).setMaxAccess("readonly")
xATSTestingSimulatePowerFailTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("cancelSimulation", 1), ("fiveSecondsSimulation", 2), ("tenSecondsSimulation", 3), ("thirtySecondsSimulation", 4), ("oneMinuteSimulation", 5), ("threeMinutesSimulation", 6), ("fiveMinutesSimulation", 7), ("tenMinutesSimulation", 8),))).setMaxAccess("readwrite")
xATSTestingSimulatePowerFailTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 2), Integer32()).setMaxAccess("readonly")
xATSInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 1), Integer32()).setMaxAccess("readonly")
xATSInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
xATSInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3), )
xATSInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSInputContactNumber"))
xATSInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
xATSInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
xATSInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
xATSInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
xATSOutputRelayNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 1), Integer32()).setMaxAccess("readonly")
xATSOutputRelayTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 2), Integer32()).setMaxAccess("readonly")
xATSOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3), )
xATSOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSOutputRelayNumber"))
xATSOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
xATSOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
xATSOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
xATSOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
xATSGeneratorIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
xATSGeneratorIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
xATSGeneratorIdentDateofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
xATSGeneratorIdentVoltageConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorIdentMaxPowerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 5), Integer32()).setMaxAccess("readonly")
xATSGeneratorIdentAlternatorFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
xATSGeneratorStatusGeneratorName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
xATSGeneratorStatusOperational = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("nocomm", 1), ("off", 2), ("ready", 3), ("starting", 4), ("idle", 5), ("running", 6), ("normalStop", 7), ("emergencyStop", 8), ("notInAuto", 9), ("shutdown", 10), ("unknown", 11),))).setMaxAccess("readonly")
xATSGeneratorStatusModeSwitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("automatic", 3), ("unknown", 4),))).setMaxAccess("readonly")
xATSGeneratorStatusRemoteStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("stop", 1), ("run", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSGeneratorAdvStatusBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 1), Integer32()).setMaxAccess("readonly")
xATSGeneratorAdvStatusOilPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 2), Integer32()).setMaxAccess("readonly")
xATSGeneratorAdvStatusCoolantTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 3), Integer32()).setMaxAccess("readonly")
xATSGeneratorAdvStatusEngineRPM = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorAdvStatusOilLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSGeneratorAdvStatusCoolantLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSGeneratorOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 1), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 2), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 3), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 5), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6), )
xATSGeneratorOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSGeneratorOutputPhaseIndex"))
xATSGeneratorOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
xATSGeneratorOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
xATSGeneratorOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsVoltageAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 1), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsFrequencyAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 2), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 3), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsStopDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsCrankCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3),))).setMaxAccess("readonly")
xATSGeneratorSettingsCrankTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 6), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsCrankRestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 7), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsNumberCrank = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 8), Integer32()).setMaxAccess("readonly")
xATSGeneratorSettingsMetricUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
xATSGeneratorServiceTotalRunHoursLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 1), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceEngineStartsLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 2), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceTotalkWhLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 3), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceTotalRunHoursSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceEngineStartsSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 5), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceTotalkWhMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 6), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceResetRecord = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
xATSGeneratorServiceRecordResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
xATSGeneratorServiceNextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 9), DisplayString()).setMaxAccess("readonly")
xATSGeneratorServiceRunHoursUntilServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 10), Integer32()).setMaxAccess("readonly")
xATSGeneratorServiceRunHoursThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("disabled", 1), ("runThreshold100Hours", 2), ("runThreshold150Hours", 3), ("runThreshold200Hours", 4), ("runThreshold250Hours", 5), ("runThreshold300Hours", 6), ("runThreshold400Hours", 7), ("runThreshold500Hours", 8),))).setMaxAccess("readwrite")
xATSGeneratorServiceCalendarIntervalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("disabled", 1), ("interval1month", 2), ("interval2month", 3), ("interval3month", 4), ("interval6month", 5), ("intervalyearly", 6),))).setMaxAccess("readwrite")
xATSGeneratorFuelSystemType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("diesel", 1), ("propane", 2), ("naturalGas", 3), ("unknown", 4),))).setMaxAccess("readonly")
xATSGeneratorFuelSystemTankSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 2), Integer32()).setMaxAccess("readonly")
xATSGeneratorFuelSystemFuelLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 3), Integer32()).setMaxAccess("readonly")
xATSGeneratorFuelSystemRuntimePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 4), Integer32()).setMaxAccess("readonly")
xATSGeneratorFuelSystemEstimatedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 5), Integer32()).setMaxAccess("readonly")
xATSGeneratorFuelSystemLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,)).clone(namedValues=NamedValues(("disabled", 1), ("oneHour", 2), ("twoHours", 3), ("threeHours", 4), ("fourHours", 5), ("fiveHours", 6), ("sixHours", 7), ("twelveHours", 8), ("oneDay", 9), ("twoDays", 10), ("threeDays", 11), ("fourDays", 12), ("fiveDays", 13), ("sixDays", 14), ("sevenDays", 15),))).setMaxAccess("readwrite")
xATSGeneratorFuelSystemVeryLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,)).clone(namedValues=NamedValues(("disabled", 1), ("oneHour", 2), ("twoHours", 3), ("threeHours", 4), ("fourHours", 5), ("fiveHours", 6), ("sixHours", 7), ("twelveHours", 8), ("oneDay", 9), ("twoDays", 10), ("threeDays", 11), ("fourDays", 12), ("fiveDays", 13), ("sixDays", 14), ("sevenDays", 15),))).setMaxAccess("readwrite")
xATSGeneratorFuelSystemLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
xATSGeneratorFuelSystemVeryLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
apCPSpname = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
apCPSversion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
apCPSPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3))
apCPSPwNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
apCPSPw1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
apCPSPw2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
apCPSPcmcia = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4))
apCPSNPcmcia = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
cpsCardIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2), )
cpsCardIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsCardIdentIndex"))
cpsCardIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
cpsCardIdentProd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
cpsCardIdentMan = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
cpsCardIdentFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
cpsCardIdentPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
cpsCardConfTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3), )
cpsCardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsCardConfIndex"))
cpsCardConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
cpsCardConfPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
cpsCardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
cpsCardConfInter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
cpsCardConfFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
cpsCardConfCardv = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
cpsCardConfPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
cpsCardConfPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
cpsCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4), )
cpsCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsCardStatusIndex"))
cpsCardStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2))).setMaxAccess("readonly")
cpsCardStatusCard = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
cpsCardStatusFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
apCPSFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 5), Integer32()).setMaxAccess("readonly")
apCPSRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
apCPSCPUfreq = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
apCPSDevId = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
cpsHostName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsConsoleBanner = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
cpsMotd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
cpsEthItf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4))
cpsEthDhcpc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
cpsEthIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
cpsEthIPmask = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
cpsEthMTU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
cpsEthIPaddr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 5), IpAddress()).setMaxAccess("readwrite")
cpsEthIPmask2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 6), IpAddress()).setMaxAccess("readwrite")
cpsNameService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5))
cpsResolverOrder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,15))).setMaxAccess("readwrite")
cpsMultipleIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,3))).setMaxAccess("readwrite")
cpsDNSserv = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3))
cpsDNSpriserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 1), IpAddress()).setMaxAccess("readwrite")
cpsDNSsecserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 2), IpAddress()).setMaxAccess("readwrite")
cpsDNSdomain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6))
cpsSerialGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1))
cpsSerialInclude = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialNFS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readwrite")
cpsSerialLockDir = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readwrite")
cpsSerialRlogin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readwrite")
cpsSerialPppd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readwrite")
cpsSerialTelnet = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readwrite")
cpsSerialSsh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readwrite")
cpsSerialLocalLogins = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
cpsSerialFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
cpsSerialDBFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
cpsSerialGroupTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11), )
cpsSerialGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsSerialGroupIndex"))
cpsSerialGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
cpsSerialGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,20))).setMaxAccess("readwrite")
cpsSerialGroupUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readwrite")
cpsSerialSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2))
cpsSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1), )
cpsSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsSerialPortNumber"))
cpsSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpsSerialPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,25))).setMaxAccess("readwrite")
cpsSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4,8))).setMaxAccess("readwrite")
cpsSerialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2))).setMaxAccess("readwrite")
cpsSerialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readwrite")
cpsSerialPortFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readwrite")
cpsSerialPortDTRdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDCDCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
cpsSerialPortLogUtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
cpsSerialPortLogWtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
cpsSerialPortLogform = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,25))).setMaxAccess("readwrite")
cpsSerialPortAuthSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
cpsSerialPortAccSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
cpsSerialPortAuthTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
cpsSerialPortAuthRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
cpsSerialPortAuthSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
cpsSerialPortAccSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
cpsSerialPortAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortAuthRadP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
cpsSerialPortAuthAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,20))).setMaxAccess("readwrite")
cpsSerialPortSocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,10))).setMaxAccess("readwrite")
cpsSerialPortRemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
cpsSerialPortBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,250))).setMaxAccess("readwrite")
cpsSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,250))).setMaxAccess("readwrite")
cpsSerialPortTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,20))).setMaxAccess("readwrite")
cpsSerialPortAutomUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 32), IpAddress()).setMaxAccess("readwrite")
cpsSerialPortPppMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
cpsSerialPortPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
cpsSerialPortPppOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
cpsSerialPortPppFoption = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 36), DisplayString()).setMaxAccess("readwrite")
cpsSerialPortModemChat = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 37), DisplayString()).setMaxAccess("readwrite")
cpsSerialPortSttyCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,180))).setMaxAccess("readwrite")
cpsSerialPortSockTx = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
cpsSerialPortSockPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
cpsSerialPortSockIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDBtime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDBmode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readwrite")
cpsSerialPortDBsyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDBmenu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
cpsSerialPortDBalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
cpsSerialPortSSHbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readwrite")
cpsSerialPortSniffSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readwrite")
cpsSerialPortSniffAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortSniffEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,6))).setMaxAccess("readwrite")
cpsSerialPortSniffMsess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,20))).setMaxAccess("readwrite")
cpsSerialPortTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 53), Integer32()).setMaxAccess("readwrite")
cpsSerialPortSysBufSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
cpsSerialPortLFSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
cpsSerialPortAutoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortAutoOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readwrite")
cpsSerialPortBreakInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
cpsInfoSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1), )
cpsInfoSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsInfoSerialPortNumber"))
cpsInfoSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
cpsInfoSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
cpsInfoSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortErrFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortErrParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortErrBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortErrOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortSigDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortSigCD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortSigDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortSigRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortSigCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
cpsInfoSerialPortSigRI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
apCPSSave = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
apCPSSerialHUP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
accessPXIdentAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
accessPXIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
accessPXIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
accessPXIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
accessPXIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
accessPXConfigCardReaderEnableDisableAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enable", 2),))).setMaxAccess("readwrite")
accessPXConfigAutoRelockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
accessPXConfigCardFormat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("hidStd26", 1), ("hid37Bit", 2), ("hid37BitWithFacility", 3), ("hidCorp1000", 4),))).setMaxAccess("readwrite")
accessPXConfigFrontDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4),))).setMaxAccess("readwrite")
accessPXConfigFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
accessPXStatusFrontDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
accessPXStatusFrontDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
accessPXStatusFrontDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
accessPXStatusFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 4), Integer32()).setMaxAccess("readonly")
accessPXStatusFrontDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 5), Integer32()).setMaxAccess("readonly")
accessPXConfigRearDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4),))).setMaxAccess("readwrite")
accessPXConfigRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
accessPXStatusRearDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
accessPXStatusRearDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
accessPXStatusRearDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
accessPXStatusRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 4), Integer32()).setMaxAccess("readonly")
accessPXStatusRearDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 5), Integer32()).setMaxAccess("readonly")
accessPXConfigBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
accessPXConfigBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 2), DisplayString()).setMaxAccess("readwrite")
accessPXConfigBeaconAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4),))).setMaxAccess("readwrite")
accessPXStatusBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
accessPXStatusBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
accessPXStatusBeaconCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("notInstalled", 3), ("disconnected", 4),))).setMaxAccess("readonly")
apcLocalDisplayIdentDisplayType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noDisplayFound", 1), ("powerviewRM", 2), ("powerviewWW", 3),))).setMaxAccess("readonly")
apcLocalDisplayIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
apcLocalDisplayIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
apcLocalDisplayIdentOptions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
apcLocalDisplayIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
apcLocalDisplayIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
apcLocalDisplayConfigAlarmBeeper = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("beeperDisabled", 1), ("beeperEnabled", 2),))).setMaxAccess("readwrite")
apcLocalDisplayConfigBeeperVolume = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("beeperDisabled", 1), ("beeperLow", 2), ("beeperMedium", 3), ("beeperHigh", 4),))).setMaxAccess("readwrite")
apcLocalDisplayConfigCheckLogIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("checklogNotPresent", 1), ("checklogDisabled", 2), ("checklogInformational", 3), ("checklogWarning", 4), ("checklogCritical", 5),))).setMaxAccess("readwrite")
apcLocalDisplayConfigKeyClick = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("keyclickDisabled", 1), ("keyclickEnabled", 2),))).setMaxAccess("readwrite")
apcLocalDisplayConfigContrast = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("contrast1", 1), ("contrast2", 2), ("contrast3", 3), ("contrast4", 4), ("contrast5", 5), ("contrast6", 6), ("contrast7", 7), ("contrast8", 8),))).setMaxAccess("readwrite")
powerNetSoftwareSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,79))).setMaxAccess("readonly")
powerNetSoftwareOid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
powerNetSoftwareSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
powerNetSoftwareTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
powerNetSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2), )
powerNetSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "moduleNumber"))
moduleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,79))).setMaxAccess("readonly")
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
moduleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,9))).setMaxAccess("readonly")
serverStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("running-missing", 4), ("initializing", 5), ("starting", 6), ("disaster-recovery", 7), ("postoffice-inconsistent", 8), ("missing-jgroups", 9),))).setMaxAccess("readonly")
databaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("detached", 4), ("catching-up", 5), ("attaching", 6), ("running-master", 7), ("running-primary-slave", 8), ("running-slave", 9), ("running-alone", 10),))).setMaxAccess("readonly")
loadBalancerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("running-missing", 4),))).setMaxAccess("readonly")
essentialServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("time-sync-problems", 4), ("backup-problems", 5),))).setMaxAccess("readonly")
etlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("failed", 3), ("paused", 4), ("stopped", 5),))).setMaxAccess("readonly")
upsBasicIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
upsBasicIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
upsAdvIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
upsAdvIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
upsAdvIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
upsAdvIdentFirmwareRevision2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
upsAdvIdentSkuNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
upsBasicBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryInFaultCondition", 4),))).setMaxAccess("readonly")
upsBasicBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
upsBasicBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
upsAdvBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
upsAdvBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
upsAdvBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 3), TimeTicks()).setMaxAccess("readonly")
upsAdvBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2),))).setMaxAccess("readonly")
upsAdvBatteryNumOfBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
upsAdvBatteryNumOfBadBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
upsAdvBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
upsAdvBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
upsAdvBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
upsAdvTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
upsAdvBatteryFullCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
upsAdvBatteryActualVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12), )
upsAdvBatteryActualVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvBatteryActualVoltageTableIndex"))
upsAdvBatteryActualVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
upsAdvBatteryActualVoltagePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("positive", 0), ("negative", 1),))).setMaxAccess("readonly")
upsAdvBatteryFrameActualVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
upsAdvTotalDCCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13), )
upsAdvTotalDCCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvTotalDCCurrentTableIndex"))
upsAdvTotalDCCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
upsAdvTotalDCCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("positive", 0), ("negative", 1),))).setMaxAccess("readonly")
upsAdvTotalFrameDCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 3), Integer32()).setMaxAccess("readonly")
upsAdvBatteryCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14), )
upsAdvBatteryCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvBatteryCurrentTableIndex"), (0, "PowerNet-MIB", "upsAdvBatteryCurrentIndex"))
upsAdvBatteryCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
upsAdvBatteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
upsAdvBatteryCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("positive", 0), ("negative", 1),))).setMaxAccess("readonly")
upsAdvBatteryFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
upsAdvBatteryEstimatedChargeTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 15), TimeTicks()).setMaxAccess("readonly")
upsAdvBatteryPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
upsAdvBatteryChargerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3),))).setMaxAccess("readonly")
upsAdvBatteryInternalSKU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 19), DisplayString()).setMaxAccess("readonly")
upsAdvBatteryExternalSKU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 20), DisplayString()).setMaxAccess("readonly")
upsAdvBatteryRecommendedReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 21), DisplayString()).setMaxAccess("readonly")
upsHighPrecBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
upsHighPrecBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
upsHighPrecBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
upsHighPrecTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryActualVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7), )
upsHighPrecBatteryActualVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryActualVoltageTableIndex"))
upsHighPrecBatteryActualVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryActualVoltagePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("positive", 0), ("negative", 1),))).setMaxAccess("readonly")
upsHighPrecBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
upsHighPrecTotalDCCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8), )
upsHighPrecTotalDCCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecTotalDCCurrentTableIndex"))
upsHighPrecTotalDCCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
upsHighPrecTotalDCCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("positive", 0), ("negative", 1),))).setMaxAccess("readonly")
upsHighPrecTotalDCFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9), )
upsHighPrecBatteryCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryCurrentTableIndex"), (0, "PowerNet-MIB", "upsHighPrecBatteryCurrentIndex"))
upsHighPrecBatteryCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("positive", 0), ("negative", 1),))).setMaxAccess("readonly")
upsHighPrecBatteryFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryPacks = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10))
upsHighPrecBatteryPackTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 1), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryPackTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2), )
upsHighPrecBatteryPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryPackIndex"), (0, "PowerNet-MIB", "upsHighPrecBatteryCartridgeIndex"))
upsHighPrecBatteryPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryCartridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryPackFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
upsHighPrecBatteryPackSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
upsHighPrecBatteryPackTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
upsHighPrecBatteryPackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 6), OctetString()).setMaxAccess("readonly")
upsHighPrecBatteryPackCartridgeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 7), OctetString()).setMaxAccess("readonly")
upsHighPrecBatteryPackCartridgeReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
upsHighPrecBatteryPackCartridgeInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
upsHighPrecBatteryPackCartridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 10), OctetString()).setMaxAccess("readonly")
upsBasicInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
upsAdvInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
upsAdvInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
upsAdvInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
upsAdvInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
upsAdvInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("noTransfer", 1), ("highLineVoltage", 2), ("brownout", 3), ("blackout", 4), ("smallMomentarySag", 5), ("deepMomentarySag", 6), ("smallMomentarySpike", 7), ("largeMomentarySpike", 8), ("selfTest", 9), ("rateOfVoltageChange", 10),))).setMaxAccess("readonly")
upsAdvInputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 6), Integer32()).setMaxAccess("readonly")
upsAdvInputNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 7), Integer32()).setMaxAccess("readonly")
upsAdvInputBypassNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 8), Integer32()).setMaxAccess("readonly")
upsAdvInputBypassNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 9), Integer32()).setMaxAccess("readonly")
upsAdvInputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10), )
upsAdvInputStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvInputStatisticsIndex"))
upsAdvInputStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
upsAdvInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
upsAdvInputVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
upsAdvInputBypassVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
upsAdvInputPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
upsAdvInputBypassPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
upsAdvInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
upsAdvInputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 11), Integer32()).setMaxAccess("readonly")
upsAdvInputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 12), Integer32()).setMaxAccess("readonly")
upsAdvInputBypassTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 13), Integer32()).setMaxAccess("readonly")
upsAdvInputBypassTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
upsHighPrecInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 1), Gauge32()).setMaxAccess("readonly")
upsHighPrecInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 2), Gauge32()).setMaxAccess("readonly")
upsHighPrecInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 3), Gauge32()).setMaxAccess("readonly")
upsHighPrecInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 4), Gauge32()).setMaxAccess("readonly")
upsHighPrecInputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 5), Unsigned32()).setMaxAccess("readonly")
upsHighPrecInputBypassVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 6), Unsigned32()).setMaxAccess("readonly")
upsHighPrecInputBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 7), Unsigned32()).setMaxAccess("readonly")
upsBasicOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,)).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onSmartBoost", 4), ("timedSleeping", 5), ("softwareBypass", 6), ("off", 7), ("rebooting", 8), ("switchedBypass", 9), ("hardwareFailureBypass", 10), ("sleepingUntilPowerReturn", 11), ("onSmartTrim", 12), ("ecoMode", 13), ("hotStandby", 14), ("onBatteryTest", 15), ("emergencyStaticBypass", 16), ("staticBypassStandby", 17), ("powerSavingMode", 18), ("spotMode", 19), ("eConversion", 20),))).setMaxAccess("readonly")
upsBasicOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
upsBasicSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,)).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onSmartBoost", 4), ("timedSleeping", 5), ("softwareBypass", 6), ("off", 7), ("rebooting", 8), ("switchedBypass", 9), ("hardwareFailureBypass", 10), ("sleepingUntilPowerReturn", 11), ("onSmartTrim", 12), ("ecoMode", 13), ("inverter", 14), ("eConversion", 15),))).setMaxAccess("readonly")
upsBasicSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
upsBasicSystemInverterStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3),))).setMaxAccess("readonly")
upsBasicSystemPFCStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3),))).setMaxAccess("readonly")
upsBasicOutputACwiringConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("noNeutralWiredonSystem", 2), ("neutralUsedforSupplyingLoad", 3),))).setMaxAccess("readonly")
upsAdvOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
upsAdvOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 2), Gauge32()).setMaxAccess("readonly")
upsAdvOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 3), Gauge32()).setMaxAccess("readonly")
upsAdvOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
upsAdvOutputRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 5), Gauge32()).setMaxAccess("readonly")
upsAdvOutputKVACapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
upsAdvOutputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
upsAdvOutputActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
upsAdvOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 9), Integer32()).setMaxAccess("readonly")
upsAdvOutputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10), )
upsAdvOutputStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvOutputStatisticsIndex"))
upsAdvOutputStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
upsAdvOutputPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
upsAdvOutputCurrentTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
upsAdvOutputCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
upsAdvOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 11), Integer32()).setMaxAccess("readonly")
upsHighPrecOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 1), Gauge32()).setMaxAccess("readonly")
upsHighPrecOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 2), Gauge32()).setMaxAccess("readonly")
upsHighPrecOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 3), Gauge32()).setMaxAccess("readonly")
upsHighPrecOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 4), Gauge32()).setMaxAccess("readonly")
upsHighPrecOutputEfficiency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
upsHighPrecOutputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 6), Unsigned32()).setMaxAccess("readonly")
upsBasicConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
upsBasicConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2), )
upsBasicConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "deviceIndex"))
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
vaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
acceptThisDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
upsAdvConfigRatedOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
upsAdvConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
upsAdvConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
upsAdvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("timed", 1), ("atLowBattery", 2), ("never", 3), ("mute", 4),))).setMaxAccess("readwrite")
upsAdvConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 5), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
upsAdvConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4),))).setMaxAccess("readwrite")
upsAdvConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 8), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 9), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 10), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 11), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2),))).setMaxAccess("readwrite")
upsAdvConfigDipSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13), )
upsAdvConfigDipSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1), ).setIndexNames((0, "PowerNet-MIB", "dipSwitchIndex"))
dipSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
dipSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("on", 1), ("off", 2),))).setMaxAccess("readonly")
upsAdvConfigBattExhaustThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 14), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 15), DisplayString()).setMaxAccess("readwrite")
upsAdvConfigAllowedSetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16), )
upsAdvConfigAllowedSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "apcUpsConfigFieldIndex"))
apcUpsConfigFieldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
apcUpsConfigFieldOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
apcUpsConfigFieldValueRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
upsAdvConfigBattCabAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 17), Integer32()).setMaxAccess("readwrite")
upsAdvConfigPositionSelector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("rack", 2), ("tower", 3),))).setMaxAccess("readwrite")
upsAdvConfigOutputFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,)).clone(namedValues=NamedValues(("unknown", 1), ("freqRangeAUTO", 2), ("freqRange60Var1", 3), ("freqRange60Var3", 4), ("freqRange50Var1", 5), ("freqRange50Var3", 6), ("freqRange60Var10", 7), ("freqRange50Var10", 8), ("freqRange60Var1dot0", 9), ("freqRange50Var1dot0", 10), ("freqRange50Pct0dot5", 11), ("freqRange50Pct1", 12), ("freqRange50Pct2", 13), ("freqRange50Pct4", 14), ("freqRange50Pct6", 15), ("freqRange50Pct8", 16), ("freqRange60Pct0dot5", 17), ("freqRange60Pct1", 18), ("freqRange60Pct2", 19), ("freqRange60Pct4", 20), ("freqRange60Pct6", 21), ("freqRange60Pct8", 22),))).setMaxAccess("readwrite")
upsAdvConfigUPSFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("gotoBypass", 2), ("dropLoad", 3),))).setMaxAccess("readwrite")
upsAdvConfigAlarmRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 21), Integer32()).setMaxAccess("readwrite")
upsAdvConfigAlarmLoadOver = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 22), Integer32()).setMaxAccess("readwrite")
upsAdvConfigAlarmRuntimeUnder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 23), Integer32()).setMaxAccess("readwrite")
upsAdvConfigVoutReporting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("voutAUTO", 2), ("vout208", 3), ("vout240", 4),))).setMaxAccess("readwrite")
upsAdvConfigNumExternalBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 25), Integer32()).setMaxAccess("readwrite")
upsAdvConfigSimpleSignalShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
upsAdvConfigMaxShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 27), Integer32()).setMaxAccess("readwrite")
upsAsiUpsControlServerRequestShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("serverShutdownOff", 1), ("serverShutdownReboot", 2),))).setMaxAccess("readwrite")
upsAdvConfigMinReturnRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 29), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigBasicSignalLowBatteryDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 30), TimeTicks()).setMaxAccess("readwrite")
upsAdvConfigBypassPhaseLockRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
upsAdvConfigOutputFreqSlewRate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("slewRateQuarterHzPerSec", 2), ("slewRateHalfHzPerSec", 3), ("slewRate1HzPerSec", 4), ("slewRate2HzPerSec", 5), ("slewRate4HzPerSec", 6), ("slewRate6HzPerSec", 7),))).setMaxAccess("readwrite")
upsAdvConfigChargerLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("low", 2), ("high", 3),))).setMaxAccess("readwrite")
upsAdvConfigBypassToleranceSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("wide", 2), ("medium", 3), ("narrow", 4), ("custom", 5),))).setMaxAccess("readwrite")
upsAdvConfigMainsSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("singleInput", 1), ("dualInput", 2),))).setMaxAccess("readonly")
upsAdvConfigACWiringSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2),))).setMaxAccess("readonly")
upsAdvConfigUpperOutputVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
upsAdvConfigLowerOutputVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
upsAdvConfigUpperBypassVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
upsAdvConfigLowerBypassVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
upsAdvConfigOutofSyncBypassTransferDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 41), Integer32()).setMaxAccess("readwrite")
upsAdvConfigWarningAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 43), Integer32()).setMaxAccess("readwrite")
upsAdvConfigInformationalAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 44), Integer32()).setMaxAccess("readwrite")
upsAdvConfigGreenMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 45), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
upsAdvConfigLCDLocalLanguage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 46), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("english", 1), ("french", 2), ("italian", 3), ("german", 4), ("spanish", 5), ("portuguese", 6), ("japanese", 7),))).setMaxAccess("readwrite")
upsAdvConfigLCDLockOut = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 47), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
upsAdvConfigChargerRate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 48), Integer32()).setMaxAccess("readwrite")
upsAdvConfigBatterySelection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("vrla", 1), ("ventedcell", 2),))).setMaxAccess("readwrite")
upsSCGMembershipGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
upsSCGActiveMembershipStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabledSCG", 1), ("disabledSCG", 2),))).setMaxAccess("readwrite")
upsSCGPowerSynchronizationDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
upsSCGReturnBatteryCapacityOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
upsSCGMultiCastIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
upsSCGNumOfGroupMembers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 1), Integer32()).setMaxAccess("readonly")
upsSCGStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2), )
upsSCGStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsSCGStatusTableIndex"))
upsSCGStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsSCGMemberIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
upsSCGACInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("acInGood", 1), ("acInBad", 2),))).setMaxAccess("readonly")
upsSCGACOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("acOutOn", 1), ("acOutOff", 2),))).setMaxAccess("readonly")
upsBasicStateOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
upsAdvStateAbnormalConditions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 1), DisplayString()).setMaxAccess("readonly")
upsAdvStateSymmetra3PhaseSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 2), DisplayString()).setMaxAccess("readonly")
upsAdvStateDP300ESpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 3), DisplayString()).setMaxAccess("readonly")
upsAdvStateSymmetraSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 4), DisplayString()).setMaxAccess("readonly")
upsAdvStateSmartUPSSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 5), DisplayString()).setMaxAccess("readonly")
upsAdvStateSystemMessages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 6), DisplayString()).setMaxAccess("readonly")
upsAdvStateTotaltimeonbattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 7), DisplayString()).setMaxAccess("readonly")
upsAdvStateTotaltimeonbypass = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 8), DisplayString()).setMaxAccess("readonly")
upsAdvStateTotaltimeonNormal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 9), DisplayString()).setMaxAccess("readonly")
upsAdvStateNumberoftimesonbattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 10), Integer32()).setMaxAccess("readonly")
upsAdvStateNumberoftimesbypass = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 11), Integer32()).setMaxAccess("readonly")
upsAdvStateNumberoftimesNormal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 12), Integer32()).setMaxAccess("readonly")
upsAdvStateEcomode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOnEcoMode", 1), ("upsNotOnEcoMode", 2),))).setMaxAccess("readonly")
upsBasicControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noTurnOffUps", 1), ("turnOffUpsToConserveBattery", 2),))).setMaxAccess("readwrite")
upsAdvControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2), ("turnUpsOffGracefully", 3), ("turnUpsSyncGroupOff", 4), ("turnUpsSyncGroupOffAfterDelay", 5), ("turnUpsSyncGroupOffGracefully", 6),))).setMaxAccess("readwrite")
upsAdvControlRebootShutdownUps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noRebootShutdownUps", 1), ("rebootShutdownUps", 2), ("rebootShutdownUpsGracefully", 3), ("rebootShutdownSyncGroupUps", 4), ("rebootShutdownSyncGroupUpsGracefully", 5),))).setMaxAccess("readwrite")
upsAdvControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2), ("putUpsToSleepGracefully", 3), ("putUpsSyncGroupToSleep", 4), ("putUpsSyncGroupToSleepGracefully", 5),))).setMaxAccess("readwrite")
upsAdvControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2),))).setMaxAccess("readwrite")
upsAdvControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2), ("flashAndBeepSyncGroup", 3), ("flashAndBeepCont", 4), ("flashAndBeepCancel", 5),))).setMaxAccess("readwrite")
upsAdvControlTurnOnUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noTurnOnUPS", 1), ("turnOnUPS", 2), ("turnOnUPSSyncGroup", 3),))).setMaxAccess("readwrite")
upsAdvControlBypassSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noBypassSwitch", 1), ("switchToBypass", 2), ("switchOutOfBypass", 3),))).setMaxAccess("readwrite")
upsAdvControlRebootUpsWithOrWithoutAC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noRebootUpsWithOrWithoutAC", 1), ("rebootUpsImmediatelyWithOrWithoutAC", 2), ("rebootUpsDelayedWithOrWithoutAC", 3),))).setMaxAccess("readwrite")
upsAdvControlFirmwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noFirmwareUpdate", 1), ("firmwareUpdate", 2), ("updateInProcess", 3), ("updateSuccessful", 4), ("updateFailed", 5),))).setMaxAccess("readwrite")
upsAdvTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("unknown", 1), ("biweekly", 2), ("weekly", 3), ("atTurnOn", 4), ("never", 5), ("fourWeeks", 6), ("twelveWeeks", 7), ("biweeklySinceLastTest", 8), ("weeklySinceLastTest", 9), ("eightWeeks", 10), ("twentysixWeeks", 11), ("fiftytwoWeeks", 12),))).setMaxAccess("readwrite")
upsAdvTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2),))).setMaxAccess("readwrite")
upsAdvTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4),))).setMaxAccess("readonly")
upsAdvTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
upsAdvTestRuntimeCalibration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noPerformCalibration", 1), ("performCalibration", 2), ("cancelCurrentCalibration", 3),))).setMaxAccess("readwrite")
upsAdvTestCalibrationResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("ok", 1), ("invalidCalibration", 2), ("calibrationInProgress", 3),))).setMaxAccess("readonly")
upsAdvTestCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 7), DisplayString()).setMaxAccess("readonly")
upsAdvTestDiagnosticTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readwrite")
upsAdvTestDiagnosticDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7),))).setMaxAccess("readwrite")
upsCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("ok", 1), ("noComm", 2),))).setMaxAccess("readonly")
mUpsEnvironAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
mUpsEnvironRelativeHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
mUpsEnvironAmbientTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
mUpsEnvironRelativeHumidity2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
mUpsContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
mUpsContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2), )
mUpsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "contactNumber"))
contactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
normalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("closed", 3),))).setMaxAccess("readwrite")
description = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
monitoringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3),))).setMaxAccess("readwrite")
currentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("noFault", 2), ("fault", 3),))).setMaxAccess("readonly")
upsPhaseResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("none", 1), ("reset", 2),))).setMaxAccess("readwrite")
upsPhaseNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
upsPhaseInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2), )
upsPhaseInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseInputTableIndex"))
upsPhaseInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsPhaseNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
upsPhaseInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5),))).setMaxAccess("readonly")
upsPhaseInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
upsPhaseInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("bypass", 3),))).setMaxAccess("readonly")
upsPhaseInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
upsPhaseInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3), )
upsPhaseInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseInputPhaseTableIndex"), (0, "PowerNet-MIB", "upsPhaseInputPhaseIndex"))
upsPhaseInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
upsPhaseInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
upsPhaseInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
upsPhaseInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
upsPhaseInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
upsPhaseInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
upsPhaseInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
upsPhaseInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
upsPhaseInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
upsPhaseInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
upsPhaseInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
upsPhaseInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
upsPhaseInputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
upsPhaseNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
upsPhaseOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2), )
upsPhaseOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseOutputTableIndex"))
upsPhaseOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsPhaseNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
upsPhaseOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5),))).setMaxAccess("readonly")
upsPhaseOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
upsPhaseOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3), )
upsPhaseOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseOutputPhaseTableIndex"), (0, "PowerNet-MIB", "upsPhaseOutputPhaseIndex"))
upsPhaseOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
upsPhaseOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
upsPhaseOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
upsPhaseOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
upsPhaseOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
upsPhaseOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
upsPhaseOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
upsPhaseOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
upsPhaseOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
upsPhaseOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
upsOutletGroupStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
upsOutletGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2), )
upsOutletGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupStatusIndex"))
upsOutletGroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsOutletGroupStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
upsOutletGroupStatusGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("upsOutletGroupStatusOn", 1), ("upsOutletGroupStatusOff", 2), ("upsOutletGroupStatusUnknown", 3),))).setMaxAccess("readonly")
upsOutletGroupStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOutletGroupCommandPending", 1), ("upsOutletGroupNoCommandPending", 2),))).setMaxAccess("readonly")
upsOutletGroupStatusOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2),))).setMaxAccess("readonly")
upsOutletGroupConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 1), Integer32()).setMaxAccess("readonly")
upsOutletGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2), )
upsOutletGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupConfigIndex"))
upsOutletGroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsOutletGroupConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
upsOutletGroupConfigPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
upsOutletGroupConfigPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
upsOutletGroupConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
upsOutletGroupConfigMinReturnRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
upsOutletGroupConfigOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2),))).setMaxAccess("readonly")
upsOutletGroupConfigLoadShedControlSkipOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOutletGroupConfigSkipOffDelay", 1), ("upsOutletGroupConfigUseOffDelay", 2),))).setMaxAccess("readwrite")
upsOutletGroupConfigLoadShedControlAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOutletGroupConfigAutoRestart", 1), ("upsOutletGroupConfigManualRestart", 2),))).setMaxAccess("readwrite")
upsOutletGroupConfigLoadShedControlTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOutletGroupConfigDisableTimeOnBatteryLoadShed", 1), ("upsOutletGroupConfigEnableTimeOnBatteryLoadShed", 2),))).setMaxAccess("readwrite")
upsOutletGroupConfigLoadShedControlRuntimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOutletGroupConfigDisableRuntimeRemainingLoadShed", 1), ("upsOutletGroupConfigEnableRuntimeRemainingLoadShed", 2),))).setMaxAccess("readwrite")
upsOutletGroupConfigLoadShedControlInOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsOutletGroupConfigDisableInOverloadLoadShed", 1), ("upsOutletGroupConfigEnableInOverloadLoadShed", 2),))).setMaxAccess("readwrite")
upsOutletGroupConfigLoadShedTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
upsOutletGroupConfigLoadShedRuntimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
upsOutletGroupControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
upsOutletGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2), )
upsOutletGroupControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupControlIndex"))
upsOutletGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsOutletGroupControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
upsOutletGroupControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("upsOutletGroupImmediateOn", 1), ("upsOutletGroupImmediateOff", 2), ("upsOutletGroupImmediateRebootWithOrWithoutAC", 3), ("upsOutletGroupDelayedOn", 4), ("upsOutletGroupDelayedOff", 5), ("upsOutletGroupDelayedRebootWithOrWithoutAC", 6), ("upsOutletGroupCancelPendingCommand", 7), ("upsOutletGroupControlUnknown", 8), ("upsOutletGroupImmediateRebootShutdown", 9), ("upsOutletGroupDelayedRebootShutdown", 10),))).setMaxAccess("readwrite")
upsOutletGroupControlOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2),))).setMaxAccess("readonly")
upsDiagIMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagIMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2), )
upsDiagIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagIMIndex"))
upsDiagIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("imUnknown", 1), ("imMIM", 2), ("imRIM", 3),))).setMaxAccess("readonly")
upsDiagIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagIMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagIMSlaveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagIMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagIMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagIMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
upsDiagPMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
upsDiagPMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2), )
upsDiagPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagPMIndex"))
upsDiagPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagPMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
upsDiagPMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagPMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagPMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagBatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 1), Integer32()).setMaxAccess("readonly")
upsDiagBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2), )
upsDiagBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagBatteryIndex"))
upsDiagBatteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("failed", 4), ("highTemperature", 5), ("replaceImmediately", 6), ("lowCapacity", 7),))).setMaxAccess("readonly")
upsDiagBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagBatteryFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagBatteryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagBatteryFramePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("notPresent", 0), ("present", 1),))).setMaxAccess("readonly")
upsDiagBatteryFrameTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
upsDiagSubSysFrameTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysFrameTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2), )
upsDiagSubSysFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysFrameIndex"))
upsDiagSubSysFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("frameTypeMain", 3), ("frameTypeXR", 4), ("frameTypeLXR", 5),))).setMaxAccess("readonly")
upsDiagSubSysFrameFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysFrameHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysFrameSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysFrameManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 3), Integer32()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4), )
upsDiagSubSysIntBypSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysIntBypSwitchIndex"))
upsDiagSubSysIntBypSwitchFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysIntBypSwitchManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 5), Integer32()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6), )
upsDiagSubSysBattMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysBattMonitorIndex"))
upsDiagSubSysBattMonitorFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysBattMonitorFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysBattMonitorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 7), Integer32()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8), )
upsDiagSubSysExternalSwitchGearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysExternalSwitchGearIndex"))
upsDiagSubSysExternalSwitchGearFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysExternalSwitchGearManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysDisplayInterfaceCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 9), Integer32()).setMaxAccess("readonly")
upsDiagSubSysDisplayInterfaceCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10), )
upsDiagSubSysDisplayInterfaceCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysDisplayInterfaceCardIndex"))
upsDiagSubSysDisplayInterfaceCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysDisplayInterfaceCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysDisplayInterfaceCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysDCCircuitBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 11), Integer32()).setMaxAccess("readonly")
upsDiagSubSysDCCircuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12), )
upsDiagSubSysDCCircuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysDCCircuitBreakerIndex"))
upsDiagSubSysDCCircuitBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysDCCircuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysDCCircuitBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 13), Integer32()).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14), )
upsDiagSubSysSystemPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysSystemPowerSupplyIndex"))
upsDiagSubSysSystemPowerSupplyFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysSystemPowerSupplyManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysXRCommunicationCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 15), Integer32()).setMaxAccess("readonly")
upsDiagSubSysXRCommunicationCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16), )
upsDiagSubSysXRCommunicationCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysXRCommunicationCardIndex"))
upsDiagSubSysXRCommunicationCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysXRCommunicationCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysXRCommunicationCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysXRCommunicationCardFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysXRCommunicationCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysExternalPowerFrameBoardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 17), Integer32()).setMaxAccess("readonly")
upsDiagSubSysExternalPowerFrameBoardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18), )
upsDiagSubSysExternalPowerFrameBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysExternalPowerFrameBoardIndex"))
upsDiagSubSysExternalPowerFrameBoardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysExternalPowerFrameBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysExternalPowerFrameBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysChargerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 19), Integer32()).setMaxAccess("readonly")
upsDiagSubSysChargerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20), )
upsDiagSubSysChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysChargerIndex"))
upsDiagSubSysChargerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysInverterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 21), Integer32()).setMaxAccess("readonly")
upsDiagSubSysInverterTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22), )
upsDiagSubSysInverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysInverterIndex"))
upsDiagSubSysInverterFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysInverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysInverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysInverterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysInverterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysInverterSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysInverterManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 23), Integer32()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24), )
upsDiagSubSysPowerFactorCorrectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysPowerFactorCorrectionIndex"))
upsDiagSubSysPowerFactorCorrectionFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7),))).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysPowerFactorCorrectionManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 25), Integer32()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26), )
upsDiagSubSysNetworkComCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysNetworkComCardIndex"))
upsDiagSubSysNetworkComCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 4), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 5), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardFirmwareAppRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 6), DisplayString()).setMaxAccess("readonly")
upsDiagSubSysNetworkComCardFirmwareAppOSRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 7), DisplayString()).setMaxAccess("readonly")
upsDiagSwitchGearStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("fail", 4), ("lostComm", 5), ("overtemp", 6),))).setMaxAccess("readonly")
upsDiagSwitchGearInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagSwitchGearOutputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagSwitchGearBypassSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagSwitchGearBypassInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagSwitchGearBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
upsDiagSwitchGearBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7), )
upsDiagSwitchGearBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "switchgearBreakerIndex"))
switchgearBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
switchgearBreakerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
switchgearBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
switchgearBreakerType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("unitInputBreaker", 2), ("staticSwitchInputBreaker", 3), ("maintenanceBypassBreaker", 4), ("unitOutputBreaker", 5), ("systemIsolationBreaker", 6),))).setMaxAccess("readonly")
switchgearBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("opened", 2), ("closed", 3),))).setMaxAccess("readonly")
upsDiagSubFeedBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 8), Integer32()).setMaxAccess("readonly")
upsDiagSubFeedBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9), )
upsDiagSubFeedBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "subfeedBreakerIndex"))
subfeedBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
subfeedBreakerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
subfeedBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
subfeedBreakerUpperAcceptPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
subfeedBreakerUpperAcceptPowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,125))).setMaxAccess("readwrite")
subfeedBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagSwitchGearInstallationLoadPct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 10), Integer32()).setMaxAccess("readonly")
upsDiagSubFeedPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11), )
upsDiagSubFeedPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubFeedPhaseIndex"))
upsDiagSubFeedBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
upsDiagSubFeedPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
upsDiagSubFeedPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
upsDiagSwitchgearSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
upsDiagMCCBBoxStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsDiagTransformerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("fail", 4), ("lostComm", 5), ("overtemp", 6), ("opened", 7), ("closed", 8),))).setMaxAccess("readonly")
upsDiagFlyWheelStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 4, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("present", 2), ("notPresent", 3),))).setMaxAccess("readonly")
upsDiagComBusInternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6),))).setMaxAccess("readonly")
upsDiagComBusInternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6),))).setMaxAccess("readonly")
upsDiagComBusMIMtoRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6),))).setMaxAccess("readonly")
upsDiagComBusExternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6),))).setMaxAccess("readonly")
upsDiagComBusExternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6),))).setMaxAccess("readonly")
upsParallelSysLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 1), Integer32()).setMaxAccess("readwrite")
upsParallelSysRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 2), Integer32()).setMaxAccess("readwrite")
upsParallelSysRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("nplus0", 1), ("nplus1", 2), ("nplus2", 3), ("nplus3", 4), ("nplus4", 5), ("nplus5", 6),))).setMaxAccess("readwrite")
upsParallelInputMaximumCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 4), Integer32()).setMaxAccess("readonly")
upsParallelTotalOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 5), Integer32()).setMaxAccess("readonly")
upsParallelTotalOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 6), Integer32()).setMaxAccess("readonly")
upsParallelInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7), )
upsParallelInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelInputPhaseTableIndex"), (0, "PowerNet-MIB", "upsParallelInputPhaseIndex"))
upsParallelInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
upsParallelInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 2), Integer32()).setMaxAccess("readonly")
upsParallelInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 3), Integer32()).setMaxAccess("readonly")
upsParallelInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 4), Integer32()).setMaxAccess("readonly")
upsParallelInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 5), Integer32()).setMaxAccess("readonly")
upsParallelInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 6), Integer32()).setMaxAccess("readonly")
upsParallelInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 7), Integer32()).setMaxAccess("readonly")
upsParallelInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 8), Integer32()).setMaxAccess("readonly")
upsParallelInputTotalActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 9), Integer32()).setMaxAccess("readonly")
upsParallelInputTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 10), Integer32()).setMaxAccess("readonly")
upsParallelOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8), )
upsParallelOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputPhaseTableIndex"), (0, "PowerNet-MIB", "upsParallelOutputPhaseIndex"))
upsParallelOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 1), Integer32()).setMaxAccess("readonly")
upsParallelOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 2), Integer32()).setMaxAccess("readonly")
upsParallelOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 3), Integer32()).setMaxAccess("readonly")
upsParallelOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 4), Integer32()).setMaxAccess("readonly")
upsParallelOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 5), Integer32()).setMaxAccess("readonly")
upsParallelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 6), Integer32()).setMaxAccess("readonly")
upsParallelOutputApparentPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9), )
upsParallelOutputApparentPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputApparentPowerTableIndex"))
upsParallelOutputApparentPowerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 1), Integer32()).setMaxAccess("readonly")
upsParallelOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 2), Integer32()).setMaxAccess("readonly")
upsParallelDiagSubSysBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10), )
upsParallelDiagSubSysBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelDiagSubSysBreakerFrameIndex"), (0, "PowerNet-MIB", "upsParallelDiagSubSysBreakerIndex"))
upsParallelDiagSubSysBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 1), Integer32()).setMaxAccess("readonly")
upsParallelDiagSubSysBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 2), Integer32()).setMaxAccess("readonly")
upsParallelDiagSubSysBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4),))).setMaxAccess("readonly")
upsParallelDiagSubSysBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
upsParallelOutputTotalPercentLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
upsParallelOutputActivePowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12), )
upsParallelOutputActivePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputActivePowerTableIndex"))
upsParallelOutputActivePowerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1, 1), Integer32()).setMaxAccess("readonly")
upsParallelOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1, 2), Integer32()).setMaxAccess("readonly")
upsParallelSysSwitchGearInstallationLoadPct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
upsParallelSysRedundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("nplus0", 1), ("nplus1", 2), ("nplus2", 3), ("nplus3", 4), ("nplus4", 5), ("nplus5", 6),))).setMaxAccess("readonly")
upsParallelSysName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 15), DisplayString()).setMaxAccess("readwrite")
upsIOFrameLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 1), Integer32()).setMaxAccess("readonly")
upsBottomFeedFrameLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 2), Integer32()).setMaxAccess("readonly")
upsSwitchGearLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 3), Integer32()).setMaxAccess("readonly")
upsBatteryFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 4), Integer32()).setMaxAccess("readonly")
upsBatteryFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5), )
upsBatteryFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "batteryFrameIndex"))
batteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
batteryFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 2), Integer32()).setMaxAccess("readonly")
upsSideCarFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 6), Integer32()).setMaxAccess("readonly")
upsSideCarFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7), )
upsSideCarFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "sideCarFrameIndex"))
sideCarFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
sideCarFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 2), Integer32()).setMaxAccess("readonly")
upsPowerFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 8), Integer32()).setMaxAccess("readonly")
upsPowerFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9), )
upsPowerFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "powerFrameIndex"))
powerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 1), Integer32()).setMaxAccess("readonly")
powerFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 2), Integer32()).setMaxAccess("readonly")
upsIntegratedATSSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("noSourceSelected", 1), ("unknown", 2), ("sourceA", 3), ("sourceB", 4),))).setMaxAccess("readonly")
upsIntegratedATSPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("upsIntegratedATSNoSourcePreference", 1), ("upsIntegratedATSPreferSourceA", 2), ("upsIntegratedATSPreferSourceB", 3),))).setMaxAccess("readwrite")
upsIntegratedATSUpsReturnStaggering = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 3), Integer32()).setMaxAccess("readwrite")
upsIntegratedATSSourceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 4), Integer32()).setMaxAccess("readonly")
upsIntegratedATSSourceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5), )
upsIntegratedATSSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "upsIntegratedATSSourceIndex"))
upsIntegratedATSSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 1), Integer32()).setMaxAccess("readonly")
upsIntegratedATSSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
upsIntegratedATSSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("upsIntegratedATSSourceGood", 1), ("upsIntegratedATSSourceBad", 2), ("upsIntegratedATSSourceUnknown", 3),))).setMaxAccess("readonly")
upsIntegratedATSLineFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
upsIntegratedATSLineStabilityDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
serialPort2Mode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("localConsole", 1), ("passthrough", 2),))).setMaxAccess("readwrite")
setPulseOnTXD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("noSetPulseOnTXD", 1), ("setPulseOnTXD", 2), ("setTXDLow", 3), ("setTXDHigh", 4),))).setMaxAccess("readwrite")
sPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
sPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
sPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
sPDUMasterControlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("turnAllOnNow", 1), ("turnAllOnSequence", 2), ("turnAllOffNow", 3), ("rebootAllNow", 4), ("rebootAllSequence", 5), ("noCommand", 6), ("turnAllOffSequence", 7),))).setMaxAccess("readwrite")
sPDUMasterState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
sPDUMasterPending = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 3), DisplayString()).setMaxAccess("readonly")
sPDUMasterConfigPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
sPDUMasterConfigReboot = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
sPDUMasterConfigPDUName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 3), DisplayString()).setMaxAccess("readwrite")
sPDUOutletControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2), )
sPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlIndex"))
sPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3),))).setMaxAccess("readonly")
sPDUOutletCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("outletOn", 1), ("outletOff", 2), ("outletReboot", 3), ("outletUnknown", 4), ("outletOnWithDelay", 5), ("outletOffWithDelay", 6), ("outletRebootWithDelay", 7),))).setMaxAccess("readwrite")
sPDUOutletCtlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2), )
sPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigIndex"))
sPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
sPDUOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
sPDUOutletPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
sPDUOutletRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
sPDUIdentVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUIdentVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2), )
sPDUIdentVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUIdentVMIndex"))
sPDUIdentVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUIdentNameVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUIdentHardwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
sPDUIdentFirmwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUIdentDateOfManufactureVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
sPDUIdentModelNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
sPDUIdentSerialNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
sPDUMasterControlVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2), )
sPDUMasterControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterControlVMIndex"))
sPDUMasterControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUMasterControlVMCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("noCommandAllVM", 1), ("immediateAllOnVM", 2), ("immediateAllOffVM", 3), ("immediateAllRebootVM", 4), ("delayedAllOnVM", 5), ("delayedAllOffVM", 6), ("sequencedAllRebootVM", 7), ("delayedAllRebootVM", 8), ("delayedSequenceAllRebootVM", 9), ("cancelAllPendingCommandsVM", 10), ("audioAlarmMute", 11),))).setMaxAccess("readwrite")
sPDUMasterConfigVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2), )
sPDUMasterConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterConfigVMIndex"))
sPDUMasterConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
sPDUMasterConfigVMColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
sPDUMasterConfigVMAudioAlarmActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("audioAlarmActiveNever", 1), ("audioAlarmActiveOnOverload", 2), ("audioAlarmActiveOnOverloadImminent", 3),))).setMaxAccess("readwrite")
sPDUMasterConfigVMHighLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
sPDUMasterConfigVMLowLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
sPDUMasterConfigVMOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnWarning", 2), ("restrictOnOverload", 3),))).setMaxAccess("readwrite")
sPDUMasterStatusVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2), )
sPDUMasterStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterStatusVMIndex"))
sPDUMasterStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUMasterStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("commandPendingMasterTrueVM", 1), ("commandPendingMasterFalseVM", 2),))).setMaxAccess("readonly")
sPDUMasterStatusVMOverloadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("overloadConditionTrueVM", 1), ("overloadConditionFalseVM", 2),))).setMaxAccess("readonly")
sPDUMasterStatusVMLowLoadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("lowLoadConditionTrueVM", 1), ("lowLoadConditionFalseVM", 2),))).setMaxAccess("readonly")
sPDUMasterStatusVMCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusVMMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusVMOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
sPDUOutletControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1), )
sPDUOutletControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlVMIndex"), (0, "PowerNet-MIB", "sPDUOutletControlVMOutletIndex"))
sPDUOutletControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletControlVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletControlVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletControlVMOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("immediateOnVM", 1), ("immediateOffVM", 2), ("immediateRebootVM", 3), ("delayedOnVM", 4), ("delayedOffVM", 5), ("delayedRebootVM", 6), ("cancelPendingCommandVM", 7),))).setMaxAccess("readwrite")
sPDUOutletConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1), )
sPDUOutletConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigVMIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigVMOutletIndex"))
sPDUOutletConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
sPDUOutletConfigVMPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
sPDUOutletConfigVMPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
sPDUOutletConfigVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
sPDUOutletStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1), )
sPDUOutletStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletStatusVMIndex"), (0, "PowerNet-MIB", "sPDUOutletStatusVMOutletIndex"))
sPDUOutletStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletStatusVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletStatusVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletStatusVMOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletStatusVMOn", 1), ("outletStatusVMOff", 2),))).setMaxAccess("readonly")
sPDUOutletStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletStatusVMCommandPending", 1), ("outletStatusVMNoCommandPending", 2),))).setMaxAccess("readonly")
sPDUIdentMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUIdentMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2), )
sPDUIdentMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUIdentMSPIndex"))
sPDUIdentMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUIdentNameMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUIdentHardwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
sPDUIdentFirmwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUIdentDateOfManufactureMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
sPDUIdentModelNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
sPDUIdentSerialNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
sPDUMasterControlMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2), )
sPDUMasterControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterControlMSPIndex"))
sPDUMasterControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUMasterControlMSPCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("noCommandAllMSP", 1), ("immediateAllOnMSP", 2), ("sequencedAllOnMSP", 3), ("immediateAllOffMSP", 4), ("gracefulAllRebootMSP", 5), ("immediateAllRebootMSP", 6), ("gracefulAllShutdownMSP", 7), ("overrideAllBatCapThreshMSP", 8), ("cancelAllPendingCommandsMSP", 9), ("restoreFactoryDefaultsMSP", 10),))).setMaxAccess("readwrite")
sPDUMasterConfigMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterConfigMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2), )
sPDUMasterConfigMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterConfigMSPIndex"))
sPDUMasterConfigMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterConfigMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
sPDUMasterConfigMSPPowerOnTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,9999))).setMaxAccess("readwrite")
sPDUMasterConfigMSPManualButton = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("manualButtonDisabled", 1), ("manualButtonEnabled", 2),))).setMaxAccess("readwrite")
sPDUMasterStatusMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2), )
sPDUMasterStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterStatusMSPIndex"))
sPDUMasterStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUMasterStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUMasterStatusMSPOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1), )
sPDUOutletControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlMSPIndex"), (0, "PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"))
sPDUOutletControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletControlMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletControlMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletControlMSPOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("immediateOnMSP", 1), ("delayedOnMSP", 2), ("immediateOffMSP", 3), ("gracefulRebootMSP", 4), ("immediateRebootMSP", 5), ("gracefulshutdownMSP", 6), ("overrideBatCapThreshMSP", 7), ("cancelPendingCommandMSP", 8),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPallTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1), )
sPDUOutletConfigMSPallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPallIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPallOutletIndex"))
sPDUOutletConfigMSPallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPallName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPallOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPallOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
sPDUOutletConfigMSPallOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1), )
sPDUOutletConfigMSPgsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPgsIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPgsOutletIndex"))
sPDUOutletConfigMSPgsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPgsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPgsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPgsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPgsOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2),))).setMaxAccess("readonly")
sPDUOutletConfigMSPgsDeviceConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("deviceConfirmNo", 1), ("deviceConfirmYes", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsLowBattWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2,9999))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsLowBattMult = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,7))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1,9999))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1,9999))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,9999))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsBattCapThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
sPDUOutletConfigMSPgsRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,9999))).setMaxAccess("readwrite")
sPDUOutletConfigMSPannunTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1), )
sPDUOutletConfigMSPannunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPannunIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPannunOutletIndex"))
sPDUOutletConfigMSPannunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPannunName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPannunOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPannunOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPannunOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2),))).setMaxAccess("readonly")
sPDUOutletConfigMSPannunInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("initialStateOff", 1), ("initialStateOn", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPannunAlarmActionDly = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,9999))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1), )
sPDUOutletConfigMSPmupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPmupsIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPmupsOutletIndex"))
sPDUOutletConfigMSPmupsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPmupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPmupsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletConfigMSPmupsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletConfigMSPmupsZone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsZone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsZone3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsZone4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP1LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP1HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP1LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP1HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP2LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP2HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP2LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletConfigMSPmupsP2HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2),))).setMaxAccess("readwrite")
sPDUOutletStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1), )
sPDUOutletStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletStatusMSPIndex"), (0, "PowerNet-MIB", "sPDUOutletStatusMSPOutletIndex"))
sPDUOutletStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
sPDUOutletStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
sPDUOutletStatusMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
sPDUOutletStatusMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
sPDUOutletStatusMSPOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletStatusMSPOn", 1), ("outletStatusMSPOff", 2),))).setMaxAccess("readonly")
sPDUOutletStatusMSPCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletStatusMSPCommandPending", 1), ("outletStatusMSPNoCommandPending", 2),))).setMaxAccess("readonly")
sPDUOutletStatusMSPOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2),))).setMaxAccess("readonly")
rPDUIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 1), DisplayString()).setMaxAccess("readwrite")
rPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
rPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
rPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
rPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
rPDUIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
rPDUIdentDeviceNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
rPDUIdentDeviceNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
rPDUIdentDeviceNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
rPDUIdentDeviceBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
rPDUIdentDeviceOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2),))).setMaxAccess("readonly")
rPDUIdentDeviceOutletLayout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9),))).setMaxAccess("readonly")
rPDUIdentDeviceDisplayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2),))).setMaxAccess("readwrite")
rPDUIdentDeviceLinetoLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 15), Integer32()).setMaxAccess("readwrite")
rPDUIdentDevicePowerWatts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 16), Integer32()).setMaxAccess("readonly")
rPDUIdentDevicePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 17), Integer32()).setMaxAccess("readwrite")
rPDUIdentDevicePowerVA = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 18), Integer32()).setMaxAccess("readonly")
rPDUIdentDeviceLinetoNeutralVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readwrite")
rPDULoadDevMaxPhaseLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDULoadDevNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDULoadDevMaxBankLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
rPDULoadDevNumBanks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
rPDULoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
rPDULoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6), )
rPDULoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadDevBankIndex"))
rPDULoadDevBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
rPDULoadDevBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
rPDULoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
rPDULoadDevMaxOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
rPDULoadDevMaxOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8), )
rPDULoadDevMaxOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadDevOutletIndex"))
rPDULoadDevOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
rPDULoadDevOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
rPDULoadDevMaxOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
rPDULoadPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1), )
rPDULoadPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadPhaseConfigIndex"))
rPDULoadPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
rPDULoadPhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
rPDULoadPhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
rPDULoadPhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
rPDULoadPhaseConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4),))).setMaxAccess("readonly")
rPDULoadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1), )
rPDULoadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadStatusIndex"))
rPDULoadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDULoadStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
rPDULoadStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4),))).setMaxAccess("readonly")
rPDULoadStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
rPDULoadStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
rPDULoadBankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1), )
rPDULoadBankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadBankConfigIndex"))
rPDULoadBankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDULoadBankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
rPDULoadBankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
rPDULoadBankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
rPDULoadBankConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4),))).setMaxAccess("readonly")
rPDUOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8),))).setMaxAccess("readwrite")
rPDUOutletDevColdstartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
rPDUOutletDevNumCntrlOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
rPDUOutletDevNumTotalOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
rPDUOutletDevMonitoredOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
rPDUOutletPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1), )
rPDUOutletPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletPhaseIndex"))
rPDUOutletPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
rPDUOutletPhaseOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3),))).setMaxAccess("readwrite")
rPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1), )
rPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletControlIndex"))
rPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
rPDUOutletControlOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6),))).setMaxAccess("readonly")
rPDUOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7),))).setMaxAccess("readwrite")
rPDUOutletControlOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
rPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1), )
rPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletConfigIndex"))
rPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
rPDUOutletConfigOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6),))).setMaxAccess("readonly")
rPDUOutletConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
rPDUOutletConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
rPDUOutletConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDUOutletConfigOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
rPDUOutletConfigMonitoredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 2), Integer32()).setMaxAccess("readonly")
rPDUOutletConfigMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3), )
rPDUOutletConfigMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletConfigMonitoredIndex"))
rPDUOutletConfigMonitoredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUOutletConfigMonitoredName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
rPDUOutletConfigMonitoredNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
rPDUOutletConfigMonitoredLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
rPDUOutletConfigMonitoredNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
rPDUOutletConfigMonitoredOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1), )
rPDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletStatusIndex"))
rPDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
rPDUOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6),))).setMaxAccess("readonly")
rPDUOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2),))).setMaxAccess("readonly")
rPDUOutletStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2),))).setMaxAccess("readonly")
rPDUOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
rPDUOutletStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
rPDUOutletBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1), )
rPDUOutletBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletBankIndex"))
rPDUOutletBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUOutletBankOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3),))).setMaxAccess("readwrite")
rPDUPowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("powerSupplyOneOk", 1), ("powerSupplyOneFailed", 2),))).setMaxAccess("readonly")
rPDUPowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("powerSupplyTwoOk", 1), ("powerSupplyTwoFailed", 2), ("powerSupplyTwoNotPresent", 3),))).setMaxAccess("readonly")
rPDUPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("allAvailablePowerSuppliesOK", 1), ("powerSupplyOneFailed", 2), ("powerSupplyTwoFailed", 3), ("powerSupplyOneandTwoFailed", 4),))).setMaxAccess("readonly")
rPDUStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 1), Integer32()).setMaxAccess("readonly")
rPDUStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2), )
rPDUStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUStatusBankIndex"))
rPDUStatusBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDUStatusBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("bankLoadNormal", 1), ("bankLoadLow", 2), ("bankLoadNearOverload", 3), ("bankLoadOverload", 4),))).setMaxAccess("readonly")
rPDUStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 3), Integer32()).setMaxAccess("readonly")
rPDUStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4), )
rPDUStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUStatusPhaseIndex"))
rPDUStatusPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
rPDUStatusPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4),))).setMaxAccess("readonly")
rPDUStatusOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 5), Integer32()).setMaxAccess("readonly")
rPDUStatusOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6), )
rPDUStatusOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUStatusOutletIndex"))
rPDUStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
rPDUStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
rPDUStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("outletLoadNormal", 1), ("outletLoadLow", 2), ("outletLoadNearOverload", 3), ("outletLoadOverload", 4),))).setMaxAccess("readonly")
class Rpdu2OutletPhaseLayoutType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5, 6,)
    namedValues = NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6),)

rPDU2IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 1), Integer32()).setMaxAccess("readonly")
rPDU2IdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2), )
rPDU2IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2IdentIndex"))
rPDU2IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2IdentModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
rPDU2IdentHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
rPDU2IdentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
rPDU2IdentDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
rPDU2IdentModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
rPDU2IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
rPDU2IdentContact = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 3), Integer32()).setMaxAccess("readonly")
rPDU2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4))
rPDU2DeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1), )
rPDU2DeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceConfigIndex"))
rPDU2DeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2DeviceConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
rPDU2DeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
rPDU2DeviceConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
rPDU2DeviceConfigDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2),))).setMaxAccess("readwrite")
rPDU2DeviceConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDU2DeviceConfigLowLoadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
rPDU2DeviceConfigNearOverloadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
rPDU2DeviceConfigOverloadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
rPDU2DeviceConfigDevicePeakPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
rPDU2DeviceConfigDeviceEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3),))).setMaxAccess("readwrite")
rPDU2DeviceConfigOutletsEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3),))).setMaxAccess("readwrite")
rPDU2DeviceConfigOutletsPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3),))).setMaxAccess("readwrite")
rPDU2DevicePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2), )
rPDU2DevicePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DevicePropertiesIndex"))
rPDU2DevicePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2DevicePropertiesNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesNumSwitchedOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesNumMeteredOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesNumMeteredBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesMaxCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
rPDU2DevicePropertiesOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("verticalISXv2", 3),))).setMaxAccess("readonly")
rPDU2DevicePropertiesOutletLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9), ("seqPhToNPhToPhPhToN", 10),))).setMaxAccess("readonly")
rPDU2DevicePropertiesMaxPhaseCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3), )
rPDU2DeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceStatusIndex"))
rPDU2DeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4),))).setMaxAccess("readonly")
rPDU2DeviceStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3),))).setMaxAccess("readonly")
rPDU2DeviceStatusPowerSupplyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
rPDU2DeviceStatusPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2), ("notInstalled", 3),))).setMaxAccess("readonly")
rPDU2DeviceStatusPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2), ("notInstalled", 3),))).setMaxAccess("readonly")
rPDU2DeviceStatusOutletsEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
rPDU2DeviceStatusNPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notNPS", 1), ("host", 2), ("guest", 3),))).setMaxAccess("readonly")
rPDU2DeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4), )
rPDU2DeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceControlIndex"))
rPDU2DeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2DeviceControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2DeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2DeviceControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("immediateAllOn", 1), ("delayedAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllReboot", 5), ("noCommandAll", 6), ("delayedAllOff", 7), ("cancelAllPendingCommands", 8),))).setMaxAccess("readwrite")
rPDU2PhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 5), Integer32()).setMaxAccess("readonly")
rPDU2Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6))
rPDU2PhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1), )
rPDU2PhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseConfigIndex"))
rPDU2PhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2PhaseConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2PhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2PhaseConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ("notSupported", 4),))).setMaxAccess("readwrite")
rPDU2PhaseConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
rPDU2PhaseConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDU2PhaseConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
rPDU2PhaseConfigPhasePeakCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
rPDU2PhasePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2), )
rPDU2PhasePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhasePropertiesIndex"))
rPDU2PhasePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2PhasePropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2PhasePropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3), )
rPDU2PhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseStatusIndex"))
rPDU2PhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4),))).setMaxAccess("readonly")
rPDU2PhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
rPDU2PhaseStatusPeakCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
rPDU2PhaseStatusPeakCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
rPDU2BankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 7), Integer32()).setMaxAccess("readonly")
rPDU2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8))
rPDU2BankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1), )
rPDU2BankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2BankConfigIndex"))
rPDU2BankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2BankConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2BankConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2BankConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ("notSupported", 4),))).setMaxAccess("readwrite")
rPDU2BankConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
rPDU2BankConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDU2BankConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
rPDU2BankConfigBankPeakCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
rPDU2BankPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2), )
rPDU2BankPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2BankPropertiesIndex"))
rPDU2BankPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2BankPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2BankPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2BankPropertiesPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 4), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
rPDU2BankStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3), )
rPDU2BankStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2BankStatusIndex"))
rPDU2BankStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2BankStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2BankStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2BankStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4),))).setMaxAccess("readonly")
rPDU2BankStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
rPDU2BankStatusPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2BankStatusPeakCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
rPDU2BankStatusPeakCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
rPDU2Outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9))
rPDU2OutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitched = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2))
rPDU2OutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1), )
rPDU2OutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedConfigIndex"))
rPDU2OutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
rPDU2OutletSwitchedConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
rPDU2OutletSwitchedConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDU2OutletSwitchedConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
rPDU2OutletSwitchedPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2), )
rPDU2OutletSwitchedPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedPropertiesIndex"))
rPDU2OutletSwitchedPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2OutletSwitchedPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedPropertiesPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 5), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
rPDU2OutletSwitchedPropertiesBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3), )
rPDU2OutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedStatusIndex"))
rPDU2OutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2OutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
rPDU2OutletSwitchedStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3),))).setMaxAccess("readonly")
rPDU2OutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4), )
rPDU2OutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedControlIndex"))
rPDU2OutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2OutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletSwitchedControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("outletUnknown", 4), ("delayedOn", 5), ("delayedOff", 6), ("delayedReboot", 7), ("cancelPendingCommand", 8),))).setMaxAccess("readwrite")
rPDU2OutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 3), Integer32()).setMaxAccess("readonly")
rPDU2OutletMetered = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4))
rPDU2OutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1), )
rPDU2OutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredConfigIndex"))
rPDU2OutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
rPDU2OutletMeteredConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
rPDU2OutletMeteredConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
rPDU2OutletMeteredConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
rPDU2OutletMeteredPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2), )
rPDU2OutletMeteredPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredPropertiesIndex"))
rPDU2OutletMeteredPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2OutletMeteredPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredPropertiesLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 5), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
rPDU2OutletMeteredPropertiesPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredPropertiesBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3), )
rPDU2OutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredStatusIndex"))
rPDU2OutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4),))).setMaxAccess("readonly")
rPDU2OutletMeteredStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
rPDU2OutletMeteredStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
rPDU2Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10))
rPDU2SensorTempHumidityTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 1), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2))
rPDU2SensorTempHumidityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1), )
rPDU2SensorTempHumidityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorTempHumidityConfigIndex"))
rPDU2SensorTempHumidityConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityConfigTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigHumidityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigTempMaxThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigTempHighThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigTempHysteresisF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigTempMaxThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigTempHighThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigTempHysteresisC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
rPDU2SensorTempHumidityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2), )
rPDU2SensorTempHumidityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorTempHumidityStatusIndex"))
rPDU2SensorTempHumidityStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("temperatureOnly", 1), ("temperatureHumidity", 2), ("commsLost", 3), ("notInstalled", 4),))).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("aboveHigh", 5), ("aboveMax", 6),))).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusRelativeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
rPDU2SensorTempHumidityStatusHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("aboveHigh", 5), ("aboveMax", 6),))).setMaxAccess("readonly")
rPDU2SensorDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 3), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4))
rPDU2SensorDiscreteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1), )
rPDU2SensorDiscreteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorDiscreteConfigIndex"))
rPDU2SensorDiscreteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscreteConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscreteConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
rPDU2SensorDiscreteConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscreteConfigNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2),))).setMaxAccess("readwrite")
rPDU2SensorDiscreteConfigAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("critical", 3),))).setMaxAccess("readwrite")
rPDU2SensorDiscreteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2), )
rPDU2SensorDiscreteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorDiscreteStatusIndex"))
rPDU2SensorDiscreteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("notConnected", 1), ("doorContactSensor", 2), ("smokeSensor", 3), ("motionDetector", 4), ("vibrationSensor", 5), ("dryContactSensor", 6), ("spotLeakSensor", 7),))).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3),))).setMaxAccess("readonly")
rPDU2SensorDiscreteStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2),))).setMaxAccess("readonly")
rPDU2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11))
rPDU2GroupNumberOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 1), Integer32()).setMaxAccess("readonly")
rPDU2GroupTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 2), Integer32()).setMaxAccess("readonly")
rPDU2GroupTotalEnergy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 3), Integer32()).setMaxAccess("readonly")
rPDU2GroupEnergyReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3),))).setMaxAccess("readwrite")
rPDU2PhaseToPhaseStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 12), Integer32()).setMaxAccess("readonly")
rPDU2PhaseToPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13))
rPDU2PhaseToPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1), )
rPDU2PhaseToPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseToPhaseStatusIndex"))
rPDU2PhaseToPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rPDU2PhaseToPhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rPDU2PhaseToPhaseStatusVoltage1to2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
rPDU2PhaseToPhaseStatusVoltage2to3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
rPDU2PhaseToPhaseStatusVoltage3to1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
coolingUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1))
coolingUnitTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2), )
coolingUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"))
coolingUnitTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitAbout = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3))
coolingUnitAboutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitAboutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2), )
coolingUnitAboutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitAboutTableIndex"))
coolingUnitAboutTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitAboutDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitAboutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
coolingUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4))
coolingUnitStatusAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1))
coolingUnitStatusAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitStatusAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2), )
coolingUnitStatusAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitStatusAnalogTableIndex"))
coolingUnitStatusAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitStatusAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitStatusAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
coolingUnitStatusAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
coolingUnitStatusAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
coolingUnitStatusDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2))
coolingUnitStatusDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitStatusDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2), )
coolingUnitStatusDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitStatusDiscreteTableIndex"))
coolingUnitStatusDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitStatusDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitStatusDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
coolingUnitStatusDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
coolingUnitStatusDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
coolingUnitConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5))
coolingUnitConfigurationAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1))
coolingUnitConfigurationAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitConfigurationAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2), )
coolingUnitConfigurationAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationAnalogTableIndex"))
coolingUnitConfigurationAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitConfigurationAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitConfigurationAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
coolingUnitConfigurationAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
coolingUnitConfigurationAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
coolingUnitConfigurationAnalogAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2),))).setMaxAccess("readonly")
coolingUnitConfigurationAnalogMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
coolingUnitConfigurationAnalogMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
coolingUnitConfigurationDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2))
coolingUnitConfigurationDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitConfigurationDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2), )
coolingUnitConfigurationDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationDiscreteTableIndex"))
coolingUnitConfigurationDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitConfigurationDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitConfigurationDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
coolingUnitConfigurationDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
coolingUnitConfigurationDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
coolingUnitConfigurationDiscreteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2),))).setMaxAccess("readonly")
coolingUnitConfigurationString = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3))
coolingUnitConfigurationStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitConfigurationStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2), )
coolingUnitConfigurationStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationStringTableIndex"))
coolingUnitConfigurationStringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitConfigurationStringDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitConfigurationStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
coolingUnitConfigurationStringMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
coolingUnitConfigurationStringAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2),))).setMaxAccess("readonly")
coolingUnitExtended = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6))
coolingUnitExtendedAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1))
coolingUnitExtendedAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitExtendedAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2), )
coolingUnitExtendedAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedAnalogTableIndex"))
coolingUnitExtendedAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitExtendedAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitExtendedAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
coolingUnitExtendedAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
coolingUnitExtendedAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
coolingUnitExtendedDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2))
coolingUnitExtendedDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitExtendedDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2), )
coolingUnitExtendedDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedDiscreteTableIndex"))
coolingUnitExtendedDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitExtendedDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitExtendedDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
coolingUnitExtendedDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
coolingUnitExtendedDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
coolingUnitExtendedString = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3))
coolingUnitExtendedStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
coolingUnitExtendedStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2), )
coolingUnitExtendedStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedStringTableIndex"))
coolingUnitExtendedStringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
coolingUnitExtendedStringDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
coolingUnitExtendedStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
dm3IdentSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
dm3IdentSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2), )
dm3IdentSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3IdentSysDescriptionIndex"))
dm3IdentSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3IdentSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3IdentSysModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
dm3IdentSysCntrlRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
dm3IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
dm3ConfigSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2), )
dm3ConfigSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigSysDescriptionIndex"))
dm3ConfigSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
dm3ConfigSysHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
dm3ConfigSysHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigSysLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
dm3ConfigSysLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigSysHardwareTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("accessEnabled", 1), ("accessDisabled", 2),))).setMaxAccess("readwrite")
dm3ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2), )
dm3ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigLVDIndex"))
dm3ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
dm3ConfigLVDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2),))).setMaxAccess("readwrite")
dm3ConfigLVDTripThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
dm3ConfigLVDResetThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
dm3ConfigLVDOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigLVDHWAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattDischargeThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattDischargeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 11), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 13), Integer32()).setMaxAccess("readwrite")
dm3ConfigCompMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("tempcompOn", 1), ("tempcompOff", 2),))).setMaxAccess("readwrite")
dm3ConfigCompTempCoeff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 15), Integer32()).setMaxAccess("readwrite")
dm3ConfigHighKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
dm3ConfigLowKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
dm3ConfigBattHwCurrentAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBattHwTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRectHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
dm3ConfigRectLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
dm3ConfigRectFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
dm3ConfigRectFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
dm3ConfigRectHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRectLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRectConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRect1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRect2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRectDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigRectImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigRectCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigRectStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigRectFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigRectFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigRectHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigConvHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvFailMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvFailMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
dm3ConfigConvHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigConvLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigConvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigConv1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigConv2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigConvDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigConvImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigConvCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigConvStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigConvFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigConvFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigConvHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10),))).setMaxAccess("readwrite")
dm3ConfigOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2), )
dm3ConfigOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigOutRlyIndex"))
dm3ConfigOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
dm3ConfigOutRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
dm3ConfigOutRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2), )
dm3ConfigInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigInRlyIndex"))
dm3ConfigInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
dm3ConfigInRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
dm3ConfigInRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2), )
dm3ConfigBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigBreakersIndex"))
dm3ConfigBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
dm3ConfigBreakersAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3ConfigFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2), )
dm3ConfigFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigFusesIndex"))
dm3ConfigFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3ConfigFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
dm3ConfigFusesAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9),))).setMaxAccess("readwrite")
dm3StatusSystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusSystemStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("accessEnabled", 1), ("accessDisabled", 2),))).setMaxAccess("readonly")
dm3StatusSysSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
dm3StatusSysTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2),))).setMaxAccess("readonly")
dm3StatusSysAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("alarmMinor", 1), ("alarmMajor", 2), ("alarmBoth", 3), ("alarmNone", 4),))).setMaxAccess("readonly")
dm3StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
dm3StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 1), Integer32()).setMaxAccess("readonly")
dm3StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2), )
dm3StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusAlarmsIndex"))
dm3StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 1), Integer32()).setMaxAccess("readonly")
dm3StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 2), Integer32()).setMaxAccess("readonly")
dm3StatusBattCurrentSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2),))).setMaxAccess("readonly")
dm3StatusBattTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2),))).setMaxAccess("readonly")
dm3StatusOEMrectOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 1), Integer32()).setMaxAccess("readonly")
dm3StatusOEMrectGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 2), Integer32()).setMaxAccess("readonly")
dm3StatusOEMconvOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 3), Integer32()).setMaxAccess("readonly")
dm3StatusOEMconvGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 4), Integer32()).setMaxAccess("readonly")
dm3StatusOEMshuntOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 5), Integer32()).setMaxAccess("readonly")
dm3StatusOEMshuntGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 6), Integer32()).setMaxAccess("readonly")
dm3StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 1), Integer32()).setMaxAccess("readonly")
dm3StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2), )
dm3StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusLVDIndex"))
dm3StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2),))).setMaxAccess("readonly")
dm3StatusLVDHwFault = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusFault", 1), ("statusNofault", 2),))).setMaxAccess("readonly")
dm3StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2), )
dm3StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusRectIndex"))
dm3StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
dm3StatusRectDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
dm3StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
dm3StatusRectCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
dm3StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
dm3StatusRectCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
dm3StatusRectFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
dm3StatusRectPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusRectState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
dm3StatusSysRectVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2),))).setMaxAccess("readonly")
dm3StatusSysRectAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusSysRectType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
dm3StatusSysRectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
dm3StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
dm3StatusConvTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 1), Integer32()).setMaxAccess("readonly")
dm3StatusConvTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2), )
dm3StatusConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusConvIndex"))
dm3StatusConvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusConvID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
dm3StatusConvDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
dm3StatusConvCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
dm3StatusConvCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
dm3StatusConvPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
dm3StatusConvCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
dm3StatusConvFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
dm3StatusConvPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusConvState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
dm3StatusSysConvVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2),))).setMaxAccess("readonly")
dm3StatusSysConvAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dm3StatusSysConvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 5), Integer32()).setMaxAccess("readonly")
dm3StatusSysConvVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 6), Integer32()).setMaxAccess("readonly")
dm3StatusSysConvCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 7), Integer32()).setMaxAccess("readonly")
dm3StatusOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2), )
dm3StatusOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusOutRlyIndex"))
dm3StatusOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusOutRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2),))).setMaxAccess("readonly")
dm3StatusInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
dm3StatusInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2), )
dm3StatusInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusInRlyIndex"))
dm3StatusInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusInRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2),))).setMaxAccess("readonly")
dm3StatusBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2), )
dm3StatusBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusBreakersIndex"))
dm3StatusBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusBreakersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpen", 2),))).setMaxAccess("readonly")
dm3StatusFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 1), Integer32()).setMaxAccess("readonly")
dm3StatusFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2), )
dm3StatusFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusFusesIndex"))
dm3StatusFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dm3StatusFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
dm3StatusFusesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpen", 2),))).setMaxAccess("readonly")
atsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
atsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
atsIdentFirmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
atsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
atsIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
atsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
atsIdentNominalLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
atsIdentNominalLineFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
atsIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
atsCalibrationNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
atsCalibrationNumInputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
atsCalibrationInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3), )
atsCalibrationInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsCalibrationInputTableIndex"), (0, "PowerNet-MIB", "atsCalibrationInputPhaseTableIndex"))
atsCalibrationInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
atsCalibrationInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
atsLineVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
atsCalibrationPowerSupplyVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 1), Integer32()).setMaxAccess("readonly")
atsCalibrationPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2), )
atsCalibrationPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "atsCalibrationPowerSupplyVoltageTableIndex"))
atsCalibrationPowerSupplyVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
atsCalibrationPowerSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("powerSupply24V", 1), ("powerSupply12V", 2), ("powerSupply", 3), ("powerSupply24VSourceB", 4), ("powerSupplyMinus12V", 5),))).setMaxAccess("readonly")
atsPowerSupplyVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
atsCalibrationNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
atsCalibrationNumOutputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 2), Integer32()).setMaxAccess("readonly")
atsCalibrationOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3), )
atsCalibrationOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsCalibrationOutputTableIndex"), (0, "PowerNet-MIB", "atsCalibrationOutputPhasesTableIndex"))
atsCalibrationOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
atsCalibrationOutputPhasesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("neutral", 4),))).setMaxAccess("readonly")
atsOutputCurrentCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
atsControlResetATS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("none", 1), ("reset", 2),))).setMaxAccess("readwrite")
atsControlClearAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("none", 1), ("clear", 2),))).setMaxAccess("readwrite")
atsConfigProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 1), DisplayString()).setMaxAccess("readwrite")
atsConfigPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("none", 3),))).setMaxAccess("readwrite")
atsConfigFrontPanelLockout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disableFrontPanel", 1), ("enableFrontPanel", 2),))).setMaxAccess("readwrite")
atsConfigVoltageSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("high", 1), ("low", 2),))).setMaxAccess("readwrite")
atsConfigTransferVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("wide", 1), ("medium", 2), ("narrow", 3),))).setMaxAccess("readwrite")
atsConfigCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,20))).setMaxAccess("readwrite")
atsConfigResetValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("none", 1), ("reset", 2),))).setMaxAccess("readwrite")
atsConfigLineVRMS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 8), Integer32()).setMaxAccess("readwrite")
atsConfigLineVRMSNarrowLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 9), Integer32()).setMaxAccess("readwrite")
atsConfigLineVRMSMediumLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 10), Integer32()).setMaxAccess("readwrite")
atsConfigLineVRMSWideLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 11), Integer32()).setMaxAccess("readwrite")
atsConfigFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3),))).setMaxAccess("readwrite")
atsConfigBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 13), Integer32()).setMaxAccess("readonly")
atsConfigBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14), )
atsConfigBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "atsConfigBankTableIndex"))
atsConfigBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
atsConfigBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3),))).setMaxAccess("readonly")
atsConfigBankLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
atsConfigBankNearOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
atsConfigBankOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
atsConfigPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 15), Integer32()).setMaxAccess("readonly")
atsConfigPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16), )
atsConfigPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "atsConfigPhaseTableIndex"))
atsConfigPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
atsConfigPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
atsConfigPhaseLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
atsConfigPhaseNearOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
atsConfigPhaseOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 5), Integer32()).setMaxAccess("readwrite")
atsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("atsNeverDiscovered", 1), ("atsCommEstablished", 2), ("atsCommLost", 3),))).setMaxAccess("readonly")
atsStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2),))).setMaxAccess("readonly")
atsStatusRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsRedundancyLost", 1), ("atsFullyRedundant", 2),))).setMaxAccess("readonly")
atsStatusOverCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsOverCurrent", 1), ("atsCurrentOK", 2),))).setMaxAccess("readonly")
atsStatus5VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2),))).setMaxAccess("readonly")
atsStatus24VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2),))).setMaxAccess("readonly")
atsStatus24VSourceBPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2),))).setMaxAccess("readonly")
atsStatusPlus12VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2),))).setMaxAccess("readonly")
atsStatusMinus12VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2),))).setMaxAccess("readonly")
atsStatusSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fail", 1), ("ok", 2),))).setMaxAccess("readonly")
atsStatusFrontPanel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2),))).setMaxAccess("readonly")
atsStatusSourceAStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fail", 1), ("ok", 2),))).setMaxAccess("readonly")
atsStatusSourceBStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fail", 1), ("ok", 2),))).setMaxAccess("readonly")
atsStatusPhaseSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2),))).setMaxAccess("readonly")
atsStatusVoltageOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fail", 1), ("ok", 2),))).setMaxAccess("readonly")
atsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fail", 1), ("ok", 2),))).setMaxAccess("readonly")
atsStatusResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("none", 1), ("reset", 2),))).setMaxAccess("readwrite")
atsNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 1), Integer32()).setMaxAccess("readonly")
atsInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2), )
atsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "atsInputTableIndex"))
atsInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
atsNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
atsInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5),))).setMaxAccess("readonly")
atsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
atsInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("bypass", 3),))).setMaxAccess("readonly")
atsInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
atsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3), )
atsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsInputPhaseTableIndex"), (0, "PowerNet-MIB", "atsInputPhaseIndex"))
atsInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
atsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
atsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
atsInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
atsInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
atsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
atsInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
atsInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
atsInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
atsInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
atsInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
atsNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 1), Integer32()).setMaxAccess("readonly")
atsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2), )
atsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "atsOutputTableIndex"))
atsOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
atsNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
atsOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5),))).setMaxAccess("readonly")
atsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
atsOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3), )
atsOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsOutputPhaseTableIndex"), (0, "PowerNet-MIB", "atsOutputPhaseIndex"))
atsOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
atsOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("neutral", 4),))).setMaxAccess("readonly")
atsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
atsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
atsOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
atsOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
atsOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
atsOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
atsOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
atsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
atsOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
atsOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
atsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
atsOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
atsOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
atsOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
atsOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
atsOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
atsOutputPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("lowload", 2), ("nearoverload", 3), ("overload", 4),))).setMaxAccess("readonly")
atsOutputBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 4), Integer32()).setMaxAccess("readonly")
atsOutputBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5), )
atsOutputBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "atsOutputBankTableIndex"))
atsOutputBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
atsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
atsOutputBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3),))).setMaxAccess("readonly")
atsOutputBankCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
atsOutputBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("lowload", 2), ("nearoverload", 3), ("overload", 4),))).setMaxAccess("readonly")
atsOutputBankOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
atsOutputBankMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
atsOutputBankMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
atsOutputBankLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
atsOutputBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
atsOutputBankMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
atsOutputBankPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
atsOutputBankMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
atsOutputBankMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
atsOutputBankPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
atsOutputBankMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 16), Integer32()).setMaxAccess("readonly")
atsOutputBankMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 17), Integer32()).setMaxAccess("readonly")
atsOutputBankPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 18), Integer32()).setMaxAccess("readonly")
atsOutputBankMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 19), Integer32()).setMaxAccess("readonly")
atsOutputBankMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 20), Integer32()).setMaxAccess("readonly")
dcmim2IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
dcmim2ControlRunFunctBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("battTestOff", 1), ("battTestOn", 2),))).setMaxAccess("readwrite")
dcmim2ControlRunCapacityBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("battTestOff", 1), ("battTestOn", 2),))).setMaxAccess("readwrite")
dcmim2ConfigSysHighTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigSysHighTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigSysLowTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigSysLowTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattFunctTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 5), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattFunctTestThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattCapacityTestPercent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattCapacityTestEndThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigBattCapacityTestCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 9), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 1), Integer32()).setMaxAccess("readonly")
dcmim2ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2), )
dcmim2ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2ConfigLVDIndex"))
dcmim2ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dcmim2ConfigLVDTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigLVDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
dcmim2ConfigLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2),))).setMaxAccess("readonly")
dcmim2StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusSysLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
dcmim2StatusSysBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 3), Integer32()).setMaxAccess("readonly")
dcmim2StatusSysAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
dcmim2StatusSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
dcmim2StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
dcmim2StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2), )
dcmim2StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusRectIndex"))
dcmim2StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
dcmim2StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
dcmim2StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
dcmim2StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2),))).setMaxAccess("readonly")
dcmim2StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
dcmim2StatusBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 2), Integer32()).setMaxAccess("readonly")
dcmim2StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 3), Integer32()).setMaxAccess("readonly")
dcmim2StatusBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 4), Integer32()).setMaxAccess("readonly")
dcmim2StatusBattTestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 5), Integer32()).setMaxAccess("readonly")
dcmim2StatusBattFunctTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("functTestNotPerformed", 1), ("functTestInProcess", 2), ("functTestInterrupted", 3), ("functTestPass", 4), ("functTestFail", 5),))).setMaxAccess("readonly")
dcmim2StatusBattCapacityTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("capacityTestNotPerformed", 1), ("capacityTestInProcess", 2), ("capacityTestInterrupted", 3), ("capacityTestPass", 4), ("capacityTestFail", 5),))).setMaxAccess("readonly")
dcmim2StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2), )
dcmim2StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusLVDIndex"))
dcmim2StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2),))).setMaxAccess("readonly")
dcmim2StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2), )
dcmim2StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusAlarmsIndex"))
dcmim2StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
dcmim2StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
emIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
emConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 1), Integer32()).setMaxAccess("readonly")
emConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2), )
emConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "emConfigProbeNumber"))
emConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
emConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
emConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
emConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
emConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
emConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
emConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
emConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
emConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
emConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
emConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
emConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
emConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
emConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
emConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 3), Integer32()).setMaxAccess("readonly")
emConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4), )
emConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "emConfigContactNumber"))
emConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
emConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
emConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
emConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3),))).setMaxAccess("readwrite")
emConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
emConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
emStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noComm", 1), ("comm", 2), ("commLost", 3),))).setMaxAccess("readonly")
emStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 2), Integer32()).setMaxAccess("readonly")
emStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3), )
emStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "emStatusProbeNumber"))
emStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
emStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
emStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2),))).setMaxAccess("readonly")
emStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
emStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
emStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
emStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("highTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("lowTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("highHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("lowHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("maxTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("minTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("maxHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("minHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
emStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 4), Integer32()).setMaxAccess("readonly")
emStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5), )
emStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "emStatusContactNumber"))
emStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
emStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
emStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noFault", 1), ("fault", 2), ("disabled", 3),))).setMaxAccess("readonly")
memModulesStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
memModulesStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2), )
memModulesStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memModulesStatusModuleNumber"))
memModulesStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
memModulesStatusModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
memModulesStatusModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
memModulesStatusModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
memModulesStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
memModulesStatusFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
memModulesStatusHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
memModulesConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
memModulesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4), )
memModulesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memModulesConfigModuleNumber"))
memModulesConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
memModulesConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
memModulesConfigModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
memSensorsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
memSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 2), Integer32()).setMaxAccess("readonly")
memSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3), )
memSensorsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "memSensorsStatusModuleNumber"), (0, "PowerNet-MIB", "memSensorsStatusSensorNumber"))
memSensorsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
memSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
memSensorsStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
memSensorsStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
memSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
memSensorsHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
memSensorsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
memSensorsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3),))).setMaxAccess("readonly")
memSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 4), Integer32()).setMaxAccess("readonly")
memSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5), )
memSensorsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "memSensorsConfigModuleNumber"), (0, "PowerNet-MIB", "memSensorsConfigSensorNumber"))
memSensorsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
memSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
memSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
memSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
memSensorsAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
memSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
memSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
memSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
memSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
memSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
memSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
memSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
memSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
memSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
memSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
memSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
memSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
memSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
memSensorsHumidityMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
memSensorsHumidityHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
memSensorsHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
memSensorsHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
memSensorsHumidityThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
memInputsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 1), Integer32()).setMaxAccess("readonly")
memInputsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2), )
memInputsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memInputsStatusModuleNumber"), (0, "PowerNet-MIB", "memInputsStatusInputNumber"))
memInputsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
memInputsStatusInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
memInputsStatusInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
memInputsStatusInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
memInputsStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("inputClosedHighMEM", 1), ("inputOpenLowMEM", 2), ("inputDisabled", 3), ("inputStateNotApplicable", 4),))).setMaxAccess("readonly")
memInputsStatusCurrentAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
memInputsStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3),))).setMaxAccess("readonly")
memInputsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
memInputsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 3), Integer32()).setMaxAccess("readonly")
memInputsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4), )
memInputsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memInputsConfigModuleNumber"), (0, "PowerNet-MIB", "memInputsConfigInputNumber"))
memInputsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
memInputsConfigInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
memInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
memInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
memInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noConnection", 1), ("dryContact", 2), ("digital", 3), ("analogmAmps", 4), ("analogVolts", 5),))).setMaxAccess("readwrite")
memInputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
memInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("inputClosedHighMEM", 1), ("inputOpenLowMEM", 2), ("inputDisabled", 3), ("inputStateNotApplicable", 4),))).setMaxAccess("readwrite")
memInputAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("inputSeverityinformational", 1), ("inputSeveritywarning", 2), ("inputSeveritysevere", 3), ("inputSeverityNotApplicable", 4),))).setMaxAccess("readwrite")
memInputNumberCalibrationPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 17), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
memInputAnalogCalibrationPoint5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
memInputAnalogMeasurementUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
memInputAnalogMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 21), DisplayString()).setMaxAccess("readwrite")
memInputAnalogHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
memInputAnalogLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 23), DisplayString()).setMaxAccess("readwrite")
memInputAnalogMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 24), DisplayString()).setMaxAccess("readwrite")
memInputAnalogThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 25), DisplayString()).setMaxAccess("readwrite")
memOutputStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 1), Integer32()).setMaxAccess("readonly")
memOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2), )
memOutputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutputStatusModuleNumber"), (0, "PowerNet-MIB", "memOutputStatusOutputNumber"))
memOutputStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
memOutputStatusOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
memOutputStatusOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
memOutputStatusOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
memOutputStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("memOutputClosed", 1), ("memOutputOpen", 2),))).setMaxAccess("readonly")
memOutputConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 3), Integer32()).setMaxAccess("readonly")
memOutputConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4), )
memOutputConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutputConfigModuleNumber"), (0, "PowerNet-MIB", "memOutputConfigOutputNumber"))
memOutputConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
memOutputConfigOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
memOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
memOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
memOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("memOutputClosed", 1), ("memOutputOpen", 2),))).setMaxAccess("readwrite")
memOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("memActionClose", 1), ("memActionOpen", 2),))).setMaxAccess("readwrite")
memOutletStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 1), Integer32()).setMaxAccess("readonly")
memOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2), )
memOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutletStatusModuleNumber"), (0, "PowerNet-MIB", "memOutletStatusOutletNumber"))
memOutletStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
memOutletStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
memOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
memOutletStatusOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
memOutletStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
memOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 3), Integer32()).setMaxAccess("readonly")
memOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4), )
memOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutletConfigModuleNumber"), (0, "PowerNet-MIB", "memOutletConfigOutletNumber"))
memOutletConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
memOutletConfigOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
memOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
memOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
memOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readwrite")
memOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2),))).setMaxAccess("readwrite")
memBeaconStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 1), Integer32()).setMaxAccess("readonly")
memBeaconStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2), )
memBeaconStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memBeaconStatusModuleNumber"), (0, "PowerNet-MIB", "memBeaconStatusBeaconNumber"))
memBeaconStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
memBeaconStatusBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
memBeaconStatusBeaconName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
memBeaconStatusBeaconLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
memBeaconStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
memBeaconConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 3), Integer32()).setMaxAccess("readonly")
memBeaconConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4), )
memBeaconConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memBeaconConfigModuleNumber"), (0, "PowerNet-MIB", "memBeaconConfigBeaconNumber"))
memBeaconConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
memBeaconConfigBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
memBeaconConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
memBeaconConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
memBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2),))).setMaxAccess("readwrite")
iemIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
iemConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 1), Integer32()).setMaxAccess("readonly")
iemConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2), )
iemConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "iemConfigProbeNumber"))
iemConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
iemConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
iemConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
iemConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
iemConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
iemConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
iemConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
iemConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
iemConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
iemConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
iemConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
iemConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
iemConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
iemConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
iemConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 3), Integer32()).setMaxAccess("readonly")
iemConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4), )
iemConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "iemConfigContactNumber"))
iemConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
iemConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
iemConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
iemConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3),))).setMaxAccess("readwrite")
iemConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
iemConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
iemConfigConfigRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 5), Integer32()).setMaxAccess("readonly")
iemConfigRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6), )
iemConfigRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "iemConfigRelayNumber"))
iemConfigRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
iemConfigRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
iemConfigRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
iemConfigRelayFaultCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
iemStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 1), Integer32()).setMaxAccess("readonly")
iemStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2), )
iemStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "iemStatusProbeNumber"))
iemStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
iemStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
iemStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2),))).setMaxAccess("readonly")
iemStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
iemStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
iemStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
iemStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("highTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("lowTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("highHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("lowHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("maxTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("minTempViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("maxHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noViolation", 1), ("minHumidViolation", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
iemStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 3), Integer32()).setMaxAccess("readonly")
iemStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4), )
iemStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "iemStatusContactNumber"))
iemStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
iemStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
iemStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noFault", 1), ("fault", 2), ("disabled", 3),))).setMaxAccess("readonly")
iemStatusRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 6), Integer32()).setMaxAccess("readonly")
iemStatusRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7), )
iemStatusRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "iemStatusRelayNumber"))
iemStatusRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
iemStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
iemStatusRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("faultState", 1), ("normalState", 2),))).setMaxAccess("readonly")
emsIdentEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
emsIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
emsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
emsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
emsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
emsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
emsOutputRelayControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1), )
emsOutputRelayControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayControlOutputRelayIndex"))
emsOutputRelayControlOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsOutputRelayControlOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsOutputRelayControlOutputRelayCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("immediateCloseEMS", 1), ("immediateOpenEMS", 2),))).setMaxAccess("readwrite")
emsOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1), )
emsOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutletControlOutletIndex"))
emsOutletControlOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("immediateOnEMS", 1), ("immediateOffEMS", 2),))).setMaxAccess("readwrite")
emsSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1), )
emsSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSensorControlSensorIndex"))
emsSensorControlSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsSensorControlSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsSensorControlSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
emsSensorControlSensorCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noCommandEMS", 1), ("resetCommandEMS", 2),))).setMaxAccess("readwrite")
emsAlarmDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1), )
emsAlarmDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsAlarmDeviceControlDeviceIndex"))
emsAlarmDeviceControlDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsAlarmDeviceControlDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsAlarmDeviceControlDeviceCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("alarmDeviceOnEMS", 1), ("alarmDeviceOffEMS", 2), ("alarmDeviceNotInstalledEMS", 3),))).setMaxAccess("readwrite")
emsConfigName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 1), DisplayString()).setMaxAccess("readwrite")
emsConfigCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("lightDisabled", 1), ("lightOnInformational", 2), ("lightOnWarning", 3), ("lightOnSevere", 4),))).setMaxAccess("readwrite")
emsProbeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1), )
emsProbeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsProbeConfigProbeIndex"))
emsProbeConfigProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsProbeConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
emsProbeConfigProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeDeltaTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeDeltaHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeSTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeSTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeSTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeSTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeLTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeLTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeLTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
emsProbeConfigProbeLTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
emsInputContactConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1), )
emsInputContactConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsInputContactConfigInputContactIndex"))
emsInputContactConfigInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsInputContactConfigInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
emsInputContactConfigInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2),))).setMaxAccess("readwrite")
emsOutputRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1), )
emsOutputRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayConfigOutputRelayIndex"))
emsOutputRelayConfigOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsOutputRelayConfigOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
emsOutputRelayConfigOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2),))).setMaxAccess("readwrite")
emsOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1), )
emsOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutletConfigOutletIndex"))
emsOutletConfigOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
emsOutletConfigOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyOnEMS", 1), ("normallyOffEMS", 2),))).setMaxAccess("readwrite")
emsSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1), )
emsSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSensorConfigSensorIndex"))
emsSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsSensorConfigSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsSensorConfigSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
emsSensorConfigSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2),))).setMaxAccess("readwrite")
emsSensorConfigSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
emsStatusEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 1), DisplayString()).setMaxAccess("readonly")
emsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("noComm", 1), ("comm", 2), ("commLost", 3),))).setMaxAccess("readonly")
emsStatusProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 3), Integer32()).setMaxAccess("readonly")
emsStatusInputContactCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 4), Integer32()).setMaxAccess("readonly")
emsStatusOutputRelayCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 5), Integer32()).setMaxAccess("readonly")
emsStatusOutletCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 6), Integer32()).setMaxAccess("readonly")
emsStatusSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 7), Integer32()).setMaxAccess("readonly")
emsStatusAlinkAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 8), Integer32()).setMaxAccess("readonly")
emsStatusAlinkProbeDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 9), Integer32()).setMaxAccess("readonly")
emsStatusAlarmDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 10), Integer32()).setMaxAccess("readonly")
emsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
emsStatusCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("lightOff", 1), ("lightOn", 2),))).setMaxAccess("readonly")
emsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 13), Integer32()).setMaxAccess("readonly")
emsProbeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1), )
emsProbeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsProbeStatusProbeIndex"))
emsProbeStatusProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsProbeStatusProbeTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
emsProbeStatusProbeCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("commsNeverDiscovered", 1), ("commsEstablished", 2), ("commsLost", 3),))).setMaxAccess("readonly")
emsProbeStatusProbeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 12), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 13), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 14), Integer32()).setMaxAccess("readonly")
emsProbeStatusProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 15), Integer32()).setMaxAccess("readonly")
emsInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1), )
emsInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsInputContactStatusInputContactIndex"))
emsInputContactStatusInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsInputContactStatusInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsInputContactStatusInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("contactClosedEMS", 1), ("contactOpenEMS", 2),))).setMaxAccess("readonly")
emsInputContactStatusInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2),))).setMaxAccess("readonly")
emsOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1), )
emsOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"))
emsOutputRelayStatusOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsOutputRelayStatusOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsOutputRelayStatusOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("relayClosedEMS", 1), ("relayOpenEMS", 2),))).setMaxAccess("readonly")
emsOutputRelayStatusOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2),))).setMaxAccess("readonly")
emsOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1), )
emsOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutletStatusOutletIndex"))
emsOutletStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("outletOnEMS", 1), ("outletOffEMS", 2),))).setMaxAccess("readonly")
emsOutletStatusOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyOnEMS", 1), ("normallyOffEMS", 2),))).setMaxAccess("readonly")
emsAlarmDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1), )
emsAlarmDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsAlarmDeviceStatusDeviceIndex"))
emsAlarmDeviceStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsAlarmDeviceStatusDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsAlarmDeviceStatusDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("alarmDeviceOnEMS", 1), ("alarmDeviceOffEMS", 2), ("alarmDeviceNotInstalledEMS", 3),))).setMaxAccess("readonly")
emsSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1), )
emsSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSensorStatusSensorIndex"))
emsSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
emsSensorStatusSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
emsSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
emsSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("sensorFaultedEMS", 1), ("sensorOKEMS", 2), ("sensorNotInstalledEMS", 3),))).setMaxAccess("readonly")
emsSensorStatusSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2),))).setMaxAccess("readonly")
emsSensorStatusSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
airFMIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
airFMIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
airFMIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3), )
airFMIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMIdentModuleIndex"))
airFMIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
airFMIdentModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
airFMIdentModuleDateOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
airFMIdentModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
airFMIdentModuleFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
airFMIdentModuleHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
airFMIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
airFMIdentContact = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
airFMStatusSystemOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2),))).setMaxAccess("readonly")
airFMStatusSystemAverageRetTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 2), Integer32()).setMaxAccess("readonly")
airFMStatusSystemAverageRetTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 3), Integer32()).setMaxAccess("readonly")
airFMStatusSystemAverageRetHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 4), Integer32()).setMaxAccess("readonly")
airFMStatusSystemActionTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 5), Integer32()).setMaxAccess("readonly")
airFMStatusSystemActionTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 6), Integer32()).setMaxAccess("readonly")
airFMStatusSystemActionHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 7), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteHighTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 8), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteHighTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 9), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteAvgTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 10), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteAvgTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 11), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteAvgHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 12), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteLowTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 13), Integer32()).setMaxAccess("readonly")
airFMStatusSystemRemoteLowTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 14), Integer32()).setMaxAccess("readonly")
airFMStatusSystemCoolingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2),))).setMaxAccess("readonly")
airFMStatusSystemReheatingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2),))).setMaxAccess("readonly")
airFMStatusSystemHumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2),))).setMaxAccess("readonly")
airFMStatusSystemDehumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2),))).setMaxAccess("readonly")
airFMStatusModuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 19), Integer32()).setMaxAccess("readonly")
airFMStatusModuleTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20), )
airFMStatusModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMStatusModuleIndex"))
airFMStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 1), Integer32()).setMaxAccess("readonly")
airFMStatusModuleOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 2), Integer32()).setMaxAccess("readonly")
airFMStatusModuleSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readonly")
airFMStatusModuleSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
airFMStatusModuleSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 5), Integer32()).setMaxAccess("readonly")
airFMStatusModuleReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 6), Integer32()).setMaxAccess("readonly")
airFMStatusModuleReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 7), Integer32()).setMaxAccess("readonly")
airFMStatusModuleReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 8), Integer32()).setMaxAccess("readonly")
airFMGroupSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("statusOnLine", 1), ("statusIdle", 2), ("statusLoadShare", 3), ("statusOffLine", 4), ("statusFailed", 5), ("statusDisabled", 6), ("statusUndefined", 7),))).setMaxAccess("readonly")
airFMGroupSysRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 2), Integer32()).setMaxAccess("readonly")
airFMGroupSysRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("rolePrimary", 1), ("roleBackup", 2),))).setMaxAccess("readonly")
airFMGroupSysRolesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
airFMGroupSysRolesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2), )
airFMGroupSysRolesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMGroupSysIndex"))
airFMGroupSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMGroupSysRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("reserved1", 1), ("reserved2", 2), ("onLine", 3), ("idle", 4), ("loadShare", 5), ("failed", 6), ("offLine", 7),))).setMaxAccess("readonly")
airFMGroupSysPresentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("primary", 1), ("backup", 2),))).setMaxAccess("readonly")
airFMGroupSysManualRoleSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("primary", 1), ("backup", 2),))).setMaxAccess("readwrite")
airFMGroupSysRunHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMGroupSysComm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("commLost", 1), ("commEstablished", 2),))).setMaxAccess("readonly")
airFMGroupSysIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
airFMGroupSysRoleAssignment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("staticManual", 1), ("dynamicAutomatic", 2),))).setMaxAccess("readwrite")
airFMGroupAutoRoleNumPrimary = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4),))).setMaxAccess("readwrite")
airFMGroupCfgName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 1), DisplayString()).setMaxAccess("readwrite")
airFMGroupCfgNumSystems = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4),))).setMaxAccess("readwrite")
airFMGroupCfgIdleBlower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("off", 1), ("minimumSpeed", 2), ("normalSpeed", 3),))).setMaxAccess("readwrite")
airFMGroupCfgShutdownSmoke = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupCfgShutdownFire = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupCfgFailoverCommLoss = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupCfgDmdFightStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
airFMGroupCfgDmdFightSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupCfgSetpointShareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
airFMGroupCfgSetpointShareSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupCfgResetFieldServiceDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2),))).setMaxAccess("readwrite")
airFMGroupLoadShareCoolRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupLoadShareCoolThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
airFMGroupLoadShareCoolThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
airFMGroupLoadShareReheatRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupLoadShareReheatThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 5), Integer32()).setMaxAccess("readwrite")
airFMGroupLoadShareReheatThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
airFMGroupLoadShareHumRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupLoadShareHumThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 8), Integer32()).setMaxAccess("readwrite")
airFMGroupLoadShareDehumRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airFMGroupLoadShareDehumThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 10), Integer32()).setMaxAccess("readwrite")
airFMGroupFailoverSysAnyMinorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysAnyMajorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysHighEnvTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysLowEnvTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysHighEnvHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysLowEnvHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysFireAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysSmokeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysCommLost = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysSupplySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysReturnSensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysPrimarySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysSecondarySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverSysNoSensorsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModMaintRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModHumFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModBlwrCntrl1Fail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModBlwrCntrl2Fail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModHighFilterDP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModHighSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModLowSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModLossOrLowAirFlow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModHumReplaceCylinder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModAirBlockInterlockOpen = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModWaterDetected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMGroupFailoverModCondensatePumpFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3),))).setMaxAccess("readwrite")
airFMSysNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5),))).setMaxAccess("readonly")
airFMSysPresentStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("notApplicable", 1), ("reserved1", 2), ("reserved2", 3), ("onLine", 4), ("idle", 5), ("loadShare", 6), ("failed", 7), ("offLine", 8),))).setMaxAccess("readonly")
airFMSysPresentRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("primary", 2), ("backup", 3),))).setMaxAccess("readonly")
airFMSysRunHours = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
airFMSysCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
airFMSysCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
airFMSysHotWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
airFMSysHotWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
airFMSysAvgReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
airFMSysAvgReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
airFMSysAvgReturnHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
airFMSysAvgRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
airFMSysAvgRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
airFMSysAvgRemoteHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
airFMSysMaxRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
airFMSysMaxRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
airFMSysMinRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
airFMSysMinRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
airFMSysTempCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturn", 2), ("avgRemote", 3), ("maxRemote", 4),))).setMaxAccess("readonly")
airFMSysActualTempCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturn", 2), ("avgRemote", 3), ("maxRemote", 4),))).setMaxAccess("readonly")
airFMSysHumCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturnRH", 2), ("avgReturnDewPt", 3), ("avgRemoteRH", 4), ("avgRemoteDewPt", 5),))).setMaxAccess("readonly")
airFMSysActualHumCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturnRH", 2), ("avgReturnDewPt", 3), ("avgRemoteRH", 4), ("avgRemoteDewPt", 5),))).setMaxAccess("readonly")
airFMSysCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
airFMSysCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
airFMSysCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
airFMSysDXCoolingDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
airFMSysDXDehumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
airFMSysDXActualCoolDehum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
airFMSysCoilFluidCoolDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
airFMSysCoilFluidDehumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
airFMSysCoilFluidActualCoolDehum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
airFMSysElectricReheatDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
airFMSysActualElectricReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
airFMSysSteamHotGasReheatDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3),))).setMaxAccess("readonly")
airFMSysActualSteamHotGasReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3),))).setMaxAccess("readonly")
airFMSysSteamElectrodeHumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 11), Integer32()).setMaxAccess("readonly")
airFMSysActualSteamElectrodeHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 12), Integer32()).setMaxAccess("readonly")
airFMSysSteamHumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3),))).setMaxAccess("readonly")
airFMSysActualSteamHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3),))).setMaxAccess("readonly")
airFMSysNumModules = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4),))).setMaxAccess("readonly")
airFMSysNumPCIOMs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5),))).setMaxAccess("readonly")
airFMSysMainsVlt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
airFMSysUPSVlt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 4), DisplayString()).setMaxAccess("readonly")
airFMSysCoilCfg = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notApplicable", 1), ("dx", 2), ("econ", 3), ("multicool", 4), ("chilledWater", 5),))).setMaxAccess("readonly")
airFMSysRefrigType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("r22", 2), ("r407C", 3),))).setMaxAccess("readonly")
airFMSysHeatRejection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("airCooled", 2), ("waterCooled", 3), ("glycolCooled", 4),))).setMaxAccess("readonly")
airFMSysDischAirPtrn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("upFlow", 2), ("downFlow", 3), ("horizFlow", 4),))).setMaxAccess("readonly")
airFMSysAirFltr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("standard", 2), ("highEfficiency", 3),))).setMaxAccess("readonly")
airFMSysFlowSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("dxEcon", 3), ("multiCoolChillWater", 4),))).setMaxAccess("readonly")
airFMSysCoilFluidVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("springAnalog", 3), ("floatingControl", 4),))).setMaxAccess("readonly")
airFMSysCoilFluidVlvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("twoWay", 2), ("threeWay", 3),))).setMaxAccess("readonly")
airFMSysCndsrFluidVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("floatingControl", 3),))).setMaxAccess("readonly")
airFMSysCndsrFluidVlvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("twoWay", 2), ("threeWay", 3),))).setMaxAccess("readonly")
airFMSysHotWaterVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("springAnalog", 3), ("floatingControl", 4),))).setMaxAccess("readonly")
airFMSysNumRemoteSensors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 16), Integer32()).setMaxAccess("readonly")
airFMSysPrimaryControlSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("return", 2), ("remote", 3),))).setMaxAccess("readwrite")
airFMSysRemoteSensorData = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("average", 2), ("maximum", 3),))).setMaxAccess("readwrite")
airFMSysFastStartup = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
airFMSysModeDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
airFMSysCommLossShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
airFMSysResetSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMSysResetUserDflts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMSysResetFldSrvcDflts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMSysResetRunHours = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMSysCompMinOnTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
airFMSysCompMinOffTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
airFMSysCompRotPeriod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
airFMSysEconIsolVlvOpenDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 4), Integer32()).setMaxAccess("readwrite")
airFMSysEconIsolVlvCloseDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 5), Integer32()).setMaxAccess("readwrite")
airFMSysCndsrFluidVlvCloseDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 6), Integer32()).setMaxAccess("readwrite")
airFMSysInterstageDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
airFMSysCoolState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysCoolEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3),))).setMaxAccess("readwrite")
airFMSysCoolSetpointC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 10), Integer32()).setMaxAccess("readwrite")
airFMSysCoolSetpointF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 11), Integer32()).setMaxAccess("readwrite")
airFMSysCoolDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 12), Integer32()).setMaxAccess("readwrite")
airFMSysCoolDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 13), Integer32()).setMaxAccess("readwrite")
airFMSysCoolEconIsolFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysSuctPresCompensation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysCoilFluidActivThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 16), Integer32()).setMaxAccess("readwrite")
airFMSysCoilFluidActivThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 17), Integer32()).setMaxAccess("readwrite")
airFMSysCoilFluidActivDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 18), Integer32()).setMaxAccess("readwrite")
airFMSysCoilFluidActivDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 19), Integer32()).setMaxAccess("readwrite")
airFMSysCoolPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4),))).setMaxAccess("readwrite")
airFMSysCoolPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 21), Integer32()).setMaxAccess("readwrite")
airFMSysCoolPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 22), Integer32()).setMaxAccess("readwrite")
airFMSysCoolPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 23), Integer32()).setMaxAccess("readwrite")
airFMSysHumState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysHumEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3),))).setMaxAccess("readwrite")
airFMSysHumSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 3), Integer32()).setMaxAccess("readwrite")
airFMSysHumDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 4), Integer32()).setMaxAccess("readwrite")
airFMSysHumCtrlSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("relativeHum", 2), ("dewPoint", 3),))).setMaxAccess("readwrite")
airFMSysActualHumCtrl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("relativeHum", 2), ("dewPoint", 3),))).setMaxAccess("readonly")
airFMSysHumSensBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 7), Integer32()).setMaxAccess("readwrite")
airFMSysDehumState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysDehumEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3),))).setMaxAccess("readwrite")
airFMSysDehumSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 3), Integer32()).setMaxAccess("readwrite")
airFMSysDehumDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 4), Integer32()).setMaxAccess("readwrite")
airFMSysDehumCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("half", 2), ("full", 3),))).setMaxAccess("readwrite")
airFMSysDehumPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4),))).setMaxAccess("readwrite")
airFMSysDehumPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 7), Integer32()).setMaxAccess("readwrite")
airFMSysDehumPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 8), Integer32()).setMaxAccess("readwrite")
airFMSysDehumPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 9), Integer32()).setMaxAccess("readwrite")
airFMSysReheatState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysReheatEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3),))).setMaxAccess("readwrite")
airFMSysReheatSetpointC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 3), Integer32()).setMaxAccess("readwrite")
airFMSysReheatSetpointF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 4), Integer32()).setMaxAccess("readwrite")
airFMSysReheatDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 5), Integer32()).setMaxAccess("readwrite")
airFMSysReheatDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 6), Integer32()).setMaxAccess("readwrite")
airFMSysReheatPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4),))).setMaxAccess("readwrite")
airFMSysReheatPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 8), Integer32()).setMaxAccess("readwrite")
airFMSysReheatPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 9), Integer32()).setMaxAccess("readwrite")
airFMSysReheatPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 10), Integer32()).setMaxAccess("readwrite")
airFMSysHighSplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 1), Integer32()).setMaxAccess("readwrite")
airFMSysHighSplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 2), Integer32()).setMaxAccess("readwrite")
airFMSysLowSplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 3), Integer32()).setMaxAccess("readwrite")
airFMSysLowSplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 4), Integer32()).setMaxAccess("readwrite")
airFMSysHighCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 5), Integer32()).setMaxAccess("readwrite")
airFMSysHighCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 6), Integer32()).setMaxAccess("readwrite")
airFMSysLowCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 7), Integer32()).setMaxAccess("readwrite")
airFMSysLowCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 8), Integer32()).setMaxAccess("readwrite")
airFMSysHighCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 9), Integer32()).setMaxAccess("readwrite")
airFMSysHighCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 10), Integer32()).setMaxAccess("readwrite")
airFMSysLowCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 11), Integer32()).setMaxAccess("readwrite")
airFMSysLowCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 12), Integer32()).setMaxAccess("readwrite")
airFMSysHighCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 13), Integer32()).setMaxAccess("readwrite")
airFMSysLowCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 14), Integer32()).setMaxAccess("readwrite")
airFMSysTempAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 15), Integer32()).setMaxAccess("readwrite")
airFMSysHumAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 16), Integer32()).setMaxAccess("readwrite")
airFMSysInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
airFMSysInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2), )
airFMSysInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysInputIndex"))
airFMSysInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
airFMSysInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airFMSysInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airFMSysInputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
airFMSysInputAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("statusOnly", 1), ("minor", 2), ("major", 3), ("remoteRunStop", 4), ("nonessStop", 5), ("immShutdown", 6),))).setMaxAccess("readwrite")
airFMSysOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
airFMSysOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2), )
airFMSysOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysOutputIndex"))
airFMSysOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airFMSysOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapSysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2), )
airFMSysAlarmMapSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapSysOutputIndex"))
airFMSysAlarmMapSysOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapSysAnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSystemOn = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSystemOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysHighEnvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysLowEnvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysHighEnvHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysLowEnvHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysFireDet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysSmokeDet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysEconIsol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysSupplySensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysReturnSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysRemSensRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysPrimSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysSecSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapSysSecSensActive = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapMainModTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2), )
airFMSysAlarmMapMainModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapMainModOutputIndex"))
airFMSysAlarmMapMainModOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapMainModAnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModMaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModCoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModHighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModLowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModHumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModHumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModCondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModBlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModBlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModHighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModLowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModAirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapMainModWaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapExpMod1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2), )
airFMSysAlarmMapExpMod1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapExpMod1OutputIndex"))
airFMSysAlarmMapExpMod1OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapExpMod1AnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1MaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1CoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1HighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1LowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1HumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1HumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1CondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1BlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1BlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1HighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1LowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1AirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod1WaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapExpMod2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2), )
airFMSysAlarmMapExpMod2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapExpMod2OutputIndex"))
airFMSysAlarmMapExpMod2OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapExpMod2AnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2MaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2CoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2HighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2LowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2HumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2HumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2CondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2BlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2BlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2HighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2LowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2AirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapExpMod2WaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2), )
airFMSysAlarmMapInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapInputOutputIndex"))
airFMSysAlarmMapInputOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapInput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput13 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput14 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput15 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapInput16 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2), )
airFMSysAlarmMapOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapOutputIndex"))
airFMSysAlarmMapOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMSysAlarmMapOutput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput13 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput14 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput15 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMSysAlarmMapOutput16 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readwrite")
airFMModIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2), )
airFMModIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModIdentModuleIndex"))
airFMModIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
airFMModSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
airFMModManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
airFMModFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
airFMModHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
airFMModStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
airFMModStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2), )
airFMModStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModStatusModuleIndex"))
airFMModStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airFMModSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airFMModSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airFMModReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMModReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airFMModReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airFMModFilterDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airFMModFilterDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airFMModCoilDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airFMModCoilDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airFMModPropTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
airFMModPropTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2), )
airFMModPropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModPropModuleIndex"))
airFMModPropModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("notApplicable", 1), ("kw45", 2), ("kw35", 3), ("kw40", 4), ("kw50", 5), ("kw80", 6),))).setMaxAccess("readonly")
airFMModCapacityCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("tandem", 2), ("hotGasBypass", 3),))).setMaxAccess("readonly")
airFMModHeaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("electricSCR", 3), ("steam", 4), ("hotWaterOnOff", 5), ("hotGasReheat", 6), ("hotGasAndElectric", 7), ("hotWaterProp", 8),))).setMaxAccess("readonly")
airFMModElectricHeaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("kw10", 2), ("kw15", 3),))).setMaxAccess("readonly")
airFMModHumidifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("steamElectrode", 3), ("liveSteam", 4),))).setMaxAccess("readonly")
airFMModBlwrFreqSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airFMModNomCoilDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airFMModNomCoilDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airFMModCondPump = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3),))).setMaxAccess("readonly")
airFMModFireDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3),))).setMaxAccess("readonly")
airFMModSmokeDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3),))).setMaxAccess("readonly")
airFMModWaterDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3),))).setMaxAccess("readonly")
airFMModCoolTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
airFMModCoolTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2), )
airFMModCoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModCoolModuleIndex"))
airFMModCoolModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModComp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3),))).setMaxAccess("readonly")
airFMModComp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3),))).setMaxAccess("readonly")
airFMModSuctPresKPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airFMModSuctPresPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMModDischPresKPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airFMModDischPresPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airFMModCondFluidVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airFMModCoilFluidVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airFMModHumTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 1), Integer32()).setMaxAccess("readonly")
airFMModHumTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2), )
airFMModHumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModHumModuleIndex"))
airFMModHumModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModHumidifier = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("steamElectrode", 3), ("liveSteam", 4),))).setMaxAccess("readonly")
airFMModElectrodeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airFMModHumActualOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airFMModWaterConductivity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMModHotWaterVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airFMModStmElectHumMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("auto", 3), ("drain", 4),))).setMaxAccess("readwrite")
airFMModBlwr1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
airFMModBlwr1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2), )
airFMModBlwr1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModBlwr1ModuleIndex"))
airFMModBlwr1ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModBlwr1CtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("fujiVFD", 2), ("ecController", 3), ("danfossVFD", 4),))).setMaxAccess("readonly")
airFMModBlwr1CmdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airFMModBlwr1ActFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airFMModBlwr1Poles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMModBlwr1RatedHorsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airFMModBlwr1RatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airFMModBlwr1ActTorq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airFMModBlwr1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airFMModBlwr1Vlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airFMModBlwr1DCLinkVlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airFMModBlwr1AccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airFMModBlwr1DecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
airFMModBlwr1CapLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
airFMModBlwr1CtrlCoolFanLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
airFMModBlwr1ElOvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("inactive", 2), ("active", 3),))).setMaxAccess("readonly")
airFMModBlwr1ElOvSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 17), Integer32()).setMaxAccess("readonly")
airFMModBlwr1ElOvTimeConst = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 18), Integer32()).setMaxAccess("readonly")
airFMModBlwr1FanPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
airFMModBlwr1HeatsinkTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
airFMModBlwr1HeatsinkTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
airFMModBlwr1ChokeTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
airFMModBlwr1ChokeTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 23), Integer32()).setMaxAccess("readonly")
airFMModBlwr1InverterTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 24), Integer32()).setMaxAccess("readonly")
airFMModBlwr1InverterTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
airFMModBlwr2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 1), Integer32()).setMaxAccess("readonly")
airFMModBlwr2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2), )
airFMModBlwr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModBlwr2ModuleIndex"))
airFMModBlwr2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModBlwr2CtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 1), ("fujiVFD", 2), ("ecController", 3), ("danfossVFD", 4),))).setMaxAccess("readonly")
airFMModBlwr2CmdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airFMModBlwr2ActFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airFMModBlwr2Poles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMModBlwr2RatedHorsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airFMModBlwr2RatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airFMModBlwr2ActTorq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airFMModBlwr2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airFMModBlwr2Vlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airFMModBlwr2DCLinkVlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airFMModBlwr2AccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airFMModBlwr2DecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
airFMModBlwr2CapLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
airFMModBlwr2CtrlCoolFanLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
airFMModBlwr2ElOvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("inactive", 2), ("active", 3),))).setMaxAccess("readonly")
airFMModBlwr2ElOvSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
airFMModBlwr2ElOvTimeConst = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
airFMModBlwr2FanPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
airFMModBlwr2HeatsinkTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
airFMModBlwr2HeatsinkTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 21), Integer32()).setMaxAccess("readonly")
airFMModBlwr2ChokeTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 22), Integer32()).setMaxAccess("readonly")
airFMModBlwr2ChokeTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 23), Integer32()).setMaxAccess("readonly")
airFMModBlwr2InverterTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 24), Integer32()).setMaxAccess("readonly")
airFMModBlwr2InverterTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
airFMModRHTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
airFMModRHTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2), )
airFMModRHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModRHModuleIndex"))
airFMModRHModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModRHComp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airFMModRHComp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airFMModRHHeater = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airFMModRHHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airFMModRHBlwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airFMModRHBlwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airFMModRHBlwrCtrl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airFMModRHBlwrCtrl2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airFMModRHComp1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModRHComp2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModRHHeaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModRHHumReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModRHBlwr1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModRHBlwr2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntComp1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 1), Integer32()).setMaxAccess("readwrite")
airFMModServIntComp2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 2), Integer32()).setMaxAccess("readwrite")
airFMModServIntHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 3), Integer32()).setMaxAccess("readwrite")
airFMModServIntHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 4), Integer32()).setMaxAccess("readwrite")
airFMModServIntBlwr1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 5), Integer32()).setMaxAccess("readwrite")
airFMModServIntBlwr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 6), Integer32()).setMaxAccess("readwrite")
airFMModServIntBlwrCtrl1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 7), Integer32()).setMaxAccess("readwrite")
airFMModServIntBlwrCtrl2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
airFMModServIntResetTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
airFMModServIntResetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2), )
airFMModServIntResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModServIntResetModuleIndex"))
airFMModServIntResetModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airFMModServIntComp1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntComp2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntHeaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntHumReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntBlwr1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntBlwr2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntBlwrCtrl1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMModServIntBlwrCtrl2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3),))).setMaxAccess("readwrite")
airFMAlarmClearActiveGroupAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("clearAlarms", 2),))).setMaxAccess("readwrite")
airFMAlarmClearActiveSysModAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noOperation", 1), ("clearAlarms", 2),))).setMaxAccess("readwrite")
airFMAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 3), Integer32()).setMaxAccess("readonly")
airFMAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4), )
airFMAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMAlarmConditionsIndex"))
airFMAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
airFMAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("informational", 1), ("warningMinor", 2), ("criticalMajor", 3),))).setMaxAccess("readonly")
airFMAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("group", 1), ("system", 2), ("mainMod", 3), ("expMod1", 4), ("expMod2", 5),))).setMaxAccess("readonly")
airFMEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
airFMAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
airFMAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
airFMAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
airPAIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
airPAModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
airPADateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
airPASerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
airPAFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
airPAHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
airPASystemPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("powerON", 1), ("powerOFF", 2),))).setMaxAccess("readonly")
airPAOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("modeOFF", 1), ("modeVENTING", 2), ("modeCOOLING", 3),))).setMaxAccess("readonly")
airPASetpointTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 3), Integer32()).setMaxAccess("readonly")
airPASetpointTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 4), Integer32()).setMaxAccess("readonly")
airPABlowerSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("speedLOW", 1), ("speedHIGH", 2),))).setMaxAccess("readonly")
airPACompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2),))).setMaxAccess("readonly")
airPACondenserFan = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2),))).setMaxAccess("readonly")
airPACondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2),))).setMaxAccess("readonly")
airPASupplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 9), Integer32()).setMaxAccess("readonly")
airPASupplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 10), Integer32()).setMaxAccess("readonly")
airPAReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 11), Integer32()).setMaxAccess("readonly")
airPAReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 12), Integer32()).setMaxAccess("readonly")
airPARemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 13), Integer32()).setMaxAccess("readonly")
airPARemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 14), Integer32()).setMaxAccess("readonly")
airPARemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 15), Integer32()).setMaxAccess("readonly")
airIRAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
airIRAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2), )
airIRAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRAlarmConditionsIndex"))
airIRAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIREventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
airIRRCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
airIRRCGroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4),))).setMaxAccess("readonly")
airIRRCGroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
airIRRCGroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
airIRRCGroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
airIRRCGroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
airIRRCGroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5),))).setMaxAccess("readwrite")
airIRRCGroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readwrite")
airIRRCGroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5),))).setMaxAccess("readwrite")
airIRRCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4),))).setMaxAccess("readwrite")
airIRRCGroupConfigPctGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readwrite")
airIRRCGroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
airIRRCGroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
airIRRCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3),))).setMaxAccess("readonly")
airIRRCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRRCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRRCUnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2),))).setMaxAccess("readonly")
airIRRCUnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 21), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 22), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
airIRRCUnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
airIRRCUnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
airIRRCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRRCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
airIRRCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRRCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRRCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRRCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRRCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
airIRRCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFan8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 11), Integer32()).setMaxAccess("readonly")
airIRRCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 12), Integer32()).setMaxAccess("readonly")
airIRRCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
airIRRCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
airIRRCUnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
airIRRCUnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("maximum", 2),))).setMaxAccess("readwrite")
airIRRCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
airIRRCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
airIRRCUnitConfigPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("sourceAandB", 3),))).setMaxAccess("readwrite")
airIRRCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRRCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRRCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2),))).setMaxAccess("readwrite")
airIRRCUnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
airIRRP100GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4),))).setMaxAccess("readonly")
airIRRP100GroupStatusDewPointTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
airIRRP100GroupStatusDewPointTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
airIRRP100GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5),))).setMaxAccess("readwrite")
airIRRP100GroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readwrite")
airIRRP100GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5),))).setMaxAccess("readwrite")
airIRRP100GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4),))).setMaxAccess("readwrite")
airIRRP100GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRRP100GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRRP100GroupConfigFullRPBackups = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 13), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 14), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 15), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readwrite")
airIRRP100GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 17), Integer32()).setMaxAccess("readwrite")
airIRRP100GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("prestart", 4), ("service", 5), ("backup", 6), ("assist", 7),))).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 12), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 13), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 14), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRRP100UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 25), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 27), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 28), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 29), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 30), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 31), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 32), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDrivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveDCLinkVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveHeatSinkTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveControlCardTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveControlCardTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 43), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 44), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusCompressorDriveAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 45), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 46), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 47), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 48), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 49), Integer32()).setMaxAccess("readonly")
airIRRP100UnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 50), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2),))).setMaxAccess("readonly")
airIRRP100UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRRP100UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
airIRRP100UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRRP100UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRRP100UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRRP100UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRRP100UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
airIRRP100UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 8), Integer32()).setMaxAccess("readonly")
airIRRP100UnitRunHoursSystem = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 9), Integer32()).setMaxAccess("readonly")
airIRRP100UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalCompressorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 11), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
airIRRP100UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("maximum", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("auto", 1), ("drainOff", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigPowerSourceConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("single", 1), ("dual", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigSecondaryPowerFeedCapability = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("full", 1), ("reduced", 2),))).setMaxAccess("readwrite")
airIRRP100UnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4),))).setMaxAccess("readonly")
airIRRP500GroupStatusDewPointTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
airIRRP500GroupStatusDewPointTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
airIRRP500GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5),))).setMaxAccess("readwrite")
airIRRP500GroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readwrite")
airIRRP500GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5),))).setMaxAccess("readwrite")
airIRRP500GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4),))).setMaxAccess("readwrite")
airIRRP500GroupConfigPercentGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 12), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRRP500GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRRP500GroupConfigFullRPBackups = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 15), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 16), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readwrite")
airIRRP500GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
airIRRP500GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 19), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("prestart", 4), ("backup", 5), ("assist", 6),))).setMaxAccess("readonly")
airIRRP500UnitStatusMaximumRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusMaximumRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 17), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 18), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 19), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRRP500UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRRP500UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 27), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 28), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 29), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 30), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 31), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 32), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 33), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 34), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2),))).setMaxAccess("readonly")
airIRRP500UnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 36), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 37), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 38), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 39), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 40), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 41), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 42), Integer32()).setMaxAccess("readonly")
airIRRP500UnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2),))).setMaxAccess("readonly")
airIRRP500UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRRP500UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
airIRRP500UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRRP500UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRRP500UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRRP500UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRRP500UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
airIRRP500UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursHeater3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
airIRRP500UnitRunHoursSystem = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
airIRRP500UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
airIRRP500UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("maximum", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("auto", 1), ("drainOff", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigPowerSourceConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("single", 1), ("dual", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigSecondaryPowerFeedCapability = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("full", 1), ("reduced", 2),))).setMaxAccess("readwrite")
airIRRP500UnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
class AirIRSCConfigType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3,)
    namedValues = NamedValues(("racs", 1), ("spot", 2), ("in-row", 3),)

class AirIRSCCapacityControlType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("discrete", 1), ("proportional", 2),)

class AirIRSCFanSpeedPreference(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5,)
    namedValues = NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5),)

class AirIRSCFanSpeedControl(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("automatic", 1), ("manual", 2),)

airIRSCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3),))).setMaxAccess("readonly")
airIRSCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 3), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 4), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 5), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 6), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 7), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 8), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 9), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 10), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 11), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 12), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 13), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 14), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 15), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 16), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 17), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 18), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 19), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 20), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 21), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 22), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 23), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 24), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusCondenserFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 25), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRSCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRSCUnitStatusCondOutletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 28), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusCondOutletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 29), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusCondInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 30), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusCondInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 31), Integer32()).setMaxAccess("readonly")
airIRSCUnitStatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
airIRSCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
airIRSCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRSCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
airIRSCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRSCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRSCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRSCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRSCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursEvaporatorFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursEvaporatorFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursEvaporatorFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursCondenserFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursCondenserFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursCondenserFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 7), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 10), Integer32()).setMaxAccess("readonly")
airIRSCUnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 11), Integer32()).setMaxAccess("readonly")
airIRSCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
airIRSCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRSCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
airIRSCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
airIRSCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
airIRSCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
airIRSCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
airIRSCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
airIRSCUnitSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
airIRSCUnitSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
airIRSCUnitSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
airIRSCUnitSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
airIRSCUnitSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 5), AirIRSCFanSpeedPreference()).setMaxAccess("readwrite")
airIRSCUnitSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 6), Integer32()).setMaxAccess("readwrite")
airIRSCUnitSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 7), Integer32()).setMaxAccess("readwrite")
airIRSCUnitConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 1), AirIRSCConfigType()).setMaxAccess("readwrite")
airIRSCUnitConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 2), AirIRSCCapacityControlType()).setMaxAccess("readwrite")
airIRSCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
airIRSCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
airIRSCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRSCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRSCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2),))).setMaxAccess("readwrite")
airIRSCUnitConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
airIRSCUnitConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 9), Integer32()).setMaxAccess("readwrite")
airIRSCUnitConfigOpControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("standby", 1), ("on", 2),))).setMaxAccess("readwrite")
airIRSCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMaxReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMaxReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMinReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airIRSCGroupStatusMinReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airIRSCGroupSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
airIRSCGroupSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
airIRSCGroupSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
airIRSCGroupSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
airIRSCGroupSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 5), AirIRSCFanSpeedPreference()).setMaxAccess("readwrite")
airIRSCGroupSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
airIRSCGroupSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
airIRSCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
airIRSCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 2), AirIRSCConfigType()).setMaxAccess("readwrite")
airIRSCGroupConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 3), AirIRSCCapacityControlType()).setMaxAccess("readwrite")
airIRSCGroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
airIRSCGroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
airIRSCGroupConfigFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 6), AirIRSCFanSpeedControl()).setMaxAccess("readwrite")
airIRG2IdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
airIRG2IdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRG2IdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
airIRG2IdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRG2IdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRG2IdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRG2IdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRG2IdentUnitSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
airIRG2IdentGroupSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
airIRG2GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMaxReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMaxReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMinReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airIRG2GroupStatusMinReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airIRG2GroupSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
airIRG2GroupSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
airIRG2GroupSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
airIRG2GroupSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
airIRG2GroupSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5),))).setMaxAccess("readwrite")
airIRG2GroupSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
airIRG2GroupSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
airIRG2GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
airIRG2GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), ("hacs", 4),))).setMaxAccess("readwrite")
airIRG2GroupConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("discrete", 1), ("proportional", 2),))).setMaxAccess("readwrite")
airIRG2GroupConfigFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readwrite")
airIRG2GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
airIRG2GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
airIRG2GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
airIRG2GroupConfigCoolPIDReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("readBack", 1), ("reset", 2),))).setMaxAccess("readwrite")
airIRG2GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
airIRG2GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRG2GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRG2AlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 1), Integer32()).setMaxAccess("readonly")
airIRG2AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2), )
airIRG2AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG2AlarmsIndex"))
airIRG2AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG2AlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG2AlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
class AirIRG2RDType2IOState(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("open", 1), ("closed", 2),)

airIRG2RDT2StatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("reserved", 4), ("service", 5),))).setMaxAccess("readonly")
airIRG2RDT2StatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 23), AirIRG2RDType2IOState()).setMaxAccess("readonly")
airIRG2RDT2StatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 24), AirIRG2RDType2IOState()).setMaxAccess("readonly")
airIRG2RDT2StatusOHEInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 25), AirIRG2RDType2IOState()).setMaxAccess("readonly")
airIRG2RDT2StatusOHEOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 26), AirIRG2RDType2IOState()).setMaxAccess("readonly")
airIRG2RDT2StatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
airIRG2RDT2StatusFluidValvePos = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
airIRG2RDT2StatusHotGasBypassValvePos = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 3), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursFanPSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 4), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursFanPSTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5), )
airIRG2RDT2RunHoursFanPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG2RDT2RunHoursFanPSIndex"))
airIRG2RDT2RunHoursFanPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursFanPSHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursFanPSPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("upper", 1), ("lower", 2), ("left", 3), ("right", 4),))).setMaxAccess("readonly")
airIRG2RDT2RunHoursEvapFanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 6), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursEvapFanTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7), )
airIRG2RDT2RunHoursEvapFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG2RDT2RunHoursEvapFanIndex"))
airIRG2RDT2RunHoursEvapFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursEvapFanHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG2RDT2RunHoursUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 8), Integer32()).setMaxAccess("readonly")
airIRG2RDT2ServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRG2RDT2ThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ConfigUnitType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fluidCooled", 1), ("airCooled", 2),))).setMaxAccess("readonly")
airIRG2RDT2ConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
airIRG2RDT2ConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
airIRG2RDT2ConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 4), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
airIRG2RDT2ConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 5), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
airIRG2RDT2ConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2),))).setMaxAccess("readwrite")
airIRG2RDT2ConfigOHEInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 7), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
airIRG2RDT2ConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2),))).setMaxAccess("readwrite")
airIRG2RDT2ConfigUnitIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
class AirIRmAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("ok", 1), ("alarm", 2),)

class AirIRmControlState(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("off", 1), ("on", 2),)

class AirIRmStopState(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("maybeOn", 1), ("unitOff", 2),)

class AirIRmActivityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("inactive", 1), ("active", 2),)

airIRmIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
airIRmIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRmIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
airIRmIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRmIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRmIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRmIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRmIdentSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
airIRmAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 1), Integer32()).setMaxAccess("readonly")
airIRmAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2), )
airIRmAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRmAlarmsIndex"))
airIRmAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRmAlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRmAlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
airIRmPmUnitType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 256,)).clone(namedValues=NamedValues(("mc", 1), ("dx", 2), ("cw", 3), ("ch", 4), ("ecoCool", 5), ("msc", 6), ("ge1", 7), ("ge2", 8), ("dualFluid", 9), ("cw2", 10), ("unknown", 256),))).setMaxAccess("readonly")
airIRmPmSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
airIRmPmBusAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
airIRmPmControllerType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("unknown", 1), ("c4000", 2), ("c1001", 3), ("c1002", 4), ("c5000", 5), ("c6000", 6), ("c1010", 7), ("c7000IOC", 8), ("c7000AT", 9), ("c7000PT", 10), ("c5MSC", 11), ("c7000PT2", 12),))).setMaxAccess("readonly")
airIRmPmGeneralError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 8), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmErrorOnBus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 9), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmPCStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 1), AirIRmStopState()).setMaxAccess("readonly")
airIRmPmRemoteStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 2), AirIRmStopState()).setMaxAccess("readonly")
airIRmPmLocalStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 3), AirIRmStopState()).setMaxAccess("readonly")
airIRmPmTimerStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 4), AirIRmStopState()).setMaxAccess("readonly")
airIRmPmSeqStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 5), AirIRmStopState()).setMaxAccess("readonly")
airIRmPmRemoteUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("off", 1), ("on", 2),))).setMaxAccess("readonly")
airIRmPmLocalUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 8), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmCommonAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 11), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmResetAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("doNothing", 1), ("reset", 2),))).setMaxAccess("readwrite")
airIRmPmUnitOnOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 14), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notNecessary", 1), ("necessary", 2),))).setMaxAccess("readonly")
airIRmPmUnitTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
airIRmPmUnitWinterMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("summer", 1), ("winter", 2),))).setMaxAccess("readonly")
airIRmPmDayNightMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("day", 1), ("night", 2),))).setMaxAccess("readonly")
airIRmPmLastMaintenanceYear = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 1), Integer32()).setMaxAccess("readonly")
airIRmPmLastMaintenanceMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,12))).setMaxAccess("readonly")
airIRmPmLastMaintenanceDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,31))).setMaxAccess("readonly")
airIRmPmUnitMaintenanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readonly")
airIRmPmRuntimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 5), Integer32()).setMaxAccess("readonly")
airIRmPmStoptimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 6), Integer32()).setMaxAccess("readonly")
airIRmPmRuntimeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 7), Integer32()).setMaxAccess("readonly")
airIRmPmRuntimeHeating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 8), Integer32()).setMaxAccess("readonly")
airIRmPmRuntimeHumidification = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 9), Integer32()).setMaxAccess("readonly")
airIRmPmRuntimeDehumidification = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 10), Integer32()).setMaxAccess("readonly")
airIRmPmUnitTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11))
airIRmPmUnitTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 1), Integer32()).setMaxAccess("readonly")
airIRmPmUnitTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 2), Integer32()).setMaxAccess("readonly")
airIRmPmUnitHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 12), Integer32()).setMaxAccess("readonly")
airIRmPmSetpointTemperatureDay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14))
airIRmPmSetpointTemperatureDayC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmSetpointTemperatureDayF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmSetpointTemperatureNight = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15))
airIRmPmSetpointTemperatureNightC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmSetpointTemperatureNightF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmSetpointHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 17), Integer32()).setMaxAccess("readwrite")
airIRmPmUnitControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("room", 1), ("supply", 2), ("room-SupplyLimit", 3), ("supply-RoomLimit", 4),))).setMaxAccess("readonly")
airIRmPmWinterModeStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29))
airIRmPmWinterModeStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 1), Integer32()).setMaxAccess("readonly")
airIRmPmWinterModeStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 2), Integer32()).setMaxAccess("readonly")
airIRmPmWinterModeHysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30))
airIRmPmWinterModeHysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 1), Integer32()).setMaxAccess("readonly")
airIRmPmWinterModeHysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 2), Integer32()).setMaxAccess("readonly")
airIRmPmWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32))
airIRmPmWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 1), Integer32()).setMaxAccess("readonly")
airIRmPmWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 2), Integer32()).setMaxAccess("readonly")
airIRmPmReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33))
airIRmPmReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 1), Integer32()).setMaxAccess("readonly")
airIRmPmReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 2), Integer32()).setMaxAccess("readonly")
airIRmPmSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34))
airIRmPmSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 1), Integer32()).setMaxAccess("readonly")
airIRmPmSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 2), Integer32()).setMaxAccess("readonly")
airIRmPmReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 35), Integer32()).setMaxAccess("readonly")
airIRmPmSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 36), Integer32()).setMaxAccess("readonly")
airIRmPmOutsideAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37))
airIRmPmOutsideAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 1), Integer32()).setMaxAccess("readonly")
airIRmPmOutsideAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 2), Integer32()).setMaxAccess("readonly")
airIRmPmOutsideAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 38), Integer32()).setMaxAccess("readonly")
airIRmPmCoolingPriority = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("ge", 1), ("cw", 2), ("dx", 3),))).setMaxAccess("readwrite")
airIRmPmWaterTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43))
airIRmPmWaterTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 1), Integer32()).setMaxAccess("readonly")
airIRmPmWaterTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 2), Integer32()).setMaxAccess("readonly")
airIRmPmRuntimeFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 44), Integer32()).setMaxAccess("readonly")
airIRmPmRuntimeMixedModeFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 45), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfCompressors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 4), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfSuctionValves = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 5), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfDryCoolers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 6), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfPumps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 7), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfElectricHeaters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 8), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfHumidifiers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 9), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 10), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfLouvers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 11), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 12), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfExternalAlarmInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 13), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfGECWValves = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 14), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfHotGasReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 15), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfPWWReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 16), Integer32()).setMaxAccess("readonly")
airIRmPmNumberOfDehumidifiers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 17), Integer32()).setMaxAccess("readonly")
airIRmPmUnitEvaporationTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1))
airIRmPmUnitEvaporationTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
airIRmPmUnitEvaporationTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
airIRmPmUnitEvaporationPressure1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 2), Integer32()).setMaxAccess("readonly")
airIRmPmUnitCondensationTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3))
airIRmPmUnitCondensationTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 1), Integer32()).setMaxAccess("readonly")
airIRmPmUnitCondensationTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 2), Integer32()).setMaxAccess("readonly")
airIRmPmUnitCondensationPressure1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 4), Integer32()).setMaxAccess("readonly")
airIRmPmMaxLimitReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8))
airIRmPmMaxLimitReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9))
airIRmPmMinLimitReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10))
airIRmPmMaxLimitSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11))
airIRmPmMinLimitSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12))
airIRmPmMaxLimitWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13))
airIRmPmMinLimitWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 14), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 15), Integer32()).setMaxAccess("readwrite")
airIRmPmMaxLimitSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 16), Integer32()).setMaxAccess("readwrite")
airIRmPmMinLimitSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 17), Integer32()).setMaxAccess("readwrite")
airIRmPmLowPressureWinterDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 18), Integer32()).setMaxAccess("readonly")
airIRmPmUnitCondensationPressure2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 19), Integer32()).setMaxAccess("readonly")
airIRmPmUnitOverloadSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 20), Integer32()).setMaxAccess("readonly")
airIRmPmUnitCondensationTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41))
airIRmPmUnitCondensationTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 1), Integer32()).setMaxAccess("readonly")
airIRmPmUnitCondensationTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 2), Integer32()).setMaxAccess("readonly")
airIRmPmUnitEvaporationPressure2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 42), Integer32()).setMaxAccess("readonly")
airIRmPmUnitEvaporationTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43))
airIRmPmUnitEvaporationTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 1), Integer32()).setMaxAccess("readonly")
airIRmPmUnitEvaporationTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 2), Integer32()).setMaxAccess("readonly")
airIRmPmCmp1ManOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readonly")
airIRmPmCmp1ManOperationState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 3), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmCmp1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 4), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmCmp1StartTempSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17))
airIRmPmCmp1StartTempSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1StartTempSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1HysteresisSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18))
airIRmPmCmp1HysteresisSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1HysteresisSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1StartTempWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19))
airIRmPmCmp1StartTempWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1StartTempWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1HysteresisWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20))
airIRmPmCmp1HysteresisWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1HysteresisWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 29), Integer32()).setMaxAccess("readonly")
airIRmPmCmp2ManOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readonly")
airIRmPmCmp2ManOperationState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 3), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmCmp2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 4), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmCmp2StartTempSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17))
airIRmPmCmp2StartTempSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2StartTempSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2HysteresisSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18))
airIRmPmCmp2HysteresisSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2HysteresisSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2StartTempWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19))
airIRmPmCmp2StartTempWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2StartTempWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2HysteresisWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20))
airIRmPmCmp2HysteresisWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2HysteresisWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmCmp2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 29), Integer32()).setMaxAccess("readonly")
airIRmPmEheating1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 4), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmEheating1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2),))).setMaxAccess("readonly")
airIRmPmEheating1StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10))
airIRmPmEheating1StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating1StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11))
airIRmPmEheating1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 17), Integer32()).setMaxAccess("readonly")
airIRmPmEheating2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 4), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmEheating2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2),))).setMaxAccess("readonly")
airIRmPmEheating2StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10))
airIRmPmEheating2StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating2StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11))
airIRmPmEheating2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 17), Integer32()).setMaxAccess("readonly")
airIRmPmEheating3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 4), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmEheating3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating3Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2),))).setMaxAccess("readonly")
airIRmPmEheating3StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10))
airIRmPmEheating3StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating3StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11))
airIRmPmEheating3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 17), Integer32()).setMaxAccess("readonly")
airIRmPmEheating4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 4), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmEheating4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmEheating4Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2),))).setMaxAccess("readonly")
airIRmPmEheating4StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10))
airIRmPmEheating4StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating4StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11))
airIRmPmEheating4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmEheating4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 17), Integer32()).setMaxAccess("readonly")
airIRmPmGECWvalveManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 2), Integer32()).setMaxAccess("readonly")
airIRmPmGECWvalveStartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9))
airIRmPmGECWvalveStartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmGECWvalveStartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmGECWvalveLinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10))
airIRmPmGECWvalveLinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmGECWvalveLinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmGECWvalveGEOffTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12))
airIRmPmGECWvalveGEOffTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmGECWvalveGEOffTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmGECWvalveOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 15), Integer32()).setMaxAccess("readonly")
airIRmPmGECWvalveManOpOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 16), Integer32()).setMaxAccess("readonly")
airIRmPmGvalveManOperationEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmGvalvePreOpeningTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 11), Integer32()).setMaxAccess("readonly")
airIRmPmGvalvePreOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 12), Integer32()).setMaxAccess("readonly")
airIRmPmGvalveOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 13), Integer32()).setMaxAccess("readonly")
airIRmPmGvalveManOpOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 14), Integer32()).setMaxAccess("readonly")
airIRmPmDrycooler1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler1WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9))
airIRmPmDrycooler1WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler1WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler1SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10))
airIRmPmDrycooler1SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler1SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11))
airIRmPmDrycooler1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 16), Integer32()).setMaxAccess("readonly")
airIRmPmDrycooler2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler2WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9))
airIRmPmDrycooler2WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler2WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler2SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10))
airIRmPmDrycooler2SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler2SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11))
airIRmPmDrycooler2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 16), Integer32()).setMaxAccess("readonly")
airIRmPmDrycooler3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler3WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9))
airIRmPmDrycooler3WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler3WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler3SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10))
airIRmPmDrycooler3SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler3SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11))
airIRmPmDrycooler3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 16), Integer32()).setMaxAccess("readonly")
airIRmPmDrycooler4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDrycooler4WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9))
airIRmPmDrycooler4WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler4WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler4SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10))
airIRmPmDrycooler4SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler4SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11))
airIRmPmDrycooler4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDrycooler4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 16), Integer32()).setMaxAccess("readonly")
airIRmPmPump1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump1StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10))
airIRmPmPump1StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11))
airIRmPmPump1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12))
airIRmPmPump1LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 13), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 21), Integer32()).setMaxAccess("readonly")
airIRmPmPump1Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 22), Integer32()).setMaxAccess("readonly")
airIRmPmPump1ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 28), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 29), Integer32()).setMaxAccess("readwrite")
airIRmPmPump1ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 30), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump2StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10))
airIRmPmPump2StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11))
airIRmPmPump2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12))
airIRmPmPump2LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 13), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 21), Integer32()).setMaxAccess("readonly")
airIRmPmPump2Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 22), Integer32()).setMaxAccess("readonly")
airIRmPmPump2ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 28), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 29), Integer32()).setMaxAccess("readwrite")
airIRmPmPump2ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 30), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump3StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10))
airIRmPmPump3StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11))
airIRmPmPump3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12))
airIRmPmPump3LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 13), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 21), Integer32()).setMaxAccess("readonly")
airIRmPmPump3Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 22), Integer32()).setMaxAccess("readonly")
airIRmPmPump3ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 28), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 29), Integer32()).setMaxAccess("readwrite")
airIRmPmPump3ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 30), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPump4StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10))
airIRmPmPump4StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11))
airIRmPmPump4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12))
airIRmPmPump4LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 13), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 21), Integer32()).setMaxAccess("readonly")
airIRmPmPump4Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 22), Integer32()).setMaxAccess("readonly")
airIRmPmPump4ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 28), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 29), Integer32()).setMaxAccess("readwrite")
airIRmPmPump4ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 30), Integer32()).setMaxAccess("readwrite")
airIRmPmHotgasHeatRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25, 3), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmPWWHeatingManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPWWHeatingRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPWWHeatingManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 4), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmPWWHeatingType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("undefined", 2),))).setMaxAccess("readonly")
airIRmPmPWWHeatingStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10))
airIRmPmPWWHeatingStartTempK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingHysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12))
airIRmPmPWWHeatingHysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingHysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingLinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13))
airIRmPmPWWHeatingLinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingLinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 16), Integer32()).setMaxAccess("readwrite")
airIRmPmPWWHeatingManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 17), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmHumidifier1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 3), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmHumidifier1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmHumidifier1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2),))).setMaxAccess("readonly")
airIRmPmHumidifier1StartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 18), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 20), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier1LinearRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 21), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 27), Integer32()).setMaxAccess("readonly")
airIRmPmHumidifier1CurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 28), Integer32()).setMaxAccess("readonly")
airIRmPmHumidifier1ManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 29), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmHumidifier2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 3), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmHumidifier2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmHumidifier2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2),))).setMaxAccess("readonly")
airIRmPmHumidifier2StartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 18), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 20), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier2LinearRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 21), Integer32()).setMaxAccess("readwrite")
airIRmPmHumidifier2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 27), Integer32()).setMaxAccess("readonly")
airIRmPmHumidifier2CurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 28), Integer32()).setMaxAccess("readonly")
airIRmPmHumidifier2ManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 29), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDehumidificRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 3), AirIRmControlState()).setMaxAccess("readonly")
airIRmPmDehumidificManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 5), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmDehumidificStartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 10), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 12), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificMinWaterTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18))
airIRmPmDehumidificMinWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificMinWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificMaxWaterTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19))
airIRmPmDehumidificMaxWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 1), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificMaxWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 2), Integer32()).setMaxAccess("readwrite")
airIRmPmDehumidificRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 21), Integer32()).setMaxAccess("readwrite")
airIRmPmFan1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2),))).setMaxAccess("readonly")
airIRmPmFan1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 32), Integer32()).setMaxAccess("readonly")
airIRmPmFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 33), Integer32()).setMaxAccess("readonly")
airIRmPmFan1ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 34), Integer32()).setMaxAccess("readonly")
airIRmPmFan2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2),))).setMaxAccess("readonly")
airIRmPmFan2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 32), Integer32()).setMaxAccess("readonly")
airIRmPmFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 33), Integer32()).setMaxAccess("readonly")
airIRmPmFan2ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 34), Integer32()).setMaxAccess("readonly")
airIRmPmFan3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 3), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 6), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmFan3Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2),))).setMaxAccess("readonly")
airIRmPmFan3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 32), Integer32()).setMaxAccess("readonly")
airIRmPmFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 33), Integer32()).setMaxAccess("readonly")
airIRmPmFan3ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 34), Integer32()).setMaxAccess("readonly")
airIRmPmLouver1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmLouver1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("closed", 1), ("open", 2),))).setMaxAccess("readonly")
airIRmPmLouver1ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("closed", 1), ("open", 2),))).setMaxAccess("readonly")
airIRmPmLouver2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmLouver2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("closed", 1), ("open", 2),))).setMaxAccess("readonly")
airIRmPmLouver2ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("closed", 1), ("open", 2),))).setMaxAccess("readonly")
airIRmPmLouver3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 2), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmLouver3Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("closed", 1), ("open", 2),))).setMaxAccess("readonly")
airIRmPmLouver3ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("closed", 1), ("open", 2),))).setMaxAccess("readonly")
airIRmPmFan1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 1), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFan2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 2), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFan3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 3), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmCompressor1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 4), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmCompressor2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 5), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmWaterDetector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 6), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmPhaseFailure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 7), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFireSmokeDetector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 8), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReturnAirTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 9), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReturnAirHumidityTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 10), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSupplyAirTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 11), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSupplyAirHumidityTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 12), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmWaterTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 13), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReturnAirTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 14), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReturnAirHumidityTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 15), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSupplyAirTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 16), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSupplyAirHumidityTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 17), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmWaterTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 18), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 19), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 20), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 21), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 22), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor5Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 23), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor6Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 24), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor7Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 25), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor8Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 26), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor9Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 27), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor10Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 28), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor11Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 29), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor12Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 30), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor13Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 31), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor14Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 32), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor15Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 33), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor16Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 34), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor17Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 35), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor18Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 36), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor19Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 37), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor20Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 38), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor21Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 39), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor1Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 40), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor2Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 41), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor3Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 42), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor4Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 43), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor5Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 44), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor6Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 45), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor7Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 46), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor8Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 47), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor9Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 48), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor10Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 49), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor11Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 50), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor12Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 51), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor13Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 52), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor14Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 53), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor15Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 54), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor16Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 55), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor17Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 56), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor18Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 57), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor19Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 58), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor20Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 59), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmSensor21Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 60), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmCompressor1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 61), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmCompressor2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 62), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmCompressor1LowPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 63), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmCompressor2LowPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 64), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReheat1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 65), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReheat2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 66), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReheat3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 67), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmReheat4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 68), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmDrycooler1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 69), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmDrycooler2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 70), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmDrycooler3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 71), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmDrycooler4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 72), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmPump1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 73), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmPump2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 74), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmPump3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 75), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmPump4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 76), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 77), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 78), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 79), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier1Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 80), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier2Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 81), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier3Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 82), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier1Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 83), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier2Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 84), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHumidifier3Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 85), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFan1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 86), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFan2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 87), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFan3Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 88), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFilter1Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 89), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFilter2Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 90), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmFilter3Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 91), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 92), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 93), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 94), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 95), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 96), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 97), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 98), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 99), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm9 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 100), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmAuxiliaryAlarm10 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 101), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmHotGasHeatingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 102), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmEEV1PressureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 103), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmEEV1TemperatureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 104), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmEEV1StepperMotorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 105), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmEEV2PressureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 106), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmEEV2TemperatureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 107), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmEEV2StepperMotorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 108), AirIRmAlarmState()).setMaxAccess("readonly")
airIRmPmMyZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 1), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneRoomTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2))
airIRmPmMyZoneRoomTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 1), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneRoomTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 2), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneRoomHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 3), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneSupplyTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4))
airIRmPmMyZoneSupplyTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 1), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneSupplyTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 2), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 5), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneSequencingTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 6), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneNumberOfErrorUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 7), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneEmergencyTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8))
airIRmPmMyZoneEmergencyTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 1), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneEmergencyTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 2), Integer32()).setMaxAccess("readonly")
airIRmPmMyZoneCWEnergySaveMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 9), AirIRmActivityState()).setMaxAccess("readonly")
airIRmPmGlobalZoneDataEmergencyOpMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45, 1), AirIRmActivityState()).setMaxAccess("readonly")
airIRG3IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3IdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2), )
airIRG3IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3IdentIndex"))
airIRG3IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
airIRG3IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
airIRG3IdentModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
airIRG3IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
airIRG3IdentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
airIRG3IdentHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
airIRG3IdentManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
airIRG3IdentRDUSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
airIRG3IdentCMSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
airIRG3IdentGroupSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
airIRG3GroupTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 1), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2), )
airIRG3GroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupStatusIndex"))
airIRG3GroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusCoolOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusCoolDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMaxRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMaxRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMinRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMinRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMaxReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMaxReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMinReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusMinReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgSupplyTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgSupplyTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgReturnTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgReturnTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusAvgAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusTotalAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
airIRG3GroupStatusTotalAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
airIRG3GroupSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3), )
airIRG3GroupSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupSetpointsIndex"))
airIRG3GroupSetpointsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3GroupSetpointsCoolSetpointUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
airIRG3GroupSetpointsCoolSetpointMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
airIRG3GroupSetpointsCoolDeadbandUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
airIRG3GroupSetpointsCoolDeadbandMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
airIRG3GroupSetpointsFanSpeedPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5),))).setMaxAccess("readwrite")
airIRG3GroupSetpointsSupplyAirSetpointUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
airIRG3GroupSetpointsSupplyAirSetpointMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
airIRG3GroupSetpointsAirFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readwrite")
airIRG3GroupSetpointsLightingOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
airIRG3GroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4), )
airIRG3GroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupConfigIndex"))
airIRG3GroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3GroupConfigNumberofCoolingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
airIRG3GroupConfigConfigurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), ("hacs", 4),))).setMaxAccess("readwrite")
airIRG3GroupConfigCapacityControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("discrete", 1), ("proportional", 2),))).setMaxAccess("readwrite")
airIRG3GroupConfigFanSpeedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2),))).setMaxAccess("readwrite")
airIRG3GroupConfigCoolGainP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
airIRG3GroupConfigCoolResetRateI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
airIRG3GroupConfigCoolDerivativeD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
airIRG3GroupConfigCoolPIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("readBack", 1), ("reset", 2),))).setMaxAccess("readwrite")
airIRG3GroupConfigNumberofBackupUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
airIRG3GroupConfigRuntimeBalancingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRG3GroupConfigLoadAssistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRG3AlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 1), Integer32()).setMaxAccess("readonly")
airIRG3AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2), )
airIRG3AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3AlarmsIndex"))
airIRG3AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3AlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
airIRG3AlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
airIRG3RDUTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2), )
airIRG3RDUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUStatusDeviceIndex"))
airIRG3RDUStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3RDUStatusOnReadyStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3),))).setMaxAccess("readonly")
airIRG3RDUStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3), ("stop", 4), ("maintenancemode", 5),))).setMaxAccess("readonly")
airIRG3RDUStatusLeadPump = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("pump1", 1), ("pump2", 2),))).setMaxAccess("readonly")
airIRG3RDUStatusStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPumpChangeOverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusStopOnLeakDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readonly")
airIRG3RDUStatusPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2),))).setMaxAccess("readonly")
airIRG3RDUStatusTotalRDUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusInletWaterTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusInletWaterTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusOutletWaterTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusOutletWaterTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserSaturationTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserSaturationTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusDewPointTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusDewPointTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPumpOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPumpOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusSubcoolerOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusSubcoolerOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserOutletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCondenserOutletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPump1HeadPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPump1HeadPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPump2HeadPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPump2HeadPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPump1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 33), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusPump2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 34), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusCWValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 35), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusReceiverLiquidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 36), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusDCPowerSupply1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 37), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusDCPowerSupply2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 38), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusTotalDCPowerSupplyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 39), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRG3RDUStatusOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
airIRG3RDUStatusByPassValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 42), Integer32()).setMaxAccess("readonly")
airIRG3RDUStatusRefrigerantLeakDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("suspended", 1), ("calibrating", 2), ("operating", 3), ("disabled", 4),))).setMaxAccess("readonly")
airIRG3RDURunHoursTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3), )
airIRG3RDURunHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDURunHoursDeviceIndex"))
airIRG3RDURunHoursDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDURunHoursRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3RDURunHoursPump1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
airIRG3RDURunHoursPump2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
airIRG3RDURunHoursPowerSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
airIRG3RDURunHoursPowerSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG3RDUServiceIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4), )
airIRG3RDUServiceIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUServiceIntervalsDeviceIndex"))
airIRG3RDUServiceIntervalsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDUServiceIntervalsRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3RDUServiceIntervalsAirFilterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
airIRG3RDUServiceIntervalsAirFilterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enable", 1), ("disable", 2),))).setMaxAccess("readwrite")
airIRG3RDUThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5), )
airIRG3RDUThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUThresholdsDeviceIndex"))
airIRG3RDUThresholdsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDUThresholdsRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3RDUThresholdsEnteringFluidTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
airIRG3RDUThresholdsEnteringFluidTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
airIRG3RDUSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6), )
airIRG3RDUSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUSetpointsDeviceIndex"))
airIRG3RDUSetpointsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7), )
airIRG3RDUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUConfigDeviceIndex"))
airIRG3RDUConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3RDUConfigRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3RDUConfigStopOnLeakDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
airIRG3RDUConfigPumpChangeOverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
airIRG3RDUConfigPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("anyalarm", 1), ("onlycriticalalarms", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigByPassValveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigRefrigerantLeakDetectorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigCalibrateRefrigerantLeakDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
airIRG3RDUConfigOnReadyStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3),))).setMaxAccess("readwrite")
airIRG3CMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2), )
airIRG3CMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMStatusDeviceIndex"))
airIRG3CMStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3CMStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("standBy", 1), ("on", 2), ("idle", 3),))).setMaxAccess("readonly")
airIRG3CMStatusUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unconfigured", 1), ("oa", 2), ("ra", 3),))).setMaxAccess("readonly")
airIRG3CMStatusRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusLiquidTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusLiquidTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusVaporTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusVaporTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusEvaporatorTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusEvaporatorTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusLiquidInletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusLiquidInletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusVaporOutletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusVaporOutletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusExpansionValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusEPRValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
airIRG3CMStatusLocalDisplayOnOffEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readonly")
airIRG3CMStatusAverageFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3), )
airIRG3CMRunHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMRunHoursDeviceIndex"))
airIRG3CMRunHoursDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3CMRunHoursFan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursFan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursFan3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursFan4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursFan5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
airIRG3CMRunHoursAirFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
airIRG3CMServiceIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4), )
airIRG3CMServiceIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMServiceIntervalsDeviceIndex"))
airIRG3CMServiceIntervalsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMServiceIntervalsCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3CMServiceIntervalsAirFilterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
airIRG3CMServiceIntervalsAirFilterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disable", 1), ("enable", 2),))).setMaxAccess("readwrite")
airIRG3CMThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5), )
airIRG3CMThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMThresholdsDeviceIndex"))
airIRG3CMThresholdsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMThresholdsCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3CMThresholdsRackInletTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
airIRG3CMThresholdsRackInletTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
airIRG3CMThresholdsSupplyAirTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
airIRG3CMThresholdsSupplyAirTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
airIRG3CMThresholdsReturnAirTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
airIRG3CMThresholdsReturnAirTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
airIRG3CMSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6), )
airIRG3CMSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMSetpointsDeviceIndex"))
airIRG3CMSetpointsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7), )
airIRG3CMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMConfigDeviceIndex"))
airIRG3CMConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
airIRG3CMConfigCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
airIRG3CMConfigStopOnCoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
airIRG3CMConfigStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
airIRG3CMConfigRemoteOnStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("standBy", 1), ("on", 2),))).setMaxAccess("readwrite")
airIRG3CMConfigPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2),))).setMaxAccess("readwrite")
rARUIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1), )
rARUIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUIdentAruIndex"))
rARUIdentAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rARUIdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
rARUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1), )
rARUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUConfigAruIndex"))
rARUConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rARUConfigAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
rARUConfigAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,)).clone(namedValues=NamedValues(("aruOff", 1), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW-1200cfm", 6), ("aru5kW-800cfm", 7), ("aru3kW-500cfm", 8), ("aru2kW-300cfm", 9), ("aru400cfm", 10), ("aru600cfm", 11), ("aru700cfm", 12), ("aru900cfm", 13), ("aru1000cfm", 14), ("aru1400cfm", 15), ("aru1600cfm", 16), ("aru1800cfm", 17), ("aru2000cfm", 18),))).setMaxAccess("readwrite")
rARUConfigAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
rARUConfigAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
rARUConfigAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("aruOn", 1), ("aruOff", 2),))).setMaxAccess("readwrite")
rARUStatusAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 1), Integer32()).setMaxAccess("readonly")
rARUStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2),))).setMaxAccess("readonly")
rARUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3), )
rARUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUStatusAruIndex"))
rARUStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
rARUStatusAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
rARUStatusAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,)).clone(namedValues=NamedValues(("aruOff", 1), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW-1200cfm", 6), ("aru5kW-800cfm", 7), ("aru3kW-500cfm", 8), ("aru2kW-300cfm", 9), ("aru400cfm", 10), ("aru600cfm", 11), ("aru700cfm", 12), ("aru900cfm", 13), ("aru1000cfm", 14), ("aru1400cfm", 15), ("aru1600cfm", 16), ("aru1800cfm", 17), ("aru2000cfm", 18),))).setMaxAccess("readonly")
rARUStatusAruManualSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("aruOff", 1), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW", 6), ("aru5kW", 7), ("aru3kW", 8), ("aru2kW", 9), ("aruRem", 10),))).setMaxAccess("readonly")
rARUStatusAruTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
rARUStatusAruTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
rARUStatusAruTemp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
rARUStatusAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readonly")
rARUStatusAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
rARUStatusAruAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
rARUStatusAruCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("commsNeverDiscovered", 1), ("commsEstablished", 2), ("commsLost", 3),))).setMaxAccess("readonly")
rARUStatusAruTempOvrdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("inactive", 1), ("active", 2),))).setMaxAccess("readonly")
rARUStatusAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("aruOn", 1), ("aruOff", 2),))).setMaxAccess("readonly")
rARUStatusAruTotalAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
rARUFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1), )
rARUFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUFanStatusAruIndex"), (0, "PowerNet-MIB", "rARUFanStatusFanIndex"))
rARUFanStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rARUFanStatusNominalFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
rARUFanStatusSelectedFanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
rARUFanStatusReplacementThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("disabled", 1), ("khr20", 2), ("khr25", 3), ("khr30", 4), ("khr35", 5), ("khr40", 6), ("khr50", 7),))).setMaxAccess("readwrite")
rARUFanStatusFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
rARUFanStatusFanOperatingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("onOk", 3), ("onDegraded", 4), ("offFailed", 5),))).setMaxAccess("readonly")
rARUFanStatusFanRpmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
rARUFanStatusFanFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
rARUFanStatusFanInServiceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
rARUFanStatusFanRunhourCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
rARUFanStatusFanRunhourReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
rARUPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1), )
rARUPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUPowerStatusAruIndex"))
rARUPowerStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
rARUPowerStatusPrimaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readonly")
rARUPowerStatusAuxiliaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readonly")
rARUPowerStatusRedundantAcConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("singleCord", 1), ("dualCord", 2),))).setMaxAccess("readwrite")
rARUSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 1), Integer32()).setMaxAccess("readonly")
rARUSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2), )
rARUSensorsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUSensorsStatusAruIndex"), (0, "PowerNet-MIB", "rARUSensorsStatusSensorNumber"))
rARUSensorsStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
rARUSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
rARUSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
rARUSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 3), Integer32()).setMaxAccess("readonly")
rARUSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4), )
rARUSensorsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUSensorsConfigAruIndex"), (0, "PowerNet-MIB", "rARUSensorsConfigSensorNumber"))
rARUSensorsConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
rARUSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
rARUSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
rARUSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
rARUSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
rARUSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
isxModularDistInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2), )
isxModularDistInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistInfoSegmentIndex"))
isxModularDistInfoSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistInfoMeterModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
isxModularDistInfoMeterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
isxModularDistInfoMeterDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
isxModularDistInfoMeterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
isxModularDistInfoMeterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
isxModularDistModuleInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 1), Integer32()).setMaxAccess("readonly")
isxModularDistModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2), )
isxModularDistModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleInfoModIndex"))
isxModularDistModuleInfoModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistModuleInfoAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("notPresent", 4), ("unknown", 5),))).setMaxAccess("readonly")
isxModularDistModuleInfoModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
isxModularDistModuleInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
isxModularDistModuleInfoDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
isxModularDistModuleInfoNumCables = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 3), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4), )
isxModularDistModuleBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleBreakerModIndex"), (0, "PowerNet-MIB", "isxModularDistModuleBreakerPhaseIndex"))
isxModularDistModuleBreakerModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phaseL1", 1), ("phaseL2", 2), ("phaseL3", 3),))).setMaxAccess("readonly")
isxModularDistModuleBreakerAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerPhysicalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerCableNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
isxModularDistModuleBreakerPositionAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistModuleBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
isxModularDistModuleBreakerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 5), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6), )
isxModularDistModuleOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleOutputModIndex"), (0, "PowerNet-MIB", "isxModularDistModuleOutputCordIndex"))
isxModularDistModuleOutputModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputNumCables = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputCordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
isxModularDistModuleOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
isxModularDistModuleOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 6,)).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("notPresent", 4), ("unknown", 6),))).setMaxAccess("readonly")
isxModularDistModuleOutputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistModuleOutputBreakerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
isxModularDistModuleOutputThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
isxModularDistModuleOutputThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
isxModularDistModuleOutputThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
isxModularDistModuleOutputAlarmMinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistModuleOutputAlarmLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistModuleOutputAlarmHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistModuleOutputAlarmMaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistModuleOutputCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 17), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 18), DisplayString()).setMaxAccess("readonly")
isxModularDistModuleOutputAvailableVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 20), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputKwhUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 21), Integer32()).setMaxAccess("readonly")
isxModularDistModuleOutputKwhReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
isxModularDistModuleOutputKwhResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 23), DisplayString()).setMaxAccess("readonly")
isxModularDistSubFeedInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 1), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2), )
isxModularDistSubFeedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSubFeedInfoSubIndex"))
isxModularDistSubFeedInfoSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
isxModularDistSubFeedInfoLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
isxModularDistSubFeedInfoBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedInfoBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("open", 1), ("closed", 2),))).setMaxAccess("readonly")
isxModularDistSubFeedInfoAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3),))).setMaxAccess("readonly")
isxModularDistSubFeedInfoAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
isxModularDistSubFeedInfoThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
isxModularDistSubFeedInfoThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
isxModularDistSubFeedInfoThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
isxModularDistSubFeedInfoAlarmMinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoAlarmLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoAlarmHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoAlarmMaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoBreakerAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedInfoKwhUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedInfoKwhReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
isxModularDistSubFeedInfoKwhResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
isxModularDistSubFeedLoadingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 3), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedLoadingTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4), )
isxModularDistSubFeedLoadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSubFeedLoadingSubIndex"), (0, "PowerNet-MIB", "isxModularDistSubFeedLoadingPhaseIndex"))
isxModularDistSubFeedLoadingSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedLoadingPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
isxModularDistSubFeedLoadingAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedLoadingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedLoadingPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
isxModularDistSubFeedLoadingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
isxModularDistSysOutputVoltageNominalLineToNeutral = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 1), Integer32()).setMaxAccess("readonly")
isxModularDistSysOutputVoltageNominalLineToLine = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 2), Integer32()).setMaxAccess("readonly")
isxModularDistSysOutputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularDistSysOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 4), Integer32()).setMaxAccess("readonly")
isxModularDistSysOutputVoltageMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
isxModularDistSysOutputVoltageThresholdMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageThresholdMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageAlarmMinEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageAlarmLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageAlarmHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageAlarmMaxEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysOutputVoltageFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("freqToleranceOff", 1), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ("freqToleranceNine", 10), ("freqToleranceNotAvailable", 11),))).setMaxAccess("readwrite")
isxModularDistSysVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15), )
isxModularDistSysVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysVoltagePhaseIndex"))
isxModularDistSysVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
isxModularDistSysVoltageAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
isxModularDistSysVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularDistSysVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
isxModularDistSysCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 1), Integer32()).setMaxAccess("readonly")
isxModularDistSysCurrentMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
isxModularDistSysCurrentThresholdMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
isxModularDistSysCurrentThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
isxModularDistSysCurrentThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
isxModularDistSysCurrentThresholdMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
isxModularDistSysCurrentAlarmMinEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysCurrentAlarmLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysCurrentAlarmHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysCurrentAlarmMaxEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2),))).setMaxAccess("readwrite")
isxModularDistSysCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11), )
isxModularDistSysCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysCurrentPhaseIndex"))
isxModularDistSysCurrentPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
isxModularDistSysCurrentAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
isxModularDistSysCurrentAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularDistSysCurrentPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
isxModularDistSysPowerTotal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 1), Integer32()).setMaxAccess("readonly")
isxModularDistSysPowerKwhUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 2), Integer32()).setMaxAccess("readonly")
isxModularDistSysPowerKwhReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("no", 1), ("yes", 2),))).setMaxAccess("readwrite")
isxModularDistSysPowerKwhResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 4), DisplayString()).setMaxAccess("readonly")
isxModularDistSysPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5), )
isxModularDistSysPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysPowerPhaseIndex"))
isxModularDistSysPowerPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3),))).setMaxAccess("readonly")
isxModularDistSysPowerKw = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
isxModularDistSysPowerKwhPhaseUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
isxModularPduIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
isxModularPduIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
isxModularPduIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 3), DisplayString()).setMaxAccess("readonly")
isxModularPduIdentMonitorCardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 4), DisplayString()).setMaxAccess("readonly")
isxModularPduIdentMonitorCardHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 5), DisplayString()).setMaxAccess("readonly")
isxModularPduIdentMonitorCardFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 6), DisplayString()).setMaxAccess("readonly")
isxModularPduIdentMonitorCardFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 7), DisplayString()).setMaxAccess("readonly")
isxModularPduDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notPresent", 1), ("isoXfmrPresent", 2), ("autoXfmrPresent", 3),))).setMaxAccess("readonly")
isxModularPduDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2),))).setMaxAccess("readonly")
isxModularPduDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2),))).setMaxAccess("readonly")
isxModularPduDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 4), Integer32()).setMaxAccess("readonly")
isxModularPduAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3),))).setMaxAccess("readonly")
isxModularPduTransformerTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("overtemp", 2), ("noTransformerPresent", 3), ("unknown", 4),))).setMaxAccess("readonly")
isxModularPduFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("failed", 2), ("noCoolingFansPresent", 3), ("unknown", 4),))).setMaxAccess("readonly")
uioSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
uioSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2), )
uioSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "uioSensorStatusPortID"), (0, "PowerNet-MIB", "uioSensorStatusSensorID"))
uioSensorStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
uioSensorStatusSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
uioSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
uioSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
uioSensorStatusTemperatureDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
uioSensorStatusTemperatureDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
uioSensorStatusHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
uioSensorStatusViolationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
uioSensorStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("sensorStatusNotApplicable", 4),))).setMaxAccess("readonly")
uioSensorStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
uioInputContactStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 1), Integer32()).setMaxAccess("readonly")
uioInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2), )
uioInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "uioInputContactStatusPortID"), (0, "PowerNet-MIB", "uioInputContactStatusContactID"))
uioInputContactStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
uioInputContactStatusContactID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
uioInputContactStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
uioInputContactStatusContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
uioInputContactStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("uioInputClosed", 1), ("uioInputOpen", 2), ("uioInputDisabled", 3), ("inputStateNotApplicable", 4),))).setMaxAccess("readonly")
uioInputContactStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("inputStatusNotApplicable", 4),))).setMaxAccess("readonly")
uioInputContactStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
uioOutputRelayStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 1), Integer32()).setMaxAccess("readonly")
uioOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2), )
uioOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "uioOutputRelayStatusPortID"), (0, "PowerNet-MIB", "uioOutputRelayStatusRelayID"))
uioOutputRelayStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
uioOutputRelayStatusRelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
uioOutputRelayStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
uioOutputRelayStatusRelayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
uioOutputRelayStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("uioOutputClosed", 1), ("uioOutputOpen", 2), ("outputStateNotApplicable", 3),))).setMaxAccess("readonly")
uioOutputRelayStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("inputStatusNotApplicable", 4),))).setMaxAccess("readonly")
uioOutputRelayStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3),))).setMaxAccess("readonly")
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,1)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,2)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,3)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,4)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,5)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
smartBoostOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,6)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,7)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,8)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,9)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,10)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,11)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,12)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,13)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,14)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,15)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsDipSwitchChanged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,16)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatteryNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,17)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
contactFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,18)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
contactFaultResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,19)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
hardwareFailureBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,20)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
softwareBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,21)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
switchedBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,22)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
returnFromBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,23)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
bypassPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,24)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
baseFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,25)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
batteryPackCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,26)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
batteryPackCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,27)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
calibrationStart = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,28)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
restartAgent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,29)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,30)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
smartAvrReducing = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,31)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
codeAuthenticationDone = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,32)).setObjects(*(("PowerNet-MIB", "mconfigTFTPServerIP"), ("PowerNet-MIB", "newCodeAuthentViaTFTP"),))
upsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,33)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
smartBoostOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,34)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
smartAvrReducingOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,35)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatteryReplaced = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,36)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
calibrationEnd = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,37)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dischargeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,38)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
gracefulShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,39)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
outletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,41)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlIndex"),))
outletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,42)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlIndex"),))
outletReboot = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,43)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlIndex"),))
configChangeSNMP = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,44)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
configChangeOutlet = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,45)).setObjects(*(("PowerNet-MIB", "sPDUOutletConfigIndex"),))
accessViolationConsole = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,46)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
accessViolationHTTP = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,47)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
passwordChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,48)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
badVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,49)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
badVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,50)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
chargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,51)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
chargerFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,52)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
batteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,53)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
batteryOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,54)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
smartRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,55)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
smartRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,56)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
humidityThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,57)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
humidityThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,58)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
temperatureThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,59)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
temperatureThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,60)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
humidityThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,61)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
humidityThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,62)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
temperatureThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,63)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
temperatureThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,64)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
mupsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,65)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
mupsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,66)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
batteryIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,67)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
batteryDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,68)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
powerModuleIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,69)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
powerModuleDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,70)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
intelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,71)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
intelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,72)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
rintelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,73)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
rintelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,74)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
extBatteryFrameIncease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,75)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
extBatteryFrameDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,76)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
abnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,77)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
abnormalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,78)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
deviceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,79)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
noBatteries = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,80)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
noBatteriesCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,81)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,82)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,83)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
userModified = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,84)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
msvmCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,85)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,86)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,87)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,88)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,89)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,90)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,91)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,92)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,93)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,94)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,95)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,96)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"),))
msvmPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,97)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
mspCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,98)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"),))
mspCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,99)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"),))
mspOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,100)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
mspOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,101)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
mspDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,102)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"),))
mspOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,103)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
rsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,104)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
rsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,105)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
rsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,106)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
rsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,107)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
rsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,108)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
rsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,109)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,110)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,111)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcPINChanged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,112)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,113)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,114)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,115)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,116)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcOutputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,117)).setObjects(*(("PowerNet-MIB", "dm3StatusOutRlyIndex"), ("PowerNet-MIB", "dm3StatusOutRlyName"), ("PowerNet-MIB", "mtrapargsString"),))
dcOutputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,118)).setObjects(*(("PowerNet-MIB", "dm3StatusOutRlyIndex"), ("PowerNet-MIB", "dm3StatusOutRlyName"), ("PowerNet-MIB", "mtrapargsString"),))
dcInputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,119)).setObjects(*(("PowerNet-MIB", "dm3StatusInRlyIndex"), ("PowerNet-MIB", "dm3StatusInRlyName"), ("PowerNet-MIB", "mtrapargsString"),))
dcInputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,120)).setObjects(*(("PowerNet-MIB", "dm3StatusInRlyIndex"), ("PowerNet-MIB", "dm3StatusInRlyName"), ("PowerNet-MIB", "mtrapargsString"),))
logicPowerSuppliesIncreased = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,121)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
logicPowerSuppliesDecreased = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,122)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
externalSwitchGearClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,123)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
externalSwitchGearOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,124)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
generalDeviceEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,125)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
atsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,126)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
atsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,127)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
atsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,128)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
atsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,129)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,130)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,131)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
atsOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,132)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
atsOverCurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,133)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
atsPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,134)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsPowerSupplyFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,135)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
dcMainsFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,136)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMainsFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,137)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,138)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcFanFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,139)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcRectifierOvertempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,140)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcRectifierOvertempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,141)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcCurrentLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,142)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcCurrentLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,143)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcRectifierFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,144)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcRectifierFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,145)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMultRectFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,146)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcMultRectFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,147)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcBatteryBreakerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,148)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcBatteryBreakerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,149)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcRectifierOVPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,150)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcRectifierOVPAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,151)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcLVDImminentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,152)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcLVDImminentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,153)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcFuseCBAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,154)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcFuseCBAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,155)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,156)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,157)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,158)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcHumidityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,159)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcHumidityAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,160)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcBBCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,161)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
dcBBCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,162)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
iemHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,163)).setObjects(*(("PowerNet-MIB", "iemStatusProbeCurrentTemp"), ("PowerNet-MIB", "iemStatusProbeTempUnits"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,164)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,165)).setObjects(*(("PowerNet-MIB", "iemStatusProbeCurrentTemp"), ("PowerNet-MIB", "iemStatusProbeTempUnits"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,166)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemHighHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,167)).setObjects(*(("PowerNet-MIB", "iemStatusProbeCurrentHumid"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemHighHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,168)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemLowHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,169)).setObjects(*(("PowerNet-MIB", "iemStatusProbeCurrentHumid"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemLowHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,170)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
iemProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,171)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
iemProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,172)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
iemContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,173)).setObjects(*(("PowerNet-MIB", "iemStatusContactNumber"), ("PowerNet-MIB", "iemStatusContactName"), ("PowerNet-MIB", "mtrapargsString"),))
iemContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,174)).setObjects(*(("PowerNet-MIB", "iemStatusContactNumber"), ("PowerNet-MIB", "iemStatusContactName"), ("PowerNet-MIB", "mtrapargsString"),))
iemRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,175)).setObjects(*(("PowerNet-MIB", "iemStatusRelayNumber"), ("PowerNet-MIB", "iemStatusRelayName"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
iemRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,176)).setObjects(*(("PowerNet-MIB", "iemStatusRelayNumber"), ("PowerNet-MIB", "iemStatusRelayName"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManCommEstab = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,177)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,178)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManKneeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,179)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManKneeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,180)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManChargerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,181)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManChargerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,182)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,183)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManBatteryAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,184)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManEnvironmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,185)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManEnvironmentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,186)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManMaintenanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,187)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmBatManMaintenanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,188)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,189)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,190)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduUtilityLineUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,191)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduUtilityLineUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,192)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduUtilityLineOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,193)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduUtilityLineOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,194)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduGroundOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,195)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduGroundOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,196)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,197)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,198)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,199)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,200)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputUndercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,201)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputUndercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,202)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,203)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelInputOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,204)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,205)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelFrequencyOutofRangeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,206)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelNeutralOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,207)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduCircuitPanelNeutralOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,208)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduSystemOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,209)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduOnBatteryMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,210)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,211)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduAtypicalBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,212)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduNoPanelFeedMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,213)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduUpsOperationMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,214)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduForcedBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,215)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduInputTransformerOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,216)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduInputTransformerOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,217)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
pduUPSInputVoltageLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,218)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduUPSInputVoltageRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,219)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,220)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
pduContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,221)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUBankPhaseLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,222)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUBankPhaseLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,223)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUBankPhaseNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,224)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUBankPhaseNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,225)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUBankPhaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,226)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUBankPhaseOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,227)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
aruDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,228)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
rmPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,229)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"),))
emsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,230)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,231)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,232)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
emsProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,233)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
emsSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,234)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"),))
emsSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,235)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"),))
emsSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,236)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"),))
emsSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,237)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"),))
emsBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,238)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,239)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,240)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,241)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,242)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,243)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,244)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,245)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,246)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutletStatusOutletIndex"), ("PowerNet-MIB", "emsOutletStatusOutletName"), ("PowerNet-MIB", "emsOutletStatusOutletState"), ("PowerNet-MIB", "emsOutletStatusOutletNormalState"), ("PowerNet-MIB", "mtrapargsString"),))
emsOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,247)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutletStatusOutletIndex"), ("PowerNet-MIB", "emsOutletStatusOutletName"), ("PowerNet-MIB", "emsOutletStatusOutletState"), ("PowerNet-MIB", "emsOutletStatusOutletNormalState"), ("PowerNet-MIB", "mtrapargsString"),))
emsInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,248)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsInputContactStatusInputContactIndex"), ("PowerNet-MIB", "emsInputContactStatusInputContactName"), ("PowerNet-MIB", "emsInputContactStatusInputContactState"), ("PowerNet-MIB", "emsInputContactStatusInputContactNormalState"), ("PowerNet-MIB", "mtrapargsString"),))
emsInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,249)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsInputContactStatusInputContactIndex"), ("PowerNet-MIB", "emsInputContactStatusInputContactName"), ("PowerNet-MIB", "emsInputContactStatusInputContactState"), ("PowerNet-MIB", "emsInputContactStatusInputContactNormalState"), ("PowerNet-MIB", "mtrapargsString"),))
emsOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,250)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayState"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayNormalState"), ("PowerNet-MIB", "mtrapargsString"),))
emsOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,251)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayState"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayNormalState"), ("PowerNet-MIB", "mtrapargsString"),))
emsDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,252)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
envHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,253)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,254)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,255)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,256)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,257)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,258)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,259)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,260)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,266)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,267)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,268)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,269)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,270)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,271)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDULowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,272)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDULowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,273)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,274)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,275)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,276)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,277)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUPowerSupply1Fail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,278)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUPowerSupply1Ok = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,279)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUPowerSupply2Fail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,280)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUPowerSupply2Ok = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,281)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUPhaseConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,282)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadPhaseConfigIndex"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,283)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"),))
aruAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,284)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,285)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruFanFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,286)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruFanFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,287)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruSmokeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,288)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruSmokeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,289)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruHighTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,290)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruHighTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,291)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruExhaustTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,292)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruExhaustTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,293)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
envAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,294)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,295)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
emsAlinkPowerOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,296)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsAlinkPowerOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,297)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
upsOutletGroupTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,298)).setObjects(*(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"),))
upsOutletGroupTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,299)).setObjects(*(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"),))
smwCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,300)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"),))
smwCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,301)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"),))
smwWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,302)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"),))
smwWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,303)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"),))
smwInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,304)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"),))
smwInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,305)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"),))
airCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,306)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
airCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,307)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
airWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,308)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
airWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,309)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
airInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,310)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
airInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,311)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,312)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,313)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,314)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,315)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBypassVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,316)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBypassVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,317)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBypassVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,318)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBypassVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,319)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,320)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,321)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,322)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,323)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,324)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,325)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,326)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,327)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,328)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,329)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUSystemGroundCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,330)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUSystemGroundCurrentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,331)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,332)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,333)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputNeutralCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,334)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUOutputNeutralCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,335)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,336)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,337)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUTransformerTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,338)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUTransformerTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,339)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,340)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,341)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,342)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,343)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,344)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
emsHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,345)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
emsHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,346)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"),))
ceSevereCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,347)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
ceSevereConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,348)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
ceWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,349)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
ceWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,350)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
ceInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,351)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
ceInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,352)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
upsInternalOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,353)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsInternalOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,354)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsMpuReset = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,355)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOutputSwitchClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,356)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOutputSwitchOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,357)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsCalibrationStackChanged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,358)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
envMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,359)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,360)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,361)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,362)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,363)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,364)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,365)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,366)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,367)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,368)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,369)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,370)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,371)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,372)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,373)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
envLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,374)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"),))
bmsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,375)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,376)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,377)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,378)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,379)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
bmsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,380)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,381)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,382)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,383)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,384)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,385)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,386)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,387)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,388)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,389)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,390)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,391)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,392)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,393)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,394)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGenCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,395)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGenCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,396)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSNeutralPosition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,397)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSSwitchTransferEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,398)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSInternalATSFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,399)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSInternalATSFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,400)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSEngineStartAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,401)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSEngineStopAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,402)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSStartFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,403)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSStopFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,404)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSNotInAutomaticMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,405)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSNotInAutomaticModeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,406)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSEpoTripped = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,407)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSEpoReset = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,408)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,409)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,410)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSTestInitiated = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,411)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSTestCanceled = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,412)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,413)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSTestPassed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,414)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,415)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,416)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xATSRemoteStartContactMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,417)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSRemoteStartContactMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,418)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSDoorOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,419)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSDoorOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,420)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSDCBackupAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,421)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSDCBackupAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,422)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,423)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,424)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,425)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,426)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,427)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,428)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,429)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,430)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,431)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,432)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowOilLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,433)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowOilLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,434)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,435)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,436)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,437)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,438)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorEStop = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,439)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorEStopCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,440)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorHighBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,441)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorHighBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,442)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,443)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,444)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorControlSwitchNotAuto = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,445)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorControlSwitchNotAutoCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,446)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,447)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,448)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,449)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,450)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,451)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,452)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,453)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,454)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorHighACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,455)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorHighACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,456)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorOverspeed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,457)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorOverspeedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,458)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorEngineCold = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,459)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorEngineColdCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,460)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorOutputBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,461)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorOutputBreakerOpenCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,462)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,463)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,464)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,465)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,466)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,467)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,468)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,469)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorVeryLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,470)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorServiceDueAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,471)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorServiceDueAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,472)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,473)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorShutdownCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,474)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorBatteryCharger = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,475)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorBatteryChargerCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,476)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,477)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorGenericEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,478)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,479)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUSystemStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,480)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUSystemStateAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,481)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,482)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,483)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUFuseBlownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,484)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUFuseBlownAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,485)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBreakerPositionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,486)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBreakerPositionAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,487)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBreakerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,488)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,489)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,490)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUSystemInMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,491)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUSystemInUPSOperationalMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,492)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorFuelTankRuptureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,493)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorFuelTankRuptureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,494)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorGroundFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,495)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSGeneratorGroundFaultAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,496)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputLoadPoweredByGeneratorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,497)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSOutputLoadPoweredByGeneratorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,498)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xAPCControllerFirmwareUpdateTransferStart = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,499)).setObjects(*(("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xAPCControllerFirmwareUpdateTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,500)).setObjects(*(("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
xAPCControllerFirmwareUpdateTransferFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,501)).setObjects(*(("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
upsPfcInputRelayFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,502)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsPfcInputRelayFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,503)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsInverterOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,504)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsInverterOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,505)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatteryOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,506)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatteryOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,507)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsEepromFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,508)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsEepromFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,509)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
aruFanRuntimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,510)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
aruFanRuntimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,511)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
aruFanPoorPerformanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,512)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
aruFanPoorPerformanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,513)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
aruRedundantPowerLostAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,514)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
aruRedundantPowerLostAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,515)).setObjects(*(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"),))
apcDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,516)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,517)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,518)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,519)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,520)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,521)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,522)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,523)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,524)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,525)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,526)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,527)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,528)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,529)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,530)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,531)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,532)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,533)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,534)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,535)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,536)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,537)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,538)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,539)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,540)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,541)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcEnvMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,542)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,543)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,544)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,545)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,546)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,547)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,548)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,549)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,550)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,551)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,552)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcCriticalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,553)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcCriticalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,554)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcWarningDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,555)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcWarningDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,556)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcInformationalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,557)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcInformationalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,558)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,559)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,560)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,561)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,562)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,563)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,564)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,565)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcAnalogInputMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,566)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcDeviceClearLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,567)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
apcDeviceConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,568)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcDeviceDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,569)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
apcUnregisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,570)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"),))
apcRegisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,571)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"),))
apcRegisteredUserConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,572)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,573)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorLocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,574)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
apcHandleOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,575)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcHandleClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,576)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,577)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,578)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcKeyOverrideUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,580)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcKeyOverrideLocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,581)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcForcedEntry = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,582)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcForcedEntryCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,583)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcRelockTimeout = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,584)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcRelockTimeoutCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,585)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorSenseDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,586)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorSenseConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,587)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,588)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorEstablishedComms = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,589)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcRegisteredUserAccessChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,590)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"),))
apcUnregisteredUserStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,591)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"),))
apcDeviceClearUserConfigs = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,592)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"),))
upsBatteryTempSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,600)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatteryTempSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,601)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatterySoftBusStartFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,602)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBatterySoftBusStartFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,603)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,604)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcOutputShortCircuitCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,605)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcOutputRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,606)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcOutputRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,607)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsPfcFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,608)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsPfcFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,609)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcDcBusOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,610)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcDcBusOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,611)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsInverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,612)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsInverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,613)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcAdConverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,614)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcAdConverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,615)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcLogicPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,616)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcLogicPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,617)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcTransformerDCImbalanceFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,618)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcTransformerDCImbalanceFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,619)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBackfeedRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,620)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBackfeedRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,621)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBypassRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,622)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsBypassRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,623)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentMinAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,626)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentMinAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,627)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentMaxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,628)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
xPDUBranchCurrentMaxAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,629)).setObjects(*(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,630)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,631)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,632)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,633)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,634)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"),))
rPDUOutletOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,635)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"),))
apcTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,636)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"),))
baseFanFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,637)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
atsLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,638)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"),))
atsLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,639)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"),))
atsNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,640)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"),))
atsNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,641)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"),))
atsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,642)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"),))
atsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,643)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,644)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,645)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,646)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSUnderVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,647)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSOverFrequency = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,648)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSOverFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,649)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSUnderFrequency = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,650)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsRMSUnderFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,651)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularDistributionCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,652)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularDistributionCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,653)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularDistributionModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,654)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularDistributionModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,655)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularBreakerOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,656)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularBreakerOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,657)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularMinCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,658)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularMinCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,659)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularLowCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,660)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularLowCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,661)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularHighCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,662)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularHighCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,663)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularMaxCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,664)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularMaxCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,665)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedBreakerOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,666)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedBreakerOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,667)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedMinCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,668)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedMinCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,669)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedLowCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,670)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedLowCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,671)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedHighCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,672)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedHighCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,673)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedMaxCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,674)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularSubfeedMaxCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,675)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,676)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,677)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,678)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,679)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,680)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,681)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,682)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTotalOutputCurrentMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,683)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,684)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,685)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,686)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,687)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,688)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,689)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,690)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputVoltageMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,691)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorClosedImproperly = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,692)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcDoorClosedImproperlyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,693)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcUserScheduleViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,694)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
apcUserScheduleViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,695)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputFrequencyThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,696)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularOutputFrequencyViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,697)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
atsSourceStatusFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,698)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsSourceStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,699)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsHardwareStatusFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,700)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsHardwareStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,701)).setObjects(*(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
atsControllerRestart = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,702)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
xATSS1BadPhaseRotation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,724)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSS1BadPhaseRotationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,725)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
xATSS1BadPhaseBalance = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,726)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
xATSS1BadPhaseBalanceCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,727)).setObjects(*(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTransformerOverheating = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,728)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularTransformerOverheatingCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,729)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
apcInternalCommunicationFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,730)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
apcInternalCommunicationFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,731)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOutletGroupCommand = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,732)).setObjects(*(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"),))
onbatterycommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,733)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,734)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
upsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,735)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
upsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,736)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
upsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,737)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
upsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,738)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
upsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,739)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"),))
isxcInformationalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,740)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcInformationalAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,741)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,742)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcWarningAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,743)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,744)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcErrorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,745)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,746)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcCriticalAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,747)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,748)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
isxcFailureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,749)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"),))
rpduCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,750)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
rpduCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,751)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
rpduWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,752)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
rpduWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,753)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
rpduInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,754)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
rpduInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,755)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,756)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
isxModularCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,757)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"),))
upsFirmwareUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,758)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsFirmwareUpdateFinished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,759)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsFirmwareUpdateSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,760)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsFirmwareUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,761)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsHasNoValidFirmware = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,762)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsHasNoValidFirmwareCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,763)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsLocalDisplayButtonFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,767)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsLocalDisplayButtonFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,768)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsNeedsFactorySetupFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,769)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsNeedsFactorySetupFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,770)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,771)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsEPOActiveCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,772)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsFirmwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,773)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsFirmwareMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,774)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOscillatorFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,775)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
upsOscillatorFailedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,776)).setObjects(*(("PowerNet-MIB", "mtrapargsString"),))
mibBuilder.exportSymbols("PowerNet-MIB", rPDU2SensorTempHumidityConfigTempHysteresisC=rPDU2SensorTempHumidityConfigTempHysteresisC, airIRG3CMThresholdsCMID=airIRG3CMThresholdsCMID, sPDUOutletControlVMTable=sPDUOutletControlVMTable, airIRmPmPump1ControlFactor=airIRmPmPump1ControlFactor, upsAdvConfigPositionSelector=upsAdvConfigPositionSelector, xPDUSystemOutputFrequency=xPDUSystemOutputFrequency, airIRG3RDUStatusDeviceIndex=airIRG3RDUStatusDeviceIndex, airIRRP100UnitRunHoursSystem=airIRRP100UnitRunHoursSystem, airIRmPmDrycooler1SummerStartTempF=airIRmPmDrycooler1SummerStartTempF, rPDU2DevicePropertiesTable=rPDU2DevicePropertiesTable, upsOutletGroupStatusTable=upsOutletGroupStatusTable, airPAFirmwareRevision=airPAFirmwareRevision, xPDUIdentProductName=xPDUIdentProductName, airIRmPmPump2HysteresisK=airIRmPmPump2HysteresisK, isxServers=isxServers, airIRG3RDUStatusRefrigerantLeakDetector=airIRG3RDUStatusRefrigerantLeakDetector, rPDU2PhaseConfigModule=rPDU2PhaseConfigModule, galaxy5000UPS40KVA=galaxy5000UPS40KVA, upsBattery=upsBattery, airIRRP500UnitConfigHeatAssistEnable=airIRRP500UnitConfigHeatAssistEnable, rPDU2SensorTempHumidityStatusCommStatus=rPDU2SensorTempHumidityStatusCommStatus, airIRG3CMThresholdsSupplyAirTempHighUS=airIRG3CMThresholdsSupplyAirTempHighUS, xATSSource1PhaseTable=xATSSource1PhaseTable, xATSSystemOutputOverVoltThreshold=xATSSystemOutputOverVoltThreshold, rARUStatusAruTemp1=rARUStatusAruTemp1, dm3ConfigInRlyTable=dm3ConfigInRlyTable, dm3StatusRectState=dm3StatusRectState, msvmLowLoadCleared=msvmLowLoadCleared, dm3ConfigFusesTableSize=dm3ConfigFusesTableSize, airIRRCGroupConfigActiveFlowControllerLampTest=airIRRCGroupConfigActiveFlowControllerLampTest, monitoringStatus=monitoringStatus, battManIdentModelNumber=battManIdentModelNumber, xPDUBranchBreakerRating=xPDUBranchBreakerRating, rPDUOutletStatusIndex=rPDUOutletStatusIndex, upsOutletGroupConfigLoadShedControlTimeOnBattery=upsOutletGroupConfigLoadShedControlTimeOnBattery, airIRRP100UnitStatusCoolOutput=airIRRP100UnitStatusCoolOutput, memModulesConfigEntry=memModulesConfigEntry, airIRG3RDUStatusTable=airIRG3RDUStatusTable, airIRGen2=airIRGen2, serialPort2Control=serialPort2Control, upsHighPrecBatteryCurrentTable=upsHighPrecBatteryCurrentTable, xPDUOutputCurrentLowAlarm=xPDUOutputCurrentLowAlarm, xATSOutputCurrentLowAlarm=xATSOutputCurrentLowAlarm, xATSDeviceNominalVoltage=xATSDeviceNominalVoltage, accessViolationHTTP=accessViolationHTTP, airIRRP500GroupStatusMaxRackInletTempUS=airIRRP500GroupStatusMaxRackInletTempUS, upsAdvOutputLoad=upsAdvOutputLoad, xATSDataCommMismatchError=xATSDataCommMismatchError, airFMGroupFailoverSys=airFMGroupFailoverSys, airIRRCGroupSetpointsActiveFlowControlBias=airIRRCGroupSetpointsActiveFlowControlBias, airFMModBlwr1Table=airFMModBlwr1Table, airFMModBlwr1ChokeTempC=airFMModBlwr1ChokeTempC, sPDUOutletConfigMSPgsLowBattMult=sPDUOutletConfigMSPgsLowBattMult, upsAdvBatteryNominalVoltage=upsAdvBatteryNominalVoltage, isxModularDistSysCurrentAlarmHighEnable=isxModularDistSysCurrentAlarmHighEnable, airIRG3RDUThresholdsEnteringFluidTempHighMetric=airIRG3RDUThresholdsEnteringFluidTempHighMetric, humidityThresholdViolationCleared2=humidityThresholdViolationCleared2, xATSGeneratorOutputTotalApparentPower=xATSGeneratorOutputTotalApparentPower, emsSensorControlTable=emsSensorControlTable, masterSwitchVM=masterSwitchVM, uioOutputRelayStatusRelayName=uioOutputRelayStatusRelayName, xPDUOutputRelaysTableSize=xPDUOutputRelaysTableSize, battManString2BatteryUserLowVoltageAlarm=battManString2BatteryUserLowVoltageAlarm, accessPXConfigBeacon=accessPXConfigBeacon, airFMModRHBlwrCtrl2=airFMModRHBlwrCtrl2, upsDiagSubSysBattMonitorManufactureDate=upsDiagSubSysBattMonitorManufactureDate, rPDUOutletConfigPowerOnTime=rPDUOutletConfigPowerOnTime, airIRmPmEheating1=airIRmPmEheating1, emsOutletStatus=emsOutletStatus, airIRRP500UnitThresholdsRackInletHighTempMetric=airIRRP500UnitThresholdsRackInletHighTempMetric, xATSGeneratorEngineColdCleared=xATSGeneratorEngineColdCleared, airFMModBlwr2ElOvTimeConst=airFMModBlwr2ElOvTimeConst, isxModularDistSubFeedLoadingAlarmStatus=isxModularDistSubFeedLoadingAlarmStatus, airIRRCUnitRunHoursFan7=airIRRCUnitRunHoursFan7, uioInputContactStatusContactLocation=uioInputContactStatusContactLocation, airIRRCUnitThresholdsReturnAirHighTempMetric=airIRRCUnitThresholdsReturnAirHighTempMetric, xPDUDataCommMismatchErrorCleared=xPDUDataCommMismatchErrorCleared, airIRRP500GroupSetpointsFanSpeedControl=airIRRP500GroupSetpointsFanSpeedControl, airIRmPmHumidifier3Alarm5us=airIRmPmHumidifier3Alarm5us, sPDUIdentNameVM=sPDUIdentNameVM, dm3StatusConvStandby=dm3StatusConvStandby, xATSSwitchBlockMapTable=xATSSwitchBlockMapTable, upsAdvTotalFrameDCCurrent=upsAdvTotalFrameDCCurrent, rPDUOverloadCleared=rPDUOverloadCleared, upsDiagSubSysDisplayInterfaceCardStatus=upsDiagSubSysDisplayInterfaceCardStatus, airIRmPmWinterModeStartTemp=airIRmPmWinterModeStartTemp, airFMSysReheatSetpointF=airFMSysReheatSetpointF, airPAIdent=airPAIdent, cpsSerialPortTermType=cpsSerialPortTermType, airIRRP100GroupStatusDehumidifyOutput=airIRRP100GroupStatusDehumidifyOutput, battManBatteryStatus=battManBatteryStatus, airFMSysReheat=airFMSysReheat, atsStatusInput=atsStatusInput, airIRmPmNumberOfPWWReheat=airIRmPmNumberOfPWWReheat, rPDU2DevicePropertiesName=rPDU2DevicePropertiesName, switchedBypass=switchedBypass, cpsInfoSerialPortTty=cpsInfoSerialPortTty, airFMGroupSysRuntime=airFMGroupSysRuntime, apcDoorLostComms=apcDoorLostComms, xATSACMonitoringPoint=xATSACMonitoringPoint, upsDiagSubSysBattMonitorEntry=upsDiagSubSysBattMonitorEntry, airIRG2RDT2RunHoursAirFilter=airIRG2RDT2RunHoursAirFilter, dcmim2StatusAlarmsEntry=dcmim2StatusAlarmsEntry, dcmim2StatusRectEntry=dcmim2StatusRectEntry, xATSOutputRelayTable=xATSOutputRelayTable, airFMSysInputTable=airFMSysInputTable, rPDU2SensorDiscreteConfigTable=rPDU2SensorDiscreteConfigTable, upsDiagSubSysSystemPowerSupplyStatus=upsDiagSubSysSystemPowerSupplyStatus, upsAdvStateNumberoftimesbypass=upsAdvStateNumberoftimesbypass, airIRG3CMRunHoursFan4=airIRG3CMRunHoursFan4, airIRmAlarmsEventCode=airIRmAlarmsEventCode, sPDUMasterConfigPowerOn=sPDUMasterConfigPowerOn, upsAdvIdentSerialNumber=upsAdvIdentSerialNumber, xATSSwitchStatisticsIndex=xATSSwitchStatisticsIndex, xPDUDataCommMismatchError=xPDUDataCommMismatchError, upsAdvConfigSetEEPROMDefaults=upsAdvConfigSetEEPROMDefaults, airIRmPmPump1ManOpEnable=airIRmPmPump1ManOpEnable, upsDiagSubSysChargerEntry=upsDiagSubSysChargerEntry, airIRRP500GroupConfigReheatGainP=airIRRP500GroupConfigReheatGainP, airIRmPmMaxLimitSupplyAirTemperatureC=airIRmPmMaxLimitSupplyAirTemperatureC, dcmim2StatusRectCurrent=dcmim2StatusRectCurrent, cpsCardIdentTable=cpsCardIdentTable, apCPSversion=apCPSversion, isxModularDistSysOutputVoltageFrequencyTolerance=isxModularDistSysOutputVoltageFrequencyTolerance, airFMStatusSystemAverageRetTempF=airFMStatusSystemAverageRetTempF, airIRG3RDUConfigOnReadyStandby=airIRG3RDUConfigOnReadyStandby, airFMGroupFailoverSysCommLost=airFMGroupFailoverSysCommLost, airIRG3RDUServiceIntervalsRDUID=airIRG3RDUServiceIntervalsRDUID, airFMGroupFailoverMod=airFMGroupFailoverMod, rPDU2OutletSwitchedPropertiesPhaseLayout=rPDU2OutletSwitchedPropertiesPhaseLayout, uioOutputRelayStatusRelayLocation=uioOutputRelayStatusRelayLocation, upsPfcFaultCleared=upsPfcFaultCleared, battManResetDischargeCounters=battManResetDischargeCounters, isxModularDistSysPowerPhaseIndex=isxModularDistSysPowerPhaseIndex, emsAlarmDeviceControlDeviceIndex=emsAlarmDeviceControlDeviceIndex, airIRmPmSensor13Defect=airIRmPmSensor13Defect, airIRmPmEheating3Running=airIRmPmEheating3Running, airFMSysDehumDeadband=airFMSysDehumDeadband, atsOutputCurrent=atsOutputCurrent, xATSOutputRelayNormalState=xATSOutputRelayNormalState, iemStatusProbeLowHumidViolation=iemStatusProbeLowHumidViolation, rPDUStatusBankEntry=rPDUStatusBankEntry, airIRmPmPump4HysteresisK=airIRmPmPump4HysteresisK, airIRRP500UnitStatusFluidValvePosition=airIRRP500UnitStatusFluidValvePosition, airIRRCUnitStatusAirFlowMetric=airIRRCUnitStatusAirFlowMetric, upsOutletGroupConfig=upsOutletGroupConfig, airIRmPmHumidifier2ManOpEnable=airIRmPmHumidifier2ManOpEnable, airFMModRunHours=airFMModRunHours, xATSDeviceTransferSwitchRating=xATSDeviceTransferSwitchRating, airIRmPmDrycooler2Running=airIRmPmDrycooler2Running, sPDUOutletConfigMSPgsTable=sPDUOutletConfigMSPgsTable, xATSOutputVoltageHighAlarmCleared=xATSOutputVoltageHighAlarmCleared, sPDUOutletConfigMSPgsRestartDelay=sPDUOutletConfigMSPgsRestartDelay, iemConfigContactsTable=iemConfigContactsTable, dm3ConfigRectFailComm=dm3ConfigRectFailComm, airFMGroupCfg=airFMGroupCfg, upsInverterFault=upsInverterFault, isxModularDistSysOutputVoltageNominalLineToLine=isxModularDistSysOutputVoltageNominalLineToLine, apCPSSerialHUP=apCPSSerialHUP, iemConfigRelaysTable=iemConfigRelaysTable, bmBatManKneeAlarmCleared=bmBatManKneeAlarmCleared, xATSSwitchStatisticsReset=xATSSwitchStatisticsReset, isxModularDistSubFeedInfoBreakerPosition=isxModularDistSubFeedInfoBreakerPosition, airIRmPmEEV2PressureSensorError=airIRmPmEEV2PressureSensorError, xATSGeneratorAdvStatusOilLevel=xATSGeneratorAdvStatusOilLevel, airFMSysInputStatus=airFMSysInputStatus, airFMSysAlarmMapOutput2=airFMSysAlarmMapOutput2, xATSTestingResultsLastLoadedDuration=xATSTestingResultsLastLoadedDuration, airIRmPmMyZoneEmergencyTemperatureF=airIRmPmMyZoneEmergencyTemperatureF, airIRG3Alarms=airIRG3Alarms, airIRRP500GroupSetpointsReheatUS=airIRRP500GroupSetpointsReheatUS, xATSMisc=xATSMisc, upsDiagSubSysIntBypSwitchStatus=upsDiagSubSysIntBypSwitchStatus, upsDiagSubSysPowerFactorCorrectionIndex=upsDiagSubSysPowerFactorCorrectionIndex, rPDU2GroupTotalPower=rPDU2GroupTotalPower, uioInputContactStatusTableSize=uioInputContactStatusTableSize, upsAdvInputMinLineVoltage=upsAdvInputMinLineVoltage, upsOutletGroupControlIndex=upsOutletGroupControlIndex, airIRRP100UnitThresholdsSupplyAirHighTempUS=airIRRP100UnitThresholdsSupplyAirHighTempUS, airIRmPmDrycooler3ManOpRunning=airIRmPmDrycooler3ManOpRunning, xATSGeneratorOutputTotalPowerFactor=xATSGeneratorOutputTotalPowerFactor, xATSGeneratorAdvStatusCoolantLevel=xATSGeneratorAdvStatusCoolantLevel, airIRmPmEheating2HysteresisF=airIRmPmEheating2HysteresisF, airFMGroupLoadShare=airFMGroupLoadShare, airIRG3GroupConfigNumberofCoolingUnits=airIRG3GroupConfigNumberofCoolingUnits, apcForcedEntry=apcForcedEntry, xATSGeneratorControlSwitchNotAuto=xATSGeneratorControlSwitchNotAuto, dipSwitchStatus=dipSwitchStatus, airIRmPmAuxiliaryAlarm2=airIRmPmAuxiliaryAlarm2, airIRmPmGECWvalveGEOffTemp=airIRmPmGECWvalveGEOffTemp, airFMSysMainsVlt=airFMSysMainsVlt, coolingUnitExtendedDiscrete=coolingUnitExtendedDiscrete, airIRmPmPump1Failure=airIRmPmPump1Failure, memOutletStatusOutletLocation=memOutletStatusOutletLocation, airIRmPmSensor15Defect=airIRmPmSensor15Defect, upsDiagSubSysDCCircuitBreakerIndex=upsDiagSubSysDCCircuitBreakerIndex, bypassPowerSupplyFailure=bypassPowerSupplyFailure, airFMSysAlarmMapOutput12=airFMSysAlarmMapOutput12, airFMStatusModuleEntry=airFMStatusModuleEntry, switchgearBreakerType=switchgearBreakerType, airIRG3RDUStatusDewPointTempMetric=airIRG3RDUStatusDewPointTempMetric, airIRG2RDT2ConfigUnitRoleOverride=airIRG2RDT2ConfigUnitRoleOverride, rPDUBankPhaseOverloadCleared=rPDUBankPhaseOverloadCleared, upsDiagSubSysNetworkComCardFirmwareAppRev=upsDiagSubSysNetworkComCardFirmwareAppRev, matrixUPS3000=matrixUPS3000, airIRmPmReheat1Failure=airIRmPmReheat1Failure, communityString=communityString, upsDiagSubSysDCCircuitBreakerTable=upsDiagSubSysDCCircuitBreakerTable, sPDUMasterStatusVMLowLoadCondition=sPDUMasterStatusVMLowLoadCondition, atsStatusSourceBStatus=atsStatusSourceBStatus, airIRmPmNumberOfCompressors=airIRmPmNumberOfCompressors, emsSensorConfigSensorUserName=emsSensorConfigSensorUserName, airFMGroupFailoverSysAnyMajorAlarm=airFMGroupFailoverSysAnyMajorAlarm, xPDUUPSInputVoltagePhaseTableSize=xPDUUPSInputVoltagePhaseTableSize, isxModularSubfeedMinCurrentThresholdViolation=isxModularSubfeedMinCurrentThresholdViolation, galaxy5000UPS120KVA=galaxy5000UPS120KVA, airFMSysModeDelay=airFMSysModeDelay, mtrapargsIpAddress03=mtrapargsIpAddress03, isxModularDistSubFeedInfoSubIndex=isxModularDistSubFeedInfoSubIndex, galaxy5500UPS130KVA=galaxy5500UPS130KVA, coolingUnitAboutEntry=coolingUnitAboutEntry, airFMGroupLoadShareHumRequests=airFMGroupLoadShareHumRequests, modEnvMgr=modEnvMgr, cpsCardStatusCard=cpsCardStatusCard, cpsSerialPortSniffEsc=cpsSerialPortSniffEsc, dm3ConfigSysHighTempAlarm=dm3ConfigSysHighTempAlarm, msvmOutletConfigChange=msvmOutletConfigChange, rPDU2DeviceConfigLocation=rPDU2DeviceConfigLocation, upsPhaseOutputMinPower=upsPhaseOutputMinPower, airIRmPmSensor13Failure=airIRmPmSensor13Failure, airFMGroupFailoverSysNoSensorsAvailable=airFMGroupFailoverSysNoSensorsAvailable, mtrapargsTimeTicks03=mtrapargsTimeTicks03, iemConfig=iemConfig, cpsSerialPortAuthRetr=cpsSerialPortAuthRetr, xATSGeneratorSettingsMetricUnit=xATSGeneratorSettingsMetricUnit, xATSSwitchTimersTable=xATSSwitchTimersTable, upsDiagSubSysInverterTableSize=upsDiagSubSysInverterTableSize, airFMStatusModuleReturnTempF=airFMStatusModuleReturnTempF, battManUnitStatus=battManUnitStatus, coolingUnitStatusAnalogValue=coolingUnitStatusAnalogValue, extBatteryFrameIncease=extBatteryFrameIncease, airIRmPmPump1=airIRmPmPump1, externalSwitchGearOpened=externalSwitchGearOpened, airIRmPmDrycooler4HysteresisK=airIRmPmDrycooler4HysteresisK, airIRRP100UnitStatusReheatDemand=airIRRP100UnitStatusReheatDemand, upsCommStatus=upsCommStatus, dm3StatusOutRlyTableSize=dm3StatusOutRlyTableSize, rPDUPowerSupply2Ok=rPDUPowerSupply2Ok, isxModularTotalOutputCurrentMinThresholdViolation=isxModularTotalOutputCurrentMinThresholdViolation, receiveTrapType=receiveTrapType, upsHighPrecOutputVoltage=upsHighPrecOutputVoltage, airIRmPmDrycooler3WinterStartTemp=airIRmPmDrycooler3WinterStartTemp, airIRmPmSensor21Defect=airIRmPmSensor21Defect, upsHighPrecOutputEfficiency=upsHighPrecOutputEfficiency)
mibBuilder.exportSymbols("PowerNet-MIB", galaxy7000SSC2000kVA=galaxy7000SSC2000kVA, xATSTestingScheduleFrequency=xATSTestingScheduleFrequency, airIRmPmHumidifier1CurrentValue=airIRmPmHumidifier1CurrentValue, isxModularDistModuleOutputAvailableVoltages=isxModularDistModuleOutputAvailableVoltages, airIRmPmAuxAlarm5=airIRmPmAuxAlarm5, airFMModRHComp2=airFMModRHComp2, airIRmPmPump4StartTemperatureK=airIRmPmPump4StartTemperatureK, subfeedBreakerUpperAcceptPowerWarning=subfeedBreakerUpperAcceptPowerWarning, rARUIdentTable=rARUIdentTable, emsProbeConfigProbeLowTempThresh=emsProbeConfigProbeLowTempThresh, coolingUnitEntry=coolingUnitEntry, battManSystemPilotBatteryHighTempAlarm=battManSystemPilotBatteryHighTempAlarm, emsInputContactStatusInputContactState=emsInputContactStatusInputContactState, isxModularDistSubFeedInfoAlarmHighEnable=isxModularDistSubFeedInfoAlarmHighEnable, airIRRP100UnitIdentSerialNumber=airIRRP100UnitIdentSerialNumber, coolingUnitStatusAnalogDescription=coolingUnitStatusAnalogDescription, upsHighPrecBatteryCurrentPolarity=upsHighPrecBatteryCurrentPolarity, rPDU2IdentModelNumber=rPDU2IdentModelNumber, emsSensorConfig=emsSensorConfig, upsDiagSubSysXRCommunicationCardFirmwareRev=upsDiagSubSysXRCommunicationCardFirmwareRev, airIRmPmEheating4Running=airIRmPmEheating4Running, emsOutputRelayControlOutputRelayCommand=emsOutputRelayControlOutputRelayCommand, xATSSwitchBlockMapEntry=xATSSwitchBlockMapEntry, rPDULoad=rPDULoad, airFMGroupFailoverModLowSupplyTemp=airFMGroupFailoverModLowSupplyTemp, xATSIdentHardwareRev=xATSIdentHardwareRev, airIRG2GroupSetpoints=airIRG2GroupSetpoints, airIRRP100GroupConfigCoolGainP=airIRRP100GroupConfigCoolGainP, airIRmPmPump1HysteresisF=airIRmPmPump1HysteresisF, airIRRP100UnitConfigInputNormalState=airIRRP100UnitConfigInputNormalState, dcmim2ConfigBattFunctTestThresh=dcmim2ConfigBattFunctTestThresh, airIRmPmUnitEvaporationTemperature1C=airIRmPmUnitEvaporationTemperature1C, rPDU2SensorTempHumidityStatusName=rPDU2SensorTempHumidityStatusName, iemConfigContactEnable=iemConfigContactEnable, upsDiagSwitchgearSerialNumber=upsDiagSwitchgearSerialNumber, battManInputContactStatus=battManInputContactStatus, airIRG2GroupStatusMinRackInletTempUS=airIRG2GroupStatusMinRackInletTempUS, pduUtilityLineOvervoltageCleared=pduUtilityLineOvervoltageCleared, airIRG3GroupStatusAvgFanSpeed=airIRG3GroupStatusAvgFanSpeed, contactNumber=contactNumber, pduCircuitPanelInputOvervoltage=pduCircuitPanelInputOvervoltage, battManInputContactName=battManInputContactName, upsOutletGroupConfigTableSize=upsOutletGroupConfigTableSize, airIRRP500GroupStatusDewPointTempUS=airIRRP500GroupStatusDewPointTempUS, coolingUnitStatusDiscreteTableIndex=coolingUnitStatusDiscreteTableIndex, battManString1BatteryCalibEntry=battManString1BatteryCalibEntry, dm3StatusSysConvVoltSanity=dm3StatusSysConvVoltSanity, emsSensorStatusSensorIndex=emsSensorStatusSensorIndex, airIRmPmSupplyAirHumidityTooLow=airIRmPmSupplyAirHumidityTooLow, dm3ConfigRectHighVoltAlarm=dm3ConfigRectHighVoltAlarm, dm3ConfigConv1ofNAlarm=dm3ConfigConv1ofNAlarm, battManString1BatteryCalibTableSize=battManString1BatteryCalibTableSize, upsAdvBattery=upsAdvBattery, temperatureThresholdViolation2=temperatureThresholdViolation2, eps7000SSC=eps7000SSC, cpsInfoSerialPortSigRTS=cpsInfoSerialPortSigRTS, rPDU2OutletMeteredStatusNumber=rPDU2OutletMeteredStatusNumber, upsDiagSwitchGearBreakerEntry=upsDiagSwitchGearBreakerEntry, airIRmPmPump1ControlCycle=airIRmPmPump1ControlCycle, xATSSource1PhaseEntry=xATSSource1PhaseEntry, dm3StatusSysAlarmState=dm3StatusSysAlarmState, memModulesStatusEntry=memModulesStatusEntry, atsOutputBankTable=atsOutputBankTable, moduleVersion=moduleVersion, upsPhaseInput=upsPhaseInput, mfiletransferConfig=mfiletransferConfig, battManString2BatteryLowestVoltage=battManString2BatteryLowestVoltage, airFMSysAlarmMapSysRemSensRemoved=airFMSysAlarmMapSysRemSensRemoved, battManString2BatteryHighOhmicValue=battManString2BatteryHighOhmicValue, dcMinorAlarm=dcMinorAlarm, dm3StatusRectID=dm3StatusRectID, xATSGeneratorServiceEngineStartsSinceMaintenance=xATSGeneratorServiceEngineStartsSinceMaintenance, isxModularDistSysOutputVoltageThresholdHigh=isxModularDistSysOutputVoltageThresholdHigh, airFMModServIntHeater=airFMModServIntHeater, smartRelayFault=smartRelayFault, xATSGeneratorAdvStatusCoolantTemperature=xATSGeneratorAdvStatusCoolantTemperature, airIRG3CMRunHoursCMID=airIRG3CMRunHoursCMID, upsSideCarFrameLayoutTableSize=upsSideCarFrameLayoutTableSize, airIRG3CMConfigTable=airIRG3CMConfigTable, battManString1OhmicValueEntry=battManString1OhmicValueEntry, airIRmPmHumidifier2StartHumidity=airIRmPmHumidifier2StartHumidity, rPDU2PhaseStatusCurrent=rPDU2PhaseStatusCurrent, dipSwitchIndex=dipSwitchIndex, airIRmPmMaxLimitWaterTemperatureF=airIRmPmMaxLimitWaterTemperatureF, airIRG3RDUConfigByPassValveEnabled=airIRG3RDUConfigByPassValveEnabled, upsHighPrecOutputEnergyUsage=upsHighPrecOutputEnergyUsage, rPDUBankPhaseLowLoadCleared=rPDUBankPhaseLowLoadCleared, rPDULoadBankConfigNearOverloadThreshold=rPDULoadBankConfigNearOverloadThreshold, dcmim2ConfigLVDTableSize=dcmim2ConfigLVDTableSize, upsAdvBatteryCurrentEntry=upsAdvBatteryCurrentEntry, xATSGeneratorServiceCalendarIntervalThreshold=xATSGeneratorServiceCalendarIntervalThreshold, upsDiagSubSysExternalSwitchGearTable=upsDiagSubSysExternalSwitchGearTable, airFMSysAlarmMapMainModHumFail=airFMSysAlarmMapMainModHumFail, airIRRCUnitRunHoursFan6=airIRRCUnitRunHoursFan6, isxModularTotalOutputCurrentMinThresholdViolationCleared=isxModularTotalOutputCurrentMinThresholdViolationCleared, rPDU2DeviceConfigOverloadPowerThreshold=rPDU2DeviceConfigOverloadPowerThreshold, airIRmPmHumidifier2Runtime=airIRmPmHumidifier2Runtime, emsProbeConfigProbeLTIncTempTime=emsProbeConfigProbeLTIncTempTime, rPDU2IdentTableSize=rPDU2IdentTableSize, dm3IdentSysModel=dm3IdentSysModel, airFMIdentLocation=airFMIdentLocation, airIRmPmSensor20Defect=airIRmPmSensor20Defect, xATSGeneratorFuelSystemLowRunTimeThreshold=xATSGeneratorFuelSystemLowRunTimeThreshold, symmetra3PhaseUPS=symmetra3PhaseUPS, envMinHumidityThresholdViolation=envMinHumidityThresholdViolation, upsOutletGroupControlName=upsOutletGroupControlName, iemConfigProbeNumber=iemConfigProbeNumber, airIRRP100UnitStatusReheatOutput=airIRRP100UnitStatusReheatOutput, xATSSource2Frequency=xATSSource2Frequency, upsAdvBatteryTemperature=upsAdvBatteryTemperature, emsSensorControl=emsSensorControl, mtrapargsOctetString05=mtrapargsOctetString05, xPDUOutputRelayCurrentState=xPDUOutputRelayCurrentState, airFMModule=airFMModule, rPDU2BankConfigModule=rPDU2BankConfigModule, isxModularDistSubFeedInfoThresholdHigh=isxModularDistSubFeedInfoThresholdHigh, infraStruXurePDU=infraStruXurePDU, emConfigProbesEntry=emConfigProbesEntry, upsDiagSubSysXRCommunicationCardStatus=upsDiagSubSysXRCommunicationCardStatus, atsConfigCurrentLimit=atsConfigCurrentLimit, coolingUnitTable=coolingUnitTable, airIRRP500UnitStatusSupplyAirTempUS=airIRRP500UnitStatusSupplyAirTempUS, isxModularDistSysPowerTotal=isxModularDistSysPowerTotal, iemConfigProbeLowHumidEnable=iemConfigProbeLowHumidEnable, xATSGeneratorService=xATSGeneratorService, battManString1ResponseTestCurrentTable=battManString1ResponseTestCurrentTable, upsLocalDisplayButtonFault=upsLocalDisplayButtonFault, airIRmPmEheating3Runtime=airIRmPmEheating3Runtime, emsStatusSysTempUnits=emsStatusSysTempUnits, upsParallelInputActivePower=upsParallelInputActivePower, uioSensorStatusCommStatus=uioSensorStatusCommStatus, iemStatusProbeMaxTempViolation=iemStatusProbeMaxTempViolation, upsAdvBatteryCurrent=upsAdvBatteryCurrent, sPDUMasterConfigVMOverloadRestriction=sPDUMasterConfigVMOverloadRestriction, switchgearBreakerPresent=switchgearBreakerPresent, xPDUBypassVoltageLowAlarm=xPDUBypassVoltageLowAlarm, airIRmPmNumberOfPumps=airIRmPmNumberOfPumps, dm3StatusBreakersIndex=dm3StatusBreakersIndex, upsOutletGroupTurnedOn=upsOutletGroupTurnedOn, coolingUnitConfigurationDiscreteAccess=coolingUnitConfigurationDiscreteAccess, airIRG2RDT2ConfigUnitIdleOnCoolFail=airIRG2RDT2ConfigUnitIdleOnCoolFail, isxModularDistSubFeedInfoThresholdMax=isxModularDistSubFeedInfoThresholdMax, rPDU2DevicePropertiesNumPhases=rPDU2DevicePropertiesNumPhases, airFMSysAlarmMapExpMod1HighSupplyTemp=airFMSysAlarmMapExpMod1HighSupplyTemp, airFMSysAlarmMapMainModWaterDetected=airFMSysAlarmMapMainModWaterDetected, airFMSysAlarmMapExpMod2CoolFail=airFMSysAlarmMapExpMod2CoolFail, emsInputContactStateNormal=emsInputContactStateNormal, airIRSCGroupStatusMinRackInletTempMetric=airIRSCGroupStatusMinRackInletTempMetric, dm3ConfigBattHighVoltThresh=dm3ConfigBattHighVoltThresh, apcEnvMaxHumidityThresholdViolationCleared=apcEnvMaxHumidityThresholdViolationCleared, battManString1BatteryHighOhmicValue=battManString1BatteryHighOhmicValue, airFMSysHumSensBand=airFMSysHumSensBand, airFMModBlwr1InverterTempF=airFMModBlwr1InverterTempF, upsParallelOutputPhaseIndex=upsParallelOutputPhaseIndex, upsDiagSubSysFrameType=upsDiagSubSysFrameType, airIRmPmSensor7Failure=airIRmPmSensor7Failure, airIRG3RDURunHoursPowerSupply2=airIRG3RDURunHoursPowerSupply2, isxModularDistSubFeedLoadingTable=isxModularDistSubFeedLoadingTable, airIRRP500UnitStatusHumidifyOutput=airIRRP500UnitStatusHumidifyOutput, iemConfigProbeMinTempEnable=iemConfigProbeMinTempEnable, airIRmPmGECWvalveStartTemperatureK=airIRmPmGECWvalveStartTemperatureK, airFMModDischPresKPa=airFMModDischPresKPa, upsDiagSubSysBattMonitorTableSize=upsDiagSubSysBattMonitorTableSize, xPDUSystemOutputUnderCurrentThreshold=xPDUSystemOutputUnderCurrentThreshold, atsLowLoad=atsLowLoad, pduCircuitPanelInputOvercurrent=pduCircuitPanelInputOvercurrent, rPDULoadBankConfigOverloadThreshold=rPDULoadBankConfigOverloadThreshold, airFMSysAlarmMapExpMod2AnyAlarm=airFMSysAlarmMapExpMod2AnyAlarm, airIRRP100GroupSetpointsFanSpeedControl=airIRRP100GroupSetpointsFanSpeedControl, airIRG3RDUConfigOutputNormalState=airIRG3RDUConfigOutputNormalState, memBeaconStatusEntry=memBeaconStatusEntry, xATSGeneratorVeryHighCoolantTempAlarmCleared=xATSGeneratorVeryHighCoolantTempAlarmCleared, airIRRP500GroupConfigRuntimeBalancingEnable=airIRRP500GroupConfigRuntimeBalancingEnable, batteryOverTemperature=batteryOverTemperature, airIRG3CMThresholdsDeviceIndex=airIRG3CMThresholdsDeviceIndex, battManSystemAmbientLowTempAlarm=battManSystemAmbientLowTempAlarm, rPDU2PhaseStatusPeakCurrentTimestamp=rPDU2PhaseStatusPeakCurrentTimestamp, xATSGeneratorOutputPhaseEntry=xATSGeneratorOutputPhaseEntry, airFMSysMaxRemoteTempF=airFMSysMaxRemoteTempF, rPDUOutletOn=rPDUOutletOn, mfiletransferConfigFTPServerPassword=mfiletransferConfigFTPServerPassword, upsDiagSubSysIntBypSwitchFirmwareRev=upsDiagSubSysIntBypSwitchFirmwareRev, rPDU2BankPropertiesTable=rPDU2BankPropertiesTable, powerNetSoftwareSystemUpTime=powerNetSoftwareSystemUpTime, airIRG3CMThresholdsSupplyAirTempHighMetric=airIRG3CMThresholdsSupplyAirTempHighMetric, upsDiagSubSysDisplayInterfaceCardIndex=upsDiagSubSysDisplayInterfaceCardIndex, airIRmPmCmp2StartTempSummer=airIRmPmCmp2StartTempSummer, atsPowerSupplyFailure=atsPowerSupplyFailure, xPDUMainInputVoltageTableSize=xPDUMainInputVoltageTableSize, xATSEpoTestMode=xATSEpoTestMode, atsOutputPower=atsOutputPower, airIRRP100GroupStatusReheatDemand=airIRRP100GroupStatusReheatDemand, airFMSysInputNormalState=airFMSysInputNormalState, xATSStopFailure=xATSStopFailure, emsConfigCheckLogLight=emsConfigCheckLogLight, dcmim2StatusBattTemp=dcmim2StatusBattTemp, airFMSysLowCtrlTempC=airFMSysLowCtrlTempC, isxcInformationalAlarmCleared=isxcInformationalAlarmCleared, airIRmPmPump1MaxAdjust=airIRmPmPump1MaxAdjust, dcmim2StatusLVDEntry=dcmim2StatusLVDEntry, airIRG3CMStatusVaporOutletPressureMetric=airIRG3CMStatusVaporOutletPressureMetric, sPDUIdentVM=sPDUIdentVM, upsOutletGroupConfigMinReturnRuntime=upsOutletGroupConfigMinReturnRuntime, smartUPS1500=smartUPS1500, dm3StatusRectEntry=dm3StatusRectEntry, upsAdvIdentDateOfManufacture=upsAdvIdentDateOfManufacture, upsPhaseInputApparentPower=upsPhaseInputApparentPower, xPDUSystemOutputTableSize=xPDUSystemOutputTableSize, coolingUnitStatus=coolingUnitStatus, coolingUnitTableIndex=coolingUnitTableIndex, upsSCGACInputStatus=upsSCGACInputStatus, emsSensorStatusSensorState=emsSensorStatusSensorState, rPDUOutletPhaseEntry=rPDUOutletPhaseEntry, dcMainsFailAlarm=dcMainsFailAlarm, upsAdvStateSymmetra3PhaseSpecificFaults=upsAdvStateSymmetra3PhaseSpecificFaults, xATSSource2PhaseTable=xATSSource2PhaseTable, dcmim2StatusRectDevType=dcmim2StatusRectDevType, rpduCriticalCondition=rpduCriticalCondition, sPDUMasterConfigVMEntry=sPDUMasterConfigVMEntry, upsAdvTestLastDiagnosticsDate=upsAdvTestLastDiagnosticsDate, airIRmPmHumidifier3Alarm20us=airIRmPmHumidifier3Alarm20us, airIRRCGroupStatusAirFlowUS=airIRRCGroupStatusAirFlowUS, airIRmPmPump4ManOpRunning=airIRmPmPump4ManOpRunning, rPDU2SensorDiscreteStatusIndex=rPDU2SensorDiscreteStatusIndex, coolingUnitExtendedString=coolingUnitExtendedString, airFMSysAlarmMapSysHighEnvHum=airFMSysAlarmMapSysHighEnvHum, xATSSwitchTimersDelaySetting=xATSSwitchTimersDelaySetting, airFMGroupSysRole=airFMGroupSysRole, airFMGroupFailoverModHumReplaceCylinder=airFMGroupFailoverModHumReplaceCylinder, xPDUInputContactTableSize=xPDUInputContactTableSize, xATSS1BadPhaseRotation=xATSS1BadPhaseRotation, upsDiagSubSysPowerFactorCorrectionManufactureDate=upsDiagSubSysPowerFactorCorrectionManufactureDate, accessPXStatusFrontDoorAlarmStatus=accessPXStatusFrontDoorAlarmStatus, rPDU2DeviceStatusApparentPower=rPDU2DeviceStatusApparentPower, rPDU2BankStatusPeakCurrentStartTime=rPDU2BankStatusPeakCurrentStartTime, airFMModRHHumReset=airFMModRHHumReset, memOutputNormalState=memOutputNormalState, airIRmPmSensor17Failure=airIRmPmSensor17Failure, airIRG2RDT2StatusSuctionPressureMetric=airIRG2RDT2StatusSuctionPressureMetric, cpsSerialPortAuthSecret=cpsSerialPortAuthSecret, isxModularOutputVoltageLowThresholdViolation=isxModularOutputVoltageLowThresholdViolation, airFMSysAlarmMapOutput7=airFMSysAlarmMapOutput7, airIRmPmEheating1Runtime=airIRmPmEheating1Runtime, xPDUNumOfBranchBreakers=xPDUNumOfBranchBreakers, atsOutputBankMaxCurrent=atsOutputBankMaxCurrent, eps7000FreqConverter=eps7000FreqConverter, ceInformationalConditionCleared=ceInformationalConditionCleared, upsDiagPMEntry=upsDiagPMEntry, airIRmPmPump1Hysteresis=airIRmPmPump1Hysteresis, rPDUStatus=rPDUStatus, upsDiagBatteryFramePresent=upsDiagBatteryFramePresent, atsConfigLineVRMSWideLimit=atsConfigLineVRMSWideLimit, airIRRP100UnitRunHoursFan2=airIRRP100UnitRunHoursFan2, upsAdvConfigReturnDelay=upsAdvConfigReturnDelay)
mibBuilder.exportSymbols("PowerNet-MIB", airIRRP100UnitStatusRackInletTemperature1Metric=airIRRP100UnitStatusRackInletTemperature1Metric, airIRmPmDrycooler2HysteresisF=airIRmPmDrycooler2HysteresisF, emConfigContactLocation=emConfigContactLocation, galaxy5500UPS100KVA=galaxy5500UPS100KVA, upsAdvTotalDCCurrentEntry=upsAdvTotalDCCurrentEntry, battManString2BatteryThermalRunaway=battManString2BatteryThermalRunaway, airIRRCUnitThresholdsSupplyAirHighTempUS=airIRRCUnitThresholdsSupplyAirHighTempUS, sPDUMasterStatusVMTableSize=sPDUMasterStatusVMTableSize, memInputsStatusCurrentState=memInputsStatusCurrentState, upsAdvTotalDCCurrentTable=upsAdvTotalDCCurrentTable, xPDUBranchCurrentHighAlarmCleared=xPDUBranchCurrentHighAlarmCleared, upsHighPrecOutputCurrent=upsHighPrecOutputCurrent, serialPort2Config=serialPort2Config, airFMModBlwr1Entry=airFMModBlwr1Entry, airIRG3CMConfigPowerSource=airIRG3CMConfigPowerSource, airIRRP500GroupConfigHumidifySensitivityBand=airIRRP500GroupConfigHumidifySensitivityBand, isxcStandard=isxcStandard, rPDUIdentHardwareRev=rPDUIdentHardwareRev, apcEnvMinHumidityThresholdViolation=apcEnvMinHumidityThresholdViolation, pduSystemOff=pduSystemOff, cpsCardIdentPCI=cpsCardIdentPCI, mconfigTrapReceiverEntry=mconfigTrapReceiverEntry, xATSSwitchBlockMapIndex=xATSSwitchBlockMapIndex, sPDUOutletConfigMSPgsDeviceConfirm=sPDUOutletConfigMSPgsDeviceConfirm, envLowTempThresholdViolation=envLowTempThresholdViolation, dcmim2StatusAlarmsTable=dcmim2StatusAlarmsTable, eps8000UPSWithSSC=eps8000UPSWithSSC, sPDUIdentDateOfManufactureVM=sPDUIdentDateOfManufactureVM, coolingUnitExtendedAnalogUnits=coolingUnitExtendedAnalogUnits, battManStringStatus=battManStringStatus, upsHighPrecBattery=upsHighPrecBattery, emsOutputRelayConfigOutputRelayName=emsOutputRelayConfigOutputRelayName, airFMGroupSysRoleStatus=airFMGroupSysRoleStatus, airFMModBlwr1ElOvSetting=airFMModBlwr1ElOvSetting, apcBeaconOff=apcBeaconOff, rsSourceSwitched=rsSourceSwitched, airIRG3GroupStatusAirFlowMetric=airIRG3GroupStatusAirFlowMetric, xATSGeneratorEStopCleared=xATSGeneratorEStopCleared, iemStatusProbeHighTempViolation=iemStatusProbeHighTempViolation, airFMModRHTable=airFMModRHTable, xATSTestingStatusTestStatus=xATSTestingStatusTestStatus, isxModularDistModuleBreakerPosition=isxModularDistModuleBreakerPosition, battManUnitStatusTable=battManUnitStatusTable, upsAdvControlBypassSwitch=upsAdvControlBypassSwitch, atsConfigBankLowLoadThreshold=atsConfigBankLowLoadThreshold, emConfigProbeTempUnits=emConfigProbeTempUnits, airFMModPropEntry=airFMModPropEntry, sPDUOutletConfigMSPgsLowBattWarning=sPDUOutletConfigMSPgsLowBattWarning, airFMSysElectricReheatDmd=airFMSysElectricReheatDmd, airFMIdentTable=airFMIdentTable, airFMModRHBlwr1Reset=airFMModRHBlwr1Reset, iemConfigProbeLowTempEnable=iemConfigProbeLowTempEnable, rPDUOutletConfigOutletPhase=rPDUOutletConfigOutletPhase, rPDUOutletConfig=rPDUOutletConfig, airIRRCUnitRunHoursCondensatePump=airIRRCUnitRunHoursCondensatePump, atsOverloadCleared=atsOverloadCleared, serialPort2Mode=serialPort2Mode, apcLocalDisplay=apcLocalDisplay, airIRmPmControllerType=airIRmPmControllerType, xATSOutputRelayName=xATSOutputRelayName, isxModularDistSysOutputVoltageAlarmMinEnable=isxModularDistSysOutputVoltageAlarmMinEnable, upsAdvStateTotaltimeonNormal=upsAdvStateTotaltimeonNormal, rARUStatusAruTemp2=rARUStatusAruTemp2, airIRRP500UnitRunHours=airIRRP500UnitRunHours, uioSensorStatusTableSize=uioSensorStatusTableSize, envSTIncTempRateViolationCleared=envSTIncTempRateViolationCleared, xPDUInputContactNumber=xPDUInputContactNumber, airIRRP500UnitConfigStartupDelay=airIRRP500UnitConfigStartupDelay, sPDUIdentHardwareRev=sPDUIdentHardwareRev, rPDULoadPhaseConfigIndex=rPDULoadPhaseConfigIndex, dm3StatusInRlyTableSize=dm3StatusInRlyTableSize, airIRG3RDUConfigInputNormalState=airIRG3RDUConfigInputNormalState, airFMSysInputIndex=airFMSysInputIndex, airIRRP500UnitStatusDehumidifyDemand=airIRRP500UnitStatusDehumidifyDemand, xATSGeneratorVeryLowCoolantLevelAlarm=xATSGeneratorVeryLowCoolantLevelAlarm, airIRmPmLouver1ManOpPosition=airIRmPmLouver1ManOpPosition, dcmim2ConfigLVDTable=dcmim2ConfigLVDTable, atsConfigFrontPanelLockout=atsConfigFrontPanelLockout, upsDiagComBusMIMtoRIMStatus=upsDiagComBusMIMtoRIMStatus, xPDUMiscGroup=xPDUMiscGroup, airFMSysAlarmMapSysPrimSensFail=airFMSysAlarmMapSysPrimSensFail, atsCalibrationOutputTableIndex=atsCalibrationOutputTableIndex, sPDUMasterStatusMSPOutletCount=sPDUMasterStatusMSPOutletCount, dm3ConfigBreakers=dm3ConfigBreakers, xATSSwitchSettingsNominalRotation=xATSSwitchSettingsNominalRotation, airIRmPmPWWHeatingStartTempF=airIRmPmPWWHeatingStartTempF, sPDUMasterConfigVMColdstartDelay=sPDUMasterConfigVMColdstartDelay, xATSOutputRelayCurrentState=xATSOutputRelayCurrentState, dp300E=dp300E, xATSGeneratorLowBatteryVolt=xATSGeneratorLowBatteryVolt, system=system, rARUPowerStatusPrimaryAcPresent=rARUPowerStatusPrimaryAcPresent, upsOutletGroupStatusGroupState=upsOutletGroupStatusGroupState, airFMModBlwr2RatedHorsePower=airFMModBlwr2RatedHorsePower, rARUSensorsLocation=rARUSensorsLocation, dcmim2StatusRectIndex=dcmim2StatusRectIndex, airFMStatusSystemRemoteHighTempC=airFMStatusSystemRemoteHighTempC, iemConfigProbeMaxHumidThreshold=iemConfigProbeMaxHumidThreshold, battManString1OhmicValueLastDischargeInfo=battManString1OhmicValueLastDischargeInfo, xATSSwitchTimers=xATSSwitchTimers, airIRmPmDrycooler1SummerStartTemp=airIRmPmDrycooler1SummerStartTemp, upsDiagIMIndex=upsDiagIMIndex, sPDUOutletConfigMSPgsRebootDuration=sPDUOutletConfigMSPgsRebootDuration, airIRmPmDrycooler2ManOpRunning=airIRmPmDrycooler2ManOpRunning, rARUSensorsTempLongIncRateThreshValue=rARUSensorsTempLongIncRateThreshValue, uioSensorStatusHumidity=uioSensorStatusHumidity, uioOutputRelayStatusPortID=uioOutputRelayStatusPortID, atsIdentNominalLineVoltage=atsIdentNominalLineVoltage, coolingUnitStatusDiscreteIntegerReferenceKey=coolingUnitStatusDiscreteIntegerReferenceKey, airFMSysReheatPIDResetRateI=airFMSysReheatPIDResetRateI, airIRmPmFan2ManOpSpeed=airIRmPmFan2ManOpSpeed, memInputsStatusInputLocation=memInputsStatusInputLocation, xPDUSystemOutputPhaseIndex=xPDUSystemOutputPhaseIndex, airFMSysHumCtrlSetting=airFMSysHumCtrlSetting, softwareBypass=softwareBypass, xATSDeviceDCBackUpPresent=xATSDeviceDCBackUpPresent, airFMSysAlarmMapExpMod2HighFltrDP=airFMSysAlarmMapExpMod2HighFltrDP, dm3StatusSysRectType=dm3StatusSysRectType, automaticXferSwitch=automaticXferSwitch, xATSGeneratorOutputBreakerOpen=xATSGeneratorOutputBreakerOpen, upsAdvConfigShutoffDelay=upsAdvConfigShutoffDelay, airIRRCUnitRunHours=airIRRCUnitRunHours, upsDiagSubSysDisplayInterfaceCardFrameIndex=upsDiagSubSysDisplayInterfaceCardFrameIndex, galaxy300UPS20kVA31=galaxy300UPS20kVA31, isxModularLowCurrentThresholdViolationCleared=isxModularLowCurrentThresholdViolationCleared, upsAdvConfigWarningAlarmDelay=upsAdvConfigWarningAlarmDelay, iemStatusContactsEntry=iemStatusContactsEntry, coolingUnitStatusDiscrete=coolingUnitStatusDiscrete, sPDUOutletStatusMSPOutletState=sPDUOutletStatusMSPOutletState, airFMSysHumSetpoint=airFMSysHumSetpoint, dm3ConfigBattHwCurrentAlarm=dm3ConfigBattHwCurrentAlarm, rPDUOutletConfigMonitoredName=rPDUOutletConfigMonitoredName, msvmPowerSupplyStatusChange=msvmPowerSupplyStatusChange, upsOscillatorFailed=upsOscillatorFailed, smartUPS5000=smartUPS5000, emsOutletControlOutletName=emsOutletControlOutletName, atsOutputBank=atsOutputBank, dcmim2ConfigBattType=dcmim2ConfigBattType, airIRmPmMyZoneNumberOfErrorUnits=airIRmPmMyZoneNumberOfErrorUnits, dm3StatusOutRlyStatus=dm3StatusOutRlyStatus, rPDU2OutletSwitched=rPDU2OutletSwitched, airIRRP100GroupConfigNumberofBackupUnits=airIRRP100GroupConfigNumberofBackupUnits, isxModularOutputVoltageMaxThresholdViolationCleared=isxModularOutputVoltageMaxThresholdViolationCleared, rPDU2OutletMeteredConfigNumber=rPDU2OutletMeteredConfigNumber, dcmim2ConfigSysLowTempTrip=dcmim2ConfigSysLowTempTrip, airIRG3GroupConfigNumberofBackupUnits=airIRG3GroupConfigNumberofBackupUnits, airIRRP500UnitRunHoursHumidifier=airIRRP500UnitRunHoursHumidifier, airIRRP100UnitRunHoursHeater1=airIRRP100UnitRunHoursHeater1, upsAdvBatteryActualVoltagePolarity=upsAdvBatteryActualVoltagePolarity, rPDU2BankConfigOverloadRestriction=rPDU2BankConfigOverloadRestriction, coolingUnitConfigurationAnalogDescription=coolingUnitConfigurationAnalogDescription, airIRmPmMyZoneSupplyHumidity=airIRmPmMyZoneSupplyHumidity, dm3ConfigConvHighVoltAlarm=dm3ConfigConvHighVoltAlarm, sPDUOutletConfigTable=sPDUOutletConfigTable, mtrapargsOctetString03=mtrapargsOctetString03, airIRmPmDrycooler4WinterStartTemp=airIRmPmDrycooler4WinterStartTemp, atsNumOutputs=atsNumOutputs, atsCalibrationInput=atsCalibrationInput, airIRG3GroupStatusMaxRackInletTempUS=airIRG3GroupStatusMaxRackInletTempUS, xATSGeneratorFuelSystemTankSize=xATSGeneratorFuelSystemTankSize, emsStatusOutletCount=emsStatusOutletCount, xPDUOutputRelayName=xPDUOutputRelayName, coolingUnitExtendedStringDescription=coolingUnitExtendedStringDescription, emsIdentDateOfManufacture=emsIdentDateOfManufacture, aruRedundantPowerLostAlarm=aruRedundantPowerLostAlarm, airIRmPmResetAllAlarms=airIRmPmResetAllAlarms, iemConfigProbeMaxHumidEnable=iemConfigProbeMaxHumidEnable, emsOutletControlTable=emsOutletControlTable, galaxy9000UPSWithSSC=galaxy9000UPSWithSSC, upsParallelSysRedundancy=upsParallelSysRedundancy, rARUStatusAruAlarmState=rARUStatusAruAlarmState, airIRRP500UnitConfigIdleOnCoolFail=airIRRP500UnitConfigIdleOnCoolFail, rPDU2OutletMeteredConfigName=rPDU2OutletMeteredConfigName, battManString2OhmicValueLastDischargeInfo=battManString2OhmicValueLastDischargeInfo, airIRmPmPump2Runtime=airIRmPmPump2Runtime, upsPhaseInputMaxVoltage=upsPhaseInputMaxVoltage, apcLogicPowerSupplyFault=apcLogicPowerSupplyFault, galaxy5000UPS50KVA=galaxy5000UPS50KVA, airIRmPmMyZoneEmergencyTemperatureC=airIRmPmMyZoneEmergencyTemperatureC, upsOnBattery=upsOnBattery, airFMAlarmSeverity=airFMAlarmSeverity, airIRRP500GroupConfigLoadAssistEnable=airIRRP500GroupConfigLoadAssistEnable, emConfigProbeMinHumidEnable=emConfigProbeMinHumidEnable, cpsSerialPortSttyCmd=cpsSerialPortSttyCmd, memOutputStatusOutputName=memOutputStatusOutputName, emsProbeStatusProbeMaxHumidityThresh=emsProbeStatusProbeMaxHumidityThresh, airFMSysStartupDelay=airFMSysStartupDelay, airIRSCUnitRunHoursFanPowerSupplyRight=airIRSCUnitRunHoursFanPowerSupplyRight, rPDU2OutletSwitchedStatusName=rPDU2OutletSwitchedStatusName, chargerFailureCleared=chargerFailureCleared, airIRmPmCompressor1=airIRmPmCompressor1, aruHighTemperatureAlarm=aruHighTemperatureAlarm, upsAdvConfigACWiringSetting=upsAdvConfigACWiringSetting, uioOutputRelayStatusRelayID=uioOutputRelayStatusRelayID, restartAgent=restartAgent, airFMAlarmConditionsEntry=airFMAlarmConditionsEntry, coolingUnitStatusDiscreteTableSize=coolingUnitStatusDiscreteTableSize, emsDeviceConfigChange=emsDeviceConfigChange, accessPXIdentHardwareRev=accessPXIdentHardwareRev, accessPXConfigFrontDoorLockControl=accessPXConfigFrontDoorLockControl, airIRRCUnitStatusReturnAirTempUS=airIRRCUnitStatusReturnAirTempUS, airIRRP500UnitServiceIntervalAirFilter=airIRRP500UnitServiceIntervalAirFilter, airPAIdentName=airPAIdentName, smartUPS3Phase40kVA=smartUPS3Phase40kVA, airIRRP100UnitServiceIntervalFans=airIRRP100UnitServiceIntervalFans, airIRmPmHumidifier2ManOpValue=airIRmPmHumidifier2ManOpValue, airIRG2GroupStatus=airIRG2GroupStatus, atsRMSUnderFrequencyCleared=atsRMSUnderFrequencyCleared, xPDUDeviceLoadTieBreakerPresent=xPDUDeviceLoadTieBreakerPresent, sPDUOutletConfigMSPallOutletCtrlMode=sPDUOutletConfigMSPallOutletCtrlMode, airFMSysDehumPIDMethod=airFMSysDehumPIDMethod, airIRG3RDUServiceIntervalsAirFilterAlarm=airIRG3RDUServiceIntervalsAirFilterAlarm, airIRRP500UnitThresholdsEnteringFluidHighTempMetric=airIRRP500UnitThresholdsEnteringFluidHighTempMetric, upsBasicConfig=upsBasicConfig, xPDUBranchBreakerEntry=xPDUBranchBreakerEntry, airFMModIdentModuleIndex=airFMModIdentModuleIndex, airIRmPmErrorOnBus=airIRmPmErrorOnBus, smartUPS700=smartUPS700, upsBatteryOverVoltageCleared=upsBatteryOverVoltageCleared, rPDU2SensorTempHumidityStatusNumber=rPDU2SensorTempHumidityStatusNumber, airFMSysAlarmMapSysSmokeDet=airFMSysAlarmMapSysSmokeDet, airFMModSmokeDetector=airFMModSmokeDetector, mfiletransferConfigTFTPServerAddress=mfiletransferConfigTFTPServerAddress, dm3ConfigLVDHWAlarm=dm3ConfigLVDHWAlarm, isxModularDistSysOutputVoltageThresholdMax=isxModularDistSysOutputVoltageThresholdMax, dm3ConfigConvStandbyAlarm=dm3ConfigConvStandbyAlarm, upsAdvBatteryCurrentPolarity=upsAdvBatteryCurrentPolarity, upsDiagSwitchGearBreakerTable=upsDiagSwitchGearBreakerTable, coolingUnitTableSize=coolingUnitTableSize, battManString2OhmicValueIndex=battManString2OhmicValueIndex, accessPXStatusRear=accessPXStatusRear, isxModularPduTransformerTempStatus=isxModularPduTransformerTempStatus, dm3StatusFusesIndex=dm3StatusFusesIndex, accessPXStatusFrontDoorHandle=accessPXStatusFrontDoorHandle, airIRRP500GroupSetpointsSupplyAirUS=airIRRP500GroupSetpointsSupplyAirUS, airIRG3GroupSetpointsEntry=airIRG3GroupSetpointsEntry, isxModularDistModuleOutputAlarmMinEnable=isxModularDistModuleOutputAlarmMinEnable, airIRmPmUnitCondensationPressure1=airIRmPmUnitCondensationPressure1, airIRRP100UnitServiceIntervalFansAlarm=airIRRP100UnitServiceIntervalFansAlarm, upsAdvStateEcomode=upsAdvStateEcomode, airFMModHotWaterVlvPos=airFMModHotWaterVlvPos, airIRmPmPump3LinearRangeK=airIRmPmPump3LinearRangeK, airFMModRHModuleIndex=airFMModRHModuleIndex, airIRAlarmDescription=airIRAlarmDescription, airIRmPmLouver3=airIRmPmLouver3, rPDU2OutletSwitchedControlEntry=rPDU2OutletSwitchedControlEntry, airIRmIdentName=airIRmIdentName, upsAdvConfigChargerLevel=upsAdvConfigChargerLevel, airIRRP100GroupSetpointsDehumidify=airIRRP100GroupSetpointsDehumidify, airIRSCUnit=airIRSCUnit, rPDU2BankPropertiesIndex=rPDU2BankPropertiesIndex, cpsSerialPortAuthTmo=cpsSerialPortAuthTmo, airIRmPmUnitCondensationTemperature1F=airIRmPmUnitCondensationTemperature1F, airIRmPmPump4StartTemperature=airIRmPmPump4StartTemperature)
mibBuilder.exportSymbols("PowerNet-MIB", xATSTestingStatusSelectTestProcess=xATSTestingStatusSelectTestProcess, airFMSysReheatDeadbandF=airFMSysReheatDeadbandF, xAPCControllerFirmwareUpdateTransferFailed=xAPCControllerFirmwareUpdateTransferFailed, mtrapargsInteger02=mtrapargsInteger02, bmsInformationalCondition=bmsInformationalCondition, iemConfigProbesNumProbes=iemConfigProbesNumProbes, xATSDCBackupAlarm=xATSDCBackupAlarm, xPDU=xPDU, airIRmPmEheating3StartTemperatureK=airIRmPmEheating3StartTemperatureK, upsOutletGroupStatus=upsOutletGroupStatus, memInputAnalogCalibrationPoint4Value=memInputAnalogCalibrationPoint4Value, upsOutletGroupConfigRebootDuration=upsOutletGroupConfigRebootDuration, atsInputPhaseTable=atsInputPhaseTable, xATSInternalCommError=xATSInternalCommError, upsPhaseInputMaxCurrent=upsPhaseInputMaxCurrent, isxModularTotalOutputCurrentHighThresholdViolationCleared=isxModularTotalOutputCurrentHighThresholdViolationCleared, airFMGroupFailoverSysFireAlarm=airFMGroupFailoverSysFireAlarm, envMaxTempThresholdViolation=envMaxTempThresholdViolation, rPDU2OutletMeteredConfigOverloadCurrentThreshold=rPDU2OutletMeteredConfigOverloadCurrentThreshold, isxModularDistSysCurrentAmps=isxModularDistSysCurrentAmps, airIRRP100UnitStatusHumidifyDemand=airIRRP100UnitStatusHumidifyDemand, upsDiagSubSysChargerFrameIndex=upsDiagSubSysChargerFrameIndex, dcDM3=dcDM3, cpsInfoSerialPortErrFrame=cpsInfoSerialPortErrFrame, xATSSwitchStatisticsEntry=xATSSwitchStatisticsEntry, isxcWarningAlarm=isxcWarningAlarm, galaxy300UPS30kVA31=galaxy300UPS30kVA31, isxModularDistSubFeedLoadingSubIndex=isxModularDistSubFeedLoadingSubIndex, xPDUBranchBreakerName=xPDUBranchBreakerName, mtrapargsOctetString07=mtrapargsOctetString07, airIRSCUnitSetptsSupplyAirSetpointUS=airIRSCUnitSetptsSupplyAirSetpointUS, airIRRP100UnitThresholdsRackInletHighTempUS=airIRRP100UnitThresholdsRackInletHighTempUS, upsParallelInputTotalApparentPower=upsParallelInputTotalApparentPower, xATSGenerator=xATSGenerator, airFMModIdentEntry=airFMModIdentEntry, emsOutletConfig=emsOutletConfig, upsDiagSubSysIntBypSwitchFrameIndex=upsDiagSubSysIntBypSwitchFrameIndex, xPDUBreakerPositionAlarmCleared=xPDUBreakerPositionAlarmCleared, isxModularDistSubFeedInfoAlarmGeneration=isxModularDistSubFeedInfoAlarmGeneration, xPDUInputVoltageHighAlarmCleared=xPDUInputVoltageHighAlarmCleared, rPDUIdentDateOfManufacture=rPDUIdentDateOfManufacture, memSensorsTempShortIncRateThreshValue=memSensorsTempShortIncRateThreshValue, emsProbeStatusProbeMinTempThresh=emsProbeStatusProbeMinTempThresh, airIRSCUnitThresholds=airIRSCUnitThresholds, airIRRCUnitStatusContainmtDPMetric=airIRRCUnitStatusContainmtDPMetric, upsDiagBatterySerialNumber=upsDiagBatterySerialNumber, smartUPS3000DSP=smartUPS3000DSP, airIRRP500UnitRunHoursFan3=airIRRP500UnitRunHoursFan3, airFMGroupCfgSetpointShareSetting=airFMGroupCfgSetpointShareSetting, dcmim2ConfigBattery=dcmim2ConfigBattery, sPDUOutletConfigMSPannunOutletIndex=sPDUOutletConfigMSPannunOutletIndex, upsAdvOutputKVACapacity=upsAdvOutputKVACapacity, emsAlinkPowerOverload=emsAlinkPowerOverload, cpsCardIdentProd=cpsCardIdentProd, airIRRP100UnitStatusHumidifyOutput=airIRRP100UnitStatusHumidifyOutput, isxModularDistSubFeedInfoKwhResetDate=isxModularDistSubFeedInfoKwhResetDate, airIRG2GroupStatusCoolDemand=airIRG2GroupStatusCoolDemand, battManConfigMaxAmbientTempC=battManConfigMaxAmbientTempC, airIRmPmFan2Speed=airIRmPmFan2Speed, iemHighHumidThresholdViolationCleared=iemHighHumidThresholdViolationCleared, isxModularOutputVoltageMinThresholdViolationCleared=isxModularOutputVoltageMinThresholdViolationCleared, airIRmPmUnitEvaporationPressure1=airIRmPmUnitEvaporationPressure1, airIRRP100UnitThresholdsReturnAirHighTempUS=airIRRP100UnitThresholdsReturnAirHighTempUS, upsHighPrecBatteryActualVoltageTable=upsHighPrecBatteryActualVoltageTable, dm3StatusRectTable=dm3StatusRectTable, airIRmPmUnitCondensationTemperature1=airIRmPmUnitCondensationTemperature1, airIREventCode=airIREventCode, airIRG3CMStatusTable=airIRG3CMStatusTable, emConfigContactsEntry=emConfigContactsEntry, apcEnvHighHumidityThresholdViolationCleared=apcEnvHighHumidityThresholdViolationCleared, emConfigProbeHighHumidThreshold=emConfigProbeHighHumidThreshold, dcmim2ConfigSysHighTempReset=dcmim2ConfigSysHighTempReset, airIRRP500UnitStatusOutputState=airIRRP500UnitStatusOutputState, eps8000UPS=eps8000UPS, upsDiagSubFeedBreakerTable=upsDiagSubFeedBreakerTable, battManString2ResponseTestChangeIndex=battManString2ResponseTestChangeIndex, rARUSensorsStatusAruIndex=rARUSensorsStatusAruIndex, sPDUIdentNameMSP=sPDUIdentNameMSP, airIRSCUnitRunHoursAirFilter=airIRSCUnitRunHoursAirFilter, pduInputTransformerOverTemperature=pduInputTransformerOverTemperature, airFMSysAlarmMapInput13=airFMSysAlarmMapInput13, dcmim2StatusRectID=dcmim2StatusRectID, upsDiagPMFirmwareRev=upsDiagPMFirmwareRev, xATSSource1TableSize=xATSSource1TableSize, upsIntegratedATSSourceIndex=upsIntegratedATSSourceIndex, airFMGroupFailoverSysReturnSensorFail=airFMGroupFailoverSysReturnSensorFail, memSensorsCommStatus=memSensorsCommStatus, rARUIdentEntry=rARUIdentEntry, rPDU2PhaseToPhaseStatusTableSize=rPDU2PhaseToPhaseStatusTableSize, iemConfigProbesTable=iemConfigProbesTable, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm, accessPXStatusBeaconLocation=accessPXStatusBeaconLocation, memOutputs=memOutputs, airFMModRHHeaterReset=airFMModRHHeaterReset, isxModularDistSysVoltageLtoN=isxModularDistSysVoltageLtoN, apcUserScheduleViolation=apcUserScheduleViolation, emsProbeStatusEntry=emsProbeStatusEntry, upsDiagIMSerialNum=upsDiagIMSerialNum, airFMSysAlarmMapSysSecSensFail=airFMSysAlarmMapSysSecSensFail, rPDUIdentModelNumber=rPDUIdentModelNumber, upsAdvInputTotalApparentPower=upsAdvInputTotalApparentPower, battManUnitFirmwareRev=battManUnitFirmwareRev, dm3StatusConvCfg=dm3StatusConvCfg, airIRRP100GroupConfigActiveFlowControllerLampTest=airIRRP100GroupConfigActiveFlowControllerLampTest, airIRG3GroupSetpointsCoolSetpointUS=airIRG3GroupSetpointsCoolSetpointUS, xATSGeneratorFuelSystemVeryLowRunTimeThreshold=xATSGeneratorFuelSystemVeryLowRunTimeThreshold, dcmim2ConfigLVDEntry=dcmim2ConfigLVDEntry, dcmim2StatusLVD=dcmim2StatusLVD, xATSOutputVoltageLowAlarmCleared=xATSOutputVoltageLowAlarmCleared, airIRmPmUnitEvaporationPressure2=airIRmPmUnitEvaporationPressure2, isxModularDistModuleOutputNumCables=isxModularDistModuleOutputNumCables, upsDiagSubSysPowerFactorCorrectionFrameIndex=upsDiagSubSysPowerFactorCorrectionFrameIndex, apcHandleClosed=apcHandleClosed, battManIdentFirmwareRev=battManIdentFirmwareRev, atsIdentFirmwareRev=atsIdentFirmwareRev, airFMGroupAutoRoleNumPrimary=airFMGroupAutoRoleNumPrimary, upsAdvBatteryCurrentTable=upsAdvBatteryCurrentTable, battManResetChargeCurrentDeviationBenchmark=battManResetChargeCurrentDeviationBenchmark, airFMGroupCfgShutdownFire=airFMGroupCfgShutdownFire, rPDU2PhaseStatusPeakCurrentStartTime=rPDU2PhaseStatusPeakCurrentStartTime, airFMModSupplyTempF=airFMModSupplyTempF, airIRG3RDUStatusDCPowerSupply1Current=airIRG3RDUStatusDCPowerSupply1Current, isxModularDistModuleBreakerAlarmStatus=isxModularDistModuleBreakerAlarmStatus, airFMSysResetSysFailure=airFMSysResetSysFailure, airFMGroupFailoverSysPrimarySensorFail=airFMGroupFailoverSysPrimarySensorFail, xPDUMainInputVoltageLtoL=xPDUMainInputVoltageLtoL, airIRG3GroupConfigLoadAssistEnable=airIRG3GroupConfigLoadAssistEnable, battManSystemPilotTempC=battManSystemPilotTempC, dm3StatusRectFwVer=dm3StatusRectFwVer, coolingUnitStatusAnalogEntry=coolingUnitStatusAnalogEntry, airIRG3RDUConfigPumpChangeOverInterval=airIRG3RDUConfigPumpChangeOverInterval, airIRmIdentLocation=airIRmIdentLocation, airIRG2RDT2RunHoursEvapFanTableSize=airIRG2RDT2RunHoursEvapFanTableSize, xATSSystemOutputPhaseIndex=xATSSystemOutputPhaseIndex, dcMainsFailAlarmCleared=dcMainsFailAlarmCleared, battManInputContactAlarmState=battManInputContactAlarmState, upsDiagnosticExternalDevices=upsDiagnosticExternalDevices, xATSGeneratorAdvStatus=xATSGeneratorAdvStatus, xATSTestingScheduleTestTime=xATSTestingScheduleTestTime, sPDUOutletStatusMSPCommandPending=sPDUOutletStatusMSPCommandPending, airIRmIdentSerialNumber=airIRmIdentSerialNumber, airFMSysHighSplyTempC=airFMSysHighSplyTempC, airIRRP100UnitServiceIntervalHeater=airIRRP100UnitServiceIntervalHeater, airIRRP100GroupConfigConfigurationType=airIRRP100GroupConfigConfigurationType, airIRG3CMRunHoursFan2=airIRG3CMRunHoursFan2, battManString1BatteryInterTierOhmicValue=battManString1BatteryInterTierOhmicValue, memOutputConfigTable=memOutputConfigTable, dcmim2StatusBattCurrent=dcmim2StatusBattCurrent, airIRRP100UnitIdentHardwareRevision=airIRRP100UnitIdentHardwareRevision, airFMSysCoilFluidTempC=airFMSysCoilFluidTempC, rARUSensorsStatusEntry=rARUSensorsStatusEntry, rPDUStatusBankTable=rPDUStatusBankTable, atsStatus24VSourceBPowerSupply=atsStatus24VSourceBPowerSupply, cpsSerialPortAutomUsr=cpsSerialPortAutomUsr, rPDU2BankPropertiesModule=rPDU2BankPropertiesModule, airFMModBlwr2CtrlType=airFMModBlwr2CtrlType, sPDUOutletControlMSPIndex=sPDUOutletControlMSPIndex, emConfigProbeMaxHumidThreshold=emConfigProbeMaxHumidThreshold, airFMIdentEntry=airFMIdentEntry, xATSGeneratorHighCoolantTempAlarm=xATSGeneratorHighCoolantTempAlarm, airFMSysAlarmMapExpMod2CondPumpFail=airFMSysAlarmMapExpMod2CondPumpFail, airIRmPmHumidifier1Alarm5us=airIRmPmHumidifier1Alarm5us, airIRmPmFan3Running=airIRmPmFan3Running, AirIRSCFanSpeedPreference=AirIRSCFanSpeedPreference, atsControlClearAllAlarms=atsControlClearAllAlarms, airIRmPmAuxAlarm4=airIRmPmAuxAlarm4, xPDUBranchCurrentMinAlarm=xPDUBranchCurrentMinAlarm, airIRRP100GroupSetpointsCoolMetric=airIRRP100GroupSetpointsCoolMetric, upsPhaseOutputEntry=upsPhaseOutputEntry, xATSGeneratorOutputPowerFactor=xATSGeneratorOutputPowerFactor, batteryIncrease=batteryIncrease, airIRG2RDT2ThresholdsRackInletHighTempMetric=airIRG2RDT2ThresholdsRackInletHighTempMetric, atsInputPhaseEntry=atsInputPhaseEntry, airFMSysAlarmMapOutput1=airFMSysAlarmMapOutput1, airIRmPmPump3MaxAdjust=airIRmPmPump3MaxAdjust, uioOutputRelayStatusTable=uioOutputRelayStatusTable, uioOutputRelayStatusCurrentState=uioOutputRelayStatusCurrentState, memOutputStatusModuleNumber=memOutputStatusModuleNumber, rPDU2SensorDiscreteStatusModule=rPDU2SensorDiscreteStatusModule, isxModularDistModuleBreakerCurrent=isxModularDistModuleBreakerCurrent, rPDU2OutletSwitchedPropertiesIndex=rPDU2OutletSwitchedPropertiesIndex, apcLocalDisplayIdentDateOfManufacture=apcLocalDisplayIdentDateOfManufacture, atsOutputBankMinLoad=atsOutputBankMinLoad, upsPhaseNumOutputs=upsPhaseNumOutputs, upsDiagSubSysSystemPowerSupplyManufactureDate=upsDiagSubSysSystemPowerSupplyManufactureDate, airIRG3RDUStatusInputState=airIRG3RDUStatusInputState, memSensorsAlarmStatus=memSensorsAlarmStatus, smartUPS900=smartUPS900, rARUSensorsStatusSensorNumber=rARUSensorsStatusSensorNumber, airIRG3GroupConfigTable=airIRG3GroupConfigTable, AirIRSCConfigType=AirIRSCConfigType, galaxy5000UPS30KVA=galaxy5000UPS30KVA, envSTDecTempRateViolationCleared=envSTDecTempRateViolationCleared, upsDiagSubSysBattMonitorTable=upsDiagSubSysBattMonitorTable, atsOutputPercentPower=atsOutputPercentPower, uioInputContactStatusEntry=uioInputContactStatusEntry, airFMSysAvgReturnHum=airFMSysAvgReturnHum, memOutletStatusModuleNumber=memOutletStatusModuleNumber, airFMAlarms=airFMAlarms, rpduWarningConditionCleared=rpduWarningConditionCleared, sPDUOutletConfigMSPmupsOutletIndex=sPDUOutletConfigMSPmupsOutletIndex, xATSTestingResults=xATSTestingResults, airIRRCUnit=airIRRCUnit, airIRmPmPWWHeating=airIRmPmPWWHeating, symmetraPX=symmetraPX, xPDUUPSInput=xPDUUPSInput, airIRmPmSupplyAirTemperature=airIRmPmSupplyAirTemperature, apCPSPw1=apCPSPw1, airIRRCUnitStatusActivePowerSource=airIRRCUnitStatusActivePowerSource, airIRmPmWinterModeHysteresisF=airIRmPmWinterModeHysteresisF, airIRmPmPump1LinearRangeF=airIRmPmPump1LinearRangeF, airFMSysAlarmMapExpMod2HumReplCyl=airFMSysAlarmMapExpMod2HumReplCyl, upsParallelDiagSubSysBreakerTable=upsParallelDiagSubSysBreakerTable, xATSGeneratorOutputTotalPower=xATSGeneratorOutputTotalPower, upsBackfeedRelayFault=upsBackfeedRelayFault, sPDUOutletConfigMSPannunTable=sPDUOutletConfigMSPannunTable, airFMStatusSystemRemoteHighTempF=airFMStatusSystemRemoteHighTempF, emsProbeConfigProbeIndex=emsProbeConfigProbeIndex, emsProbeDisconnected=emsProbeDisconnected, coolingUnitExtendedStringTableSize=coolingUnitExtendedStringTableSize, memBeaconConfigBeaconNumber=memBeaconConfigBeaconNumber, airFMSysCtrlTempC=airFMSysCtrlTempC, dcmim2StatusSysAmbientTemp=dcmim2StatusSysAmbientTemp, iemStatusRelayNumber=iemStatusRelayNumber, airIRRCGroupSetpointsFanSpeedPreference=airIRRCGroupSetpointsFanSpeedPreference, airIRmPmAuxiliaryAlarm8=airIRmPmAuxiliaryAlarm8, airIRmPmDrycooler3SummerStartTempF=airIRmPmDrycooler3SummerStartTempF, dm3StatusConvTableSize=dm3StatusConvTableSize, memOutputStatusOutputNumber=memOutputStatusOutputNumber, xATSGeneratorOutputVoltageLtoN=xATSGeneratorOutputVoltageLtoN, cpsSerialPortFlowCtrl=cpsSerialPortFlowCtrl, airIRmPmDrycooler4Failure=airIRmPmDrycooler4Failure, airIRRCUnitStatusReturnAirTempMetric=airIRRCUnitStatusReturnAirTempMetric, airIRG3CMServiceIntervalsCMID=airIRG3CMServiceIntervalsCMID, airFMStatusModuleIndex=airFMStatusModuleIndex, rARUFanStatusFanRunhourReset=rARUFanStatusFanRunhourReset, battManInputContactTableSize=battManInputContactTableSize, iemConfigProbeHighHumidThreshold=iemConfigProbeHighHumidThreshold, apcUnregisteredUserAccessDenied=apcUnregisteredUserAccessDenied, dcCurrentLimitAlarmCleared=dcCurrentLimitAlarmCleared, rPDUStatusPhaseIndex=rPDUStatusPhaseIndex, apcRelockTimeout=apcRelockTimeout, rPDU2SensorDiscreteConfigIndex=rPDU2SensorDiscreteConfigIndex, airFMModServIntResetTable=airFMModServIntResetTable, upsSCGStatusTableIndex=upsSCGStatusTableIndex, cpsSerialPortDBalarm=cpsSerialPortDBalarm, atsConfigLineVRMSMediumLimit=atsConfigLineVRMSMediumLimit, xATSTestingStatusProfileWarmupTime=xATSTestingStatusProfileWarmupTime, rPDU2OutletMeteredPropertiesModule=rPDU2OutletMeteredPropertiesModule, upsAdvConfigAlarm=upsAdvConfigAlarm, airIRG3CMStatusReturnAirTempMetric=airIRG3CMStatusReturnAirTempMetric, airFMGroupFailoverModBlwrCntrl1Fail=airFMGroupFailoverModBlwrCntrl1Fail, xPDUOutputRelayNumber=xPDUOutputRelayNumber, rPDU2OutletMeteredPropertiesLayout=rPDU2OutletMeteredPropertiesLayout)
mibBuilder.exportSymbols("PowerNet-MIB", isxModularDistSysCurrentThresholdHigh=isxModularDistSysCurrentThresholdHigh, cpsSerialPortAuthSrv1=cpsSerialPortAuthSrv1, xPDUInputContactStateAbnormal=xPDUInputContactStateAbnormal, rARUSensorsTempMinThresh=rARUSensorsTempMinThresh, upsDiagnosticSubsystem=upsDiagnosticSubsystem, envAlinkCommunicationLost=envAlinkCommunicationLost, airFMModServIntHum=airFMModServIntHum, xATSGeneratorIdent=xATSGeneratorIdent, dcmim2ConfigBattCapacityTestCurrent=dcmim2ConfigBattCapacityTestCurrent, upsAdvTest=upsAdvTest, xATSInputContacts=xATSInputContacts, battManString1BatteryThermalRunaway=battManString1BatteryThermalRunaway, airIRG3GroupSetpointsTable=airIRG3GroupSetpointsTable, airFMSysOutputIndex=airFMSysOutputIndex, upsAdvConfigOutputFreqRange=upsAdvConfigOutputFreqRange, battManUnitStatusIndex=battManUnitStatusIndex, airIRRCUnitThresholdsRackInletHighTempUS=airIRRCUnitThresholdsRackInletHighTempUS, airIRmPmUnitType=airIRmPmUnitType, battManUnitCommLoss=battManUnitCommLoss, airFMSysLowCtrlTempF=airFMSysLowCtrlTempF, rPDU2OutletMeteredPropertiesEntry=rPDU2OutletMeteredPropertiesEntry, sPDUOutletStatusMSPName=sPDUOutletStatusMSPName, cpsCardConfEntry=cpsCardConfEntry, xPDUSystemOutputPowerFactor=xPDUSystemOutputPowerFactor, airFMSysRefrigType=airFMSysRefrigType, dcRectifierOvertempAlarm=dcRectifierOvertempAlarm, airIRmPmPump2Speed=airIRmPmPump2Speed, airIRmPmPump3HysteresisK=airIRmPmPump3HysteresisK, rPDU2SensorTempHumidityConfigTempHighThreshC=rPDU2SensorTempHumidityConfigTempHighThreshC, airIRmPmCmp2StartTempSummerK=airIRmPmCmp2StartTempSummerK, rARUFanStatusReplacementThreshold=rARUFanStatusReplacementThreshold, battManString1BatteryCellShorted=battManString1BatteryCellShorted, sPDUOutletConfigMSPgsIndex=sPDUOutletConfigMSPgsIndex, mtrapargsString07=mtrapargsString07, dm3=dm3, airFMModStatusModuleIndex=airFMModStatusModuleIndex, dm3ConfigRectDiagAlarm=dm3ConfigRectDiagAlarm, xPDUSystemGroundCurrentAlarmCleared=xPDUSystemGroundCurrentAlarmCleared, dm3StatusConvFail=dm3StatusConvFail, airIRRP500UnitRunHoursSystem=airIRRP500UnitRunHoursSystem, coolingUnitExtendedAnalogEntry=coolingUnitExtendedAnalogEntry, coolingUnitStatusAnalogTable=coolingUnitStatusAnalogTable, airIRRP100GroupConfigFullRPBackups=airIRRP100GroupConfigFullRPBackups, upsTest=upsTest, airIRG3RDUStatusCondenserSaturationTempMetric=airIRG3RDUStatusCondenserSaturationTempMetric, rPDU2OutletSwitchedStatusModule=rPDU2OutletSwitchedStatusModule, airIRmPmPWWHeatingType=airIRmPmPWWHeatingType, memBeaconConfigLocation=memBeaconConfigLocation, upsMpuReset=upsMpuReset, airIRRP500UnitRunHoursAirFilter=airIRRP500UnitRunHoursAirFilter, emsSensorFault=emsSensorFault, airIRmPmReturnAirHumidity=airIRmPmReturnAirHumidity, airFMGroupCfgNumSystems=airFMGroupCfgNumSystems, airFMModBlwr2Entry=airFMModBlwr2Entry, isxModularPduIdentModelNumber=isxModularPduIdentModelNumber, airIRG2GroupConfigConfigurationType=airIRG2GroupConfigConfigurationType, airIRG3RDUStatusTotalDCPowerSupplyCurrent=airIRG3RDUStatusTotalDCPowerSupplyCurrent, symmetra3PhaseUPS60kVA=symmetra3PhaseUPS60kVA, upsDiagPMIndex=upsDiagPMIndex, rPDU2DeviceConfigTable=rPDU2DeviceConfigTable, emsOutputRelayStatusTable=emsOutputRelayStatusTable, xATSGeneratorLowRunTimeAlarmCleared=xATSGeneratorLowRunTimeAlarmCleared, atsOverCurrentCleared=atsOverCurrentCleared, rpduCriticalConditionCleared=rpduCriticalConditionCleared, airIRRP100UnitConfigIdleOnLeakDetect=airIRRP100UnitConfigIdleOnLeakDetect, rPDU2GroupNumberOfDevices=rPDU2GroupNumberOfDevices, airIRG3RDUStatusPump2Speed=airIRG3RDUStatusPump2Speed, rPDU2OutletMeteredTableSize=rPDU2OutletMeteredTableSize, airFMModProperties=airFMModProperties, memModulesStatusModuleName=memModulesStatusModuleName, galaxy7000SSC1200kVA=galaxy7000SSC1200kVA, emConfigProbesTable=emConfigProbesTable, airIRSCUnitStatusCondOutletTempMetric=airIRSCUnitStatusCondOutletTempMetric, isxModularDistSubFeedInfoAlarmMaxEnable=isxModularDistSubFeedInfoAlarmMaxEnable, mfiletransferConfigSettings=mfiletransferConfigSettings, cpsConsoleBanner=cpsConsoleBanner, airFMSysCoilFluidCoolDmd=airFMSysCoilFluidCoolDmd, coolingUnitConfigurationAnalogTableIndex=coolingUnitConfigurationAnalogTableIndex, upsParallelDiagSubSysBreakerEntry=upsParallelDiagSubSysBreakerEntry, aruAlinkCommunicationLost=aruAlinkCommunicationLost, atsCalibrationOutputPhasesTableIndex=atsCalibrationOutputPhasesTableIndex, logicPowerSuppliesDecreased=logicPowerSuppliesDecreased, atsOutputTable=atsOutputTable, accessPXIdentDateOfManufacture=accessPXIdentDateOfManufacture, dm3ConfigConvFanFailAlarm=dm3ConfigConvFanFailAlarm, airIRG3CMStatusOperatingMode=airIRG3CMStatusOperatingMode, atsOutputEntry=atsOutputEntry, airFMIdentModuleHardwareRev=airFMIdentModuleHardwareRev, rARUConfigAruMasterControl=rARUConfigAruMasterControl, dcBatteryTestFail=dcBatteryTestFail, atsConfigPhaseNearOverLoadThreshold=atsConfigPhaseNearOverLoadThreshold, apcAnalogInputMinThresholdViolation=apcAnalogInputMinThresholdViolation, atsConfigBankOverLoadThreshold=atsConfigBankOverLoadThreshold, airFMSysHighCtrlTempF=airFMSysHighCtrlTempF, upsAdvTestDiagnosticTime=upsAdvTestDiagnosticTime, iemProbeDisconnected=iemProbeDisconnected, rPDUOutletStatusOutletName=rPDUOutletStatusOutletName, emsOutletConfigOutletIndex=emsOutletConfigOutletIndex, upsDiagSubSysDCCircuitBreakerStatus=upsDiagSubSysDCCircuitBreakerStatus, airIRRCGroupSetpointsCoolUS=airIRRCGroupSetpointsCoolUS, rPDU2OutletSwitchedConfigPowerOnTime=rPDU2OutletSwitchedConfigPowerOnTime, airIRG3IdentCMSysOID=airIRG3IdentCMSysOID, airFMSysHighCoilFluidTempF=airFMSysHighCoilFluidTempF, apcLocalDisplayConfigBeeperVolume=apcLocalDisplayConfigBeeperVolume, airIRmPmHumidifier1ManOpRunning=airIRmPmHumidifier1ManOpRunning, airIRmPmEheating4StartTemperatureK=airIRmPmEheating4StartTemperatureK, isxModularDistSysCurrentAlarmMaxEnable=isxModularDistSysCurrentAlarmMaxEnable, upsAdvConfigMinReturnCapacity=upsAdvConfigMinReturnCapacity, sPDUMasterStatusVMIndex=sPDUMasterStatusVMIndex, rPDU2OutletMeteredStatusPower=rPDU2OutletMeteredStatusPower, rPDU2DeviceStatusPowerSupplyAlarm=rPDU2DeviceStatusPowerSupplyAlarm, airIRmPmCmp2HysteresisWinterK=airIRmPmCmp2HysteresisWinterK, acceptThisReceiver=acceptThisReceiver, rPDUBankPhaseNearOverloadCleared=rPDUBankPhaseNearOverloadCleared, airIRRP100UnitStatusDischargePressureUS=airIRRP100UnitStatusDischargePressureUS, upsHighPrecInputLineVoltage=upsHighPrecInputLineVoltage, airIRRP500GroupConfigFullRPBackups=airIRRP500GroupConfigFullRPBackups, xATSSystemOutputPowerFactor=xATSSystemOutputPowerFactor, gutorPEW=gutorPEW, airIRmPmDrycooler4WinterStartTempC=airIRmPmDrycooler4WinterStartTempC, airFMStatusSystemAverageRetHum=airFMStatusSystemAverageRetHum, xATSGeneratorIdentDateofManufacture=xATSGeneratorIdentDateofManufacture, isxModularDistSysCurrentPercent=isxModularDistSysCurrentPercent, upsBasicSystemInternalTemperature=upsBasicSystemInternalTemperature, airIRG3CMStatusLiquidTempUS=airIRG3CMStatusLiquidTempUS, apcDoorClosedImproperlyCleared=apcDoorClosedImproperlyCleared, airIRRP500UnitStatusHumidifierWaterConductivity=airIRRP500UnitStatusHumidifierWaterConductivity, airIRG2GroupStatusMinRackInletTempMetric=airIRG2GroupStatusMinRackInletTempMetric, emsSensorConfigSensorAlarmDelay=emsSensorConfigSensorAlarmDelay, airIRRCUnitRunHoursFan1=airIRRCUnitRunHoursFan1, emsOutletConfigOutletNormalState=emsOutletConfigOutletNormalState, airIRmPmPWWHeatingHysteresisK=airIRmPmPWWHeatingHysteresisK, airPAStatus=airPAStatus, airIRmAlarmsTableSize=airIRmAlarmsTableSize, dm3ConfigSysDescriptionIndex=dm3ConfigSysDescriptionIndex, airIRmPmFan3Type=airIRmPmFan3Type, airIRSCUnitStatusFilterDPUS=airIRSCUnitStatusFilterDPUS, airIRRP500Unit=airIRRP500Unit, rARUFanStatus=rARUFanStatus, airIRmPmCmp1StartTempWinterK=airIRmPmCmp1StartTempWinterK, upsAdvBatteryChargerStatus=upsAdvBatteryChargerStatus, memInputAnalogMeasurementUnits=memInputAnalogMeasurementUnits, airInformationalCondition=airInformationalCondition, sPDUOutletControlTableSize=sPDUOutletControlTableSize, airIRmPmPump3StartTemperature=airIRmPmPump3StartTemperature, airIRRP500UnitServiceIntervals=airIRRP500UnitServiceIntervals, airIRSCUnitSetptsSupplyAirSetpointMetric=airIRSCUnitSetptsSupplyAirSetpointMetric, airIRmPmWaterTemperature2=airIRmPmWaterTemperature2, upsIOFrameLayoutPositionID=upsIOFrameLayoutPositionID, rPDU2PhaseStatusTable=rPDU2PhaseStatusTable, xATSGeneratorVeryLowFuelLevelAlarm=xATSGeneratorVeryLowFuelLevelAlarm, isxModularSubfeedLowCurrentThresholdViolation=isxModularSubfeedLowCurrentThresholdViolation, airIRmPmMaxLimitSupplyAirTemperature=airIRmPmMaxLimitSupplyAirTemperature, apCPSRAMSize=apCPSRAMSize, emConfigContactSeverity=emConfigContactSeverity, emConfigProbeMinTempEnable=emConfigProbeMinTempEnable, cpsSerialGlobal=cpsSerialGlobal, rARUConfigTable=rARUConfigTable, battManRemoteAnnunciatorReset=battManRemoteAnnunciatorReset, airIRmPmEheating1StartTemperatureK=airIRmPmEheating1StartTemperatureK, dm3StatusOEMrectGain=dm3StatusOEMrectGain, airFMModSupplyTempC=airFMModSupplyTempC, airIRRP500UnitStatusEnteringFluidTemperatureUS=airIRRP500UnitStatusEnteringFluidTemperatureUS, airIRRP500GroupConfigConfigurationType=airIRRP500GroupConfigConfigurationType, rARUPowerStatusEntry=rARUPowerStatusEntry, xATSOutputRelayEntry=xATSOutputRelayEntry, airIRmPmReheat4Failure=airIRmPmReheat4Failure, airFMStatusModuleTable=airFMStatusModuleTable, xPDUOutputNeutralCurrentHighAlarmCleared=xPDUOutputNeutralCurrentHighAlarmCleared, codeAuthenticationDone=codeAuthenticationDone, xPDUCoolingFanStatus=xPDUCoolingFanStatus, coolingUnitExtendedStringTableIndex=coolingUnitExtendedStringTableIndex, ceSevereCondition=ceSevereCondition, sPDUOutletStatusVM=sPDUOutletStatusVM, dcmim2ControlSystem=dcmim2ControlSystem, upsDiagnostics=upsDiagnostics, airIRG3CMConfigDeviceIndex=airIRG3CMConfigDeviceIndex, xATSSwitchBlockMapTableSize=xATSSwitchBlockMapTableSize, xPDUOutputVoltageLowAlarm=xPDUOutputVoltageLowAlarm, rPDUOutletConfigMonitoredNearOverloadThreshold=rPDUOutletConfigMonitoredNearOverloadThreshold, rPDU2IdentDateOfManufacture=rPDU2IdentDateOfManufacture, upsBasicBatteryLastReplaceDate=upsBasicBatteryLastReplaceDate, airIRRP500UnitStatusReheatDemand=airIRRP500UnitStatusReheatDemand, upsDiagSubFeedPhaseTable=upsDiagSubFeedPhaseTable, airIRmPmFan1=airIRmPmFan1, airFMModStatusEntry=airFMModStatusEntry, airFMIdentModuleDateOfMfg=airFMIdentModuleDateOfMfg, coolingUnitConfigurationAnalogAccess=coolingUnitConfigurationAnalogAccess, iemConfigProbeMinTempThreshold=iemConfigProbeMinTempThreshold, sPDUMasterConfigMSPTableSize=sPDUMasterConfigMSPTableSize, rPDULowLoadCleared=rPDULowLoadCleared, airIRmPmOutsideAirTemperatureF=airIRmPmOutsideAirTemperatureF, cpsSerialPortPrompt=cpsSerialPortPrompt, eps6000FreqConverter=eps6000FreqConverter, envSTIncTempRateViolation=envSTIncTempRateViolation, airIRSCUnitThresholdsSupplyAirHighTempMetric=airIRSCUnitThresholdsSupplyAirHighTempMetric, xATSIdentModelNumber=xATSIdentModelNumber, airIRmPmMyZoneSupplyTemperatureC=airIRmPmMyZoneSupplyTemperatureC, airIRRP100UnitIdentFirmwareRevision=airIRRP100UnitIdentFirmwareRevision, dm3ConfigSysDescriptionTable=dm3ConfigSysDescriptionTable, isxModularDistSysCurrentEntry=isxModularDistSysCurrentEntry, airIRmPmEheating2ManOpRunning=airIRmPmEheating2ManOpRunning, xATSSource1Frequency=xATSSource1Frequency, airIRmPmPump2ControlFactor=airIRmPmPump2ControlFactor, atsStatus=atsStatus, dm3StatusConvCurrentLimit=dm3StatusConvCurrentLimit, airIRRP100UnitStatusDehumidifyOutput=airIRRP100UnitStatusDehumidifyOutput, airIRSCUnitRunHoursCondenserFan2=airIRSCUnitRunHoursCondenserFan2, powerModuleIncrease=powerModuleIncrease, airIRG2RDT2RunHoursEvapFanEntry=airIRG2RDT2RunHoursEvapFanEntry, rPDU2SensorTempHumidityStatusModule=rPDU2SensorTempHumidityStatusModule, airIRmPmLastMaintenanceMonth=airIRmPmLastMaintenanceMonth, upsHighPrecInputBypassVoltage=upsHighPrecInputBypassVoltage, coolingUnitConfigurationStringTableIndex=coolingUnitConfigurationStringTableIndex, symmetraUPS12kVA=symmetraUPS12kVA, airFMSysAlarmMapExpMod1TableSize=airFMSysAlarmMapExpMod1TableSize, airFMModFireDetector=airFMModFireDetector, moduleNumber=moduleNumber, emsStatusAlinkAruDeviceCount=emsStatusAlinkAruDeviceCount, atsIdent=atsIdent, rPDU2IdentSerialNumber=rPDU2IdentSerialNumber, airIRmPmCompressor2LowPressure=airIRmPmCompressor2LowPressure, emsProbeConfigProbeMinTempThresh=emsProbeConfigProbeMinTempThresh, dcInputRelayOff=dcInputRelayOff, airIRRP500UnitThresholdsReturnAirHighTempUS=airIRRP500UnitThresholdsReturnAirHighTempUS, apcEnvLTDecTempRateViolationCleared=apcEnvLTDecTempRateViolationCleared, airIRmPmEheating4HysteresisF=airIRmPmEheating4HysteresisF, rARUStatusAruTempOvrdStatus=rARUStatusAruTempOvrdStatus, cpsCardConfPort2=cpsCardConfPort2, isxModularDistSysOutputNominalFrequency=isxModularDistSysOutputNominalFrequency, dcmim2ConfigBattMfgCapacity=dcmim2ConfigBattMfgCapacity, emConfigProbeName=emConfigProbeName, isxcWarningAlarmCleared=isxcWarningAlarmCleared, rPDU2BankStatusPeakCurrent=rPDU2BankStatusPeakCurrent, smartUPS1400=smartUPS1400, airFMGroupCfgName=airFMGroupCfgName, sPDUIdentVMIndex=sPDUIdentVMIndex, intelligenceModuleInserted=intelligenceModuleInserted, xATSSystemOutputFrequency=xATSSystemOutputFrequency, isxModularDistSubFeedInfoTotalPower=isxModularDistSubFeedInfoTotalPower, airIRmPerimeter=airIRmPerimeter, isxModularDistModuleInfoModIndex=isxModularDistModuleInfoModIndex, xATSDeviceNominalFrequency=xATSDeviceNominalFrequency, iemStatusProbesTable=iemStatusProbesTable, rPDU2PhaseStatusNumber=rPDU2PhaseStatusNumber, emsProbeConfigProbeMinHumidityThresh=emsProbeConfigProbeMinHumidityThresh, sPDUOutletControlMSPOutletIndex=sPDUOutletControlMSPOutletIndex, battManStringDischarge10to60Seconds=battManStringDischarge10to60Seconds, cpsHostName=cpsHostName, memOutletStatusCurrentState=memOutletStatusCurrentState, airIRRP100UnitRunHoursHeater2=airIRRP100UnitRunHoursHeater2, xATSOutputLoadPoweredByGeneratorAlarm=xATSOutputLoadPoweredByGeneratorAlarm, airIRSCGroupConfigConfigurationType=airIRSCGroupConfigConfigurationType, rPDU2BankStatusTable=rPDU2BankStatusTable)
mibBuilder.exportSymbols("PowerNet-MIB", xATSNeutralPosition=xATSNeutralPosition, airIRG3CMStatusUnitType=airIRG3CMStatusUnitType, airIRG3RDUStatusOutletWaterTempUS=airIRG3RDUStatusOutletWaterTempUS, airIRSCUnitStatusDischargePressureUS=airIRSCUnitStatusDischargePressureUS, airIRRP500GroupSetpointsSupplyAirMetric=airIRRP500GroupSetpointsSupplyAirMetric, airIRSCUnitStatusSuctionTempMetric=airIRSCUnitStatusSuctionTempMetric, airFMSysHighCtrlHum=airFMSysHighCtrlHum, airFMSysReheatPIDMethod=airFMSysReheatPIDMethod, rPDU2BankConfigEntry=rPDU2BankConfigEntry, ais5000UPS=ais5000UPS, airIRmPmRuntimeFreeCooling=airIRmPmRuntimeFreeCooling, isxcBasic=isxcBasic, airIRG3CMStatusVaporOutletPressureUS=airIRG3CMStatusVaporOutletPressureUS, mtrapargsInteger03=mtrapargsInteger03, isxModularMinCurrentThresholdViolation=isxModularMinCurrentThresholdViolation, airIRRP100UnitStatusLeakSensor=airIRRP100UnitStatusLeakSensor, coolingUnitStatusDiscreteEntry=coolingUnitStatusDiscreteEntry, xAPCControllerFirmwareUpdateTransferStart=xAPCControllerFirmwareUpdateTransferStart, dm3ConfigConvHwVoltAlarm=dm3ConfigConvHwVoltAlarm, airFMSysAlarmMapOutput3=airFMSysAlarmMapOutput3, rPDU2BankStatusNumber=rPDU2BankStatusNumber, battManString2OhmicValueData=battManString2OhmicValueData, airIRmPmPump4ControlCycle=airIRmPmPump4ControlCycle, airFMSysAlarmMapInput2=airFMSysAlarmMapInput2, accessPXStatusFrontDoorMaxOpenTime=accessPXStatusFrontDoorMaxOpenTime, airIRG3CMConfigCMID=airIRG3CMConfigCMID, batteryFrameIndex=batteryFrameIndex, airFMGroup=airFMGroup, xPDUMainInputVoltageLtoN=xPDUMainInputVoltageLtoN, upsDiagSubSysIntBypSwitchEntry=upsDiagSubSysIntBypSwitchEntry, atsOutputCurrentCalibrationFactor=atsOutputCurrentCalibrationFactor, dm3ConfigLVDName=dm3ConfigLVDName, rPDU2DeviceConfigName=rPDU2DeviceConfigName, dm3StatusOutRlyName=dm3StatusOutRlyName, struxureWareOperationsStatus=struxureWareOperationsStatus, emsProbeConfigProbeMaxHumidityThresh=emsProbeConfigProbeMaxHumidityThresh, uioSensorStatusAlarmStatus=uioSensorStatusAlarmStatus, rARUStatusAruManualSetpoint=rARUStatusAruManualSetpoint, galaxy5000UPS60KVA=galaxy5000UPS60KVA, airIRG2RA=airIRG2RA, airIRG3IdentModelNumber=airIRG3IdentModelNumber, airIRRP500UnitRunHoursFan2=airIRRP500UnitRunHoursFan2, uioSensorStatusPortID=uioSensorStatusPortID, isxModularDistSubFeedInfoAlarmLowEnable=isxModularDistSubFeedInfoAlarmLowEnable, airIRmPmDrycooler1ManOpEnable=airIRmPmDrycooler1ManOpEnable, atsConfigPhaseEntry=atsConfigPhaseEntry, rPDU2PhasePropertiesEntry=rPDU2PhasePropertiesEntry, airIRmPmDrycooler1=airIRmPmDrycooler1, airFMSysDehumPIDDerivativeD=airFMSysDehumPIDDerivativeD, upsDiagSubSysPowerFactorCorrectionTable=upsDiagSubSysPowerFactorCorrectionTable, airIRRP500GroupConfigAltitudeMetric=airIRRP500GroupConfigAltitudeMetric, upsOutletGroupConfigLoadShedControlRuntimeRemaining=upsOutletGroupConfigLoadShedControlRuntimeRemaining, dcmim2Ident=dcmim2Ident, airIRmIdentFirmwareRevision=airIRmIdentFirmwareRevision, airFMSysAlarmMapMainModMaintReq=airFMSysAlarmMapMainModMaintReq, rPDUOutletControlOutletName=rPDUOutletControlOutletName, xATSGeneratorFuelSystemLowFuelLevelThreshold=xATSGeneratorFuelSystemLowFuelLevelThreshold, airIRG3CMServiceIntervalsAirFilterInterval=airIRG3CMServiceIntervalsAirFilterInterval, airFMSysAlarmMapSysReturnSensFail=airFMSysAlarmMapSysReturnSensFail, cpsCardIdentFunc=cpsCardIdentFunc, xPDUDeviceEarthGroundMonitorPresent=xPDUDeviceEarthGroundMonitorPresent, upsParallelInputVoltage=upsParallelInputVoltage, airIRSCUnitRunHoursEvaporatorFan2=airIRSCUnitRunHoursEvaporatorFan2, airIRRP100GroupStatusAirFlowMetric=airIRRP100GroupStatusAirFlowMetric, ais5000UPS80kVA=ais5000UPS80kVA, upsDiagSubSysExternalSwitchGearEntry=upsDiagSubSysExternalSwitchGearEntry, battManConfigMaxCurrentAcceptanceDeviation=battManConfigMaxCurrentAcceptanceDeviation, rPDU2DevicePropertiesEntry=rPDU2DevicePropertiesEntry, atsInputMaxVoltage=atsInputMaxVoltage, emsOutputRelayControlOutputRelayIndex=emsOutputRelayControlOutputRelayIndex, airFMSysAlarmMapSysSecSensActive=airFMSysAlarmMapSysSecSensActive, xATSGeneratorOutputApparentPower=xATSGeneratorOutputApparentPower, pduForcedBypassMode=pduForcedBypassMode, xATSGeneratorServiceRecordResetDate=xATSGeneratorServiceRecordResetDate, rPDU2DevicePropertiesNumOutlets=rPDU2DevicePropertiesNumOutlets, airFMSysInputs=airFMSysInputs, sPDUOutletControlMSPEntry=sPDUOutletControlMSPEntry, airIRmPmRuntimeMixedModeFreeCooling=airIRmPmRuntimeMixedModeFreeCooling, dm3ConfigBattHighVoltAlarm=dm3ConfigBattHighVoltAlarm, airIRG3GroupConfigCoolPIDReset=airIRG3GroupConfigCoolPIDReset, airIRRP100GroupStatusHumidifyDemand=airIRRP100GroupStatusHumidifyDemand, upsBasicBattery=upsBasicBattery, airIRmPmCmp1HysteresisWinterF=airIRmPmCmp1HysteresisWinterF, airPASupplyTempC=airPASupplyTempC, smartUPS400=smartUPS400, dm3StatusInRlyIndex=dm3StatusInRlyIndex, upsAdvConfigAlarmLoadOver=upsAdvConfigAlarmLoadOver, msvmLowLoad=msvmLowLoad, airIRmPmUnitWinterMode=airIRmPmUnitWinterMode, battManStringDischargeMore60Seconds=battManStringDischargeMore60Seconds, cpsEthMTU=cpsEthMTU, rPDU2DeviceStatusPowerSupply2Status=rPDU2DeviceStatusPowerSupply2Status, apcEnvSTDecTempRateViolationCleared=apcEnvSTDecTempRateViolationCleared, xATSGeneratorServiceTotalRunHoursSinceMaintenance=xATSGeneratorServiceTotalRunHoursSinceMaintenance, upsAdvConfigOutputFreqSlewRate=upsAdvConfigOutputFreqSlewRate, rPDU2OutletSwitchedConfigPowerOffTime=rPDU2OutletSwitchedConfigPowerOffTime, airIRmPmDehumidificMinWaterTempF=airIRmPmDehumidificMinWaterTempF, upsSCGStatusEntry=upsSCGStatusEntry, sPDUMasterConfigMSPPowerOnTimeDelay=sPDUMasterConfigMSPPowerOnTimeDelay, airIRG2RDT2StatusOHEInputState=airIRG2RDT2StatusOHEInputState, emsOutputRelayConfigTable=emsOutputRelayConfigTable, rPDUOutletStatusTable=rPDUOutletStatusTable, battManStringChargerHighVoltageAlarm=battManStringChargerHighVoltageAlarm, xPDUBypassInputVoltagePhaseTableSize=xPDUBypassInputVoltagePhaseTableSize, airIRmPmHumidifier2Type=airIRmPmHumidifier2Type, airIRSCUnitStatusCondenserFanSpeed=airIRSCUnitStatusCondenserFanSpeed, subfeedBreakerUpperAcceptPowerCritical=subfeedBreakerUpperAcceptPowerCritical, airIRG3RDUStatusCondenserSaturationTempUS=airIRG3RDUStatusCondenserSaturationTempUS, rPDU2DeviceStatusPeakPowerStartTime=rPDU2DeviceStatusPeakPowerStartTime, dm3IdentSysFWVersion=dm3IdentSysFWVersion, rARUSensorsConfigSensorNumber=rARUSensorsConfigSensorNumber, upsLocalDisplayButtonFaultCleared=upsLocalDisplayButtonFaultCleared, airIRG2Alarms=airIRG2Alarms, airIRG2RDT2StatusReturnAirTempUS=airIRG2RDT2StatusReturnAirTempUS, airFMSysAlarmMapOutputTable=airFMSysAlarmMapOutputTable, rARUSensorsConfigAruIndex=rARUSensorsConfigAruIndex, airFMSysAlarmMapInputTableSize=airFMSysAlarmMapInputTableSize, battManSystemPilotProbeDisconnected=battManSystemPilotProbeDisconnected, dm3StatusInRlyEntry=dm3StatusInRlyEntry, upsPhaseInputPower=upsPhaseInputPower, airIRmPmMaxLimitReturnAirTemperatureF=airIRmPmMaxLimitReturnAirTemperatureF, batteryPackCommLost=batteryPackCommLost, airIRRP100UnitStatusReturnAirTempMetric=airIRRP100UnitStatusReturnAirTempMetric, memOutputAction=memOutputAction, upsAdvInputStatisticsIndex=upsAdvInputStatisticsIndex, airIRmPmEheating2Type=airIRmPmEheating2Type, upsAdvConfigAlarmRuntimeUnder=upsAdvConfigAlarmRuntimeUnder, iemStatusProbeHighHumidViolation=iemStatusProbeHighHumidViolation, dm3StatusBreakersStatus=dm3StatusBreakersStatus, airIRmPmHotgasHeating=airIRmPmHotgasHeating, sPDUIdentMSPTableSize=sPDUIdentMSPTableSize, atsOutputBankMaxPercentPower=atsOutputBankMaxPercentPower, iemStatusProbesEntry=iemStatusProbesEntry, isxModularDistSysOutputVoltageAlarmLowEnable=isxModularDistSysOutputVoltageAlarmLowEnable, airIRRCUnitRunHoursFan4=airIRRCUnitRunHoursFan4, airIRmPmCmp1StartTempWinterF=airIRmPmCmp1StartTempWinterF, emStatusProbeMaxHumidViolation=emStatusProbeMaxHumidViolation, upsAdvStateSmartUPSSpecificFaults=upsAdvStateSmartUPSSpecificFaults, upsDiagSubSysNetworkComCardModelNumber=upsDiagSubSysNetworkComCardModelNumber, iemRelayFault=iemRelayFault, apcEnvHighHumidityThresholdViolation=apcEnvHighHumidityThresholdViolation, cpsCardConfCardv=cpsCardConfCardv, sPDUOutletConfigMSPannunEntry=sPDUOutletConfigMSPannunEntry, xATSEpoArmed=xATSEpoArmed, rPDU2DevicePropertiesOrientation=rPDU2DevicePropertiesOrientation, airIRG2RDT2ConfigOHEInputNormalState=airIRG2RDT2ConfigOHEInputNormalState, rPDU2IdentIndex=rPDU2IdentIndex, memInputsConfigTableSize=memInputsConfigTableSize, rPDUIdentDeviceLinetoLineVoltage=rPDUIdentDeviceLinetoLineVoltage, airIRmPmFan2ManOpEnable=airIRmPmFan2ManOpEnable, emsOutletControl=emsOutletControl, rPDUPowerSupplyDevice=rPDUPowerSupplyDevice, sPDUMasterControlMSP=sPDUMasterControlMSP, iemConfigContactLocation=iemConfigContactLocation, coolingUnitExtendedDiscreteValueAsString=coolingUnitExtendedDiscreteValueAsString, apcEnvLowHumidityThresholdViolation=apcEnvLowHumidityThresholdViolation, upsDiagPMTable=upsDiagPMTable, upsHighPrecBatteryActualVoltageEntry=upsHighPrecBatteryActualVoltageEntry, iemConfigProbeHighHumidEnable=iemConfigProbeHighHumidEnable, dm3ConfigBattHwTempAlarm=dm3ConfigBattHwTempAlarm, upsEPOActive=upsEPOActive, battManUnitHardwareRev=battManUnitHardwareRev, airIRmPmUnitCondensationTemperature2C=airIRmPmUnitCondensationTemperature2C, apcEnvMaxTempThresholdViolationCleared=apcEnvMaxTempThresholdViolationCleared, airIRG3IdentTableSize=airIRG3IdentTableSize, gutorPDW=gutorPDW, airIRmPmSensor14Failure=airIRmPmSensor14Failure, dm3StatusOEM=dm3StatusOEM, airFMModRHHum=airFMModRHHum, coolingUnitConfigurationAnalogScale=coolingUnitConfigurationAnalogScale, airIRmIdent=airIRmIdent, normalState=normalState, iemStatusProbeCurrentTemp=iemStatusProbeCurrentTemp, mspOutletOff=mspOutletOff, galaxyVMUPS50kVA=galaxyVMUPS50kVA, xATSTestingSimulatePowerFailTimeRemaining=xATSTestingSimulatePowerFailTimeRemaining, upsAdvInputNominalVoltage=upsAdvInputNominalVoltage, apcDeviceConfigChange=apcDeviceConfigChange, airIRRP100GroupStatusDewPointTempUS=airIRRP100GroupStatusDewPointTempUS, xPDUDevice=xPDUDevice, airIRmPmSuctionValve1=airIRmPmSuctionValve1, emsOutputRelayConfig=emsOutputRelayConfig, iemConfigProbeLocation=iemConfigProbeLocation, sPDUOutletConfigMSP=sPDUOutletConfigMSP, emsSensorStatusSensorName=emsSensorStatusSensorName, airIRG3GroupConfigIndex=airIRG3GroupConfigIndex, rPDUIdent=rPDUIdent, xPDUSystemOutputPhaseCurrent=xPDUSystemOutputPhaseCurrent, cpsInfoSerialPortRXBytes=cpsInfoSerialPortRXBytes, rPDULoadPhaseConfigAlarm=rPDULoadPhaseConfigAlarm, airIRRP100UnitStatusFanSpeed=airIRRP100UnitStatusFanSpeed, airIRG2GroupConfigCoolPIDReset=airIRG2GroupConfigCoolPIDReset, emsSensorStatusSensorAlarmDelay=emsSensorStatusSensorAlarmDelay, atsOverCurrent=atsOverCurrent, mUpsContactNumContacts=mUpsContactNumContacts, xPDUGroundMonitorPoint=xPDUGroundMonitorPoint, upsOutputSwitchOpened=upsOutputSwitchOpened, xATSRemoteStartContactMismatchCleared=xATSRemoteStartContactMismatchCleared, airIRmPmSetpointHumidity=airIRmPmSetpointHumidity, airIRmPmEheating4Hysteresis=airIRmPmEheating4Hysteresis, cpsSerialGroupEntry=cpsSerialGroupEntry, airIRmPmWaterTemperatureTooLow=airIRmPmWaterTemperatureTooLow, atsConfigFrequencyDeviation=atsConfigFrequencyDeviation, smartUPS1000=smartUPS1000, atsOutputLoad=atsOutputLoad, airIRG3GroupStatusAvgReturnTempMetric=airIRG3GroupStatusAvgReturnTempMetric, dm3ConfigCompTempCoeff=dm3ConfigCompTempCoeff, airIRRP500UnitConfigOutputNormalState=airIRRP500UnitConfigOutputNormalState, battManUnitStatusSerialNumber=battManUnitStatusSerialNumber, airIRG3RDUConfigOutputSource=airIRG3RDUConfigOutputSource, emsOutletStatusOutletNormalState=emsOutletStatusOutletNormalState, upsAdvControlUpsSleep=upsAdvControlUpsSleep, battManStringCalib=battManStringCalib, rARUFanStatusFanInServiceDate=rARUFanStatusFanInServiceDate, xATSGeneratorGroundFaultAlarmCleared=xATSGeneratorGroundFaultAlarmCleared, airIRG3IdentName=airIRG3IdentName, airIRG3RDUStatusPump2HeadPressureMetric=airIRG3RDUStatusPump2HeadPressureMetric, airIRmPmPump2LinearRangeF=airIRmPmPump2LinearRangeF, rPDUOutletConfigChange=rPDUOutletConfigChange, dcmim2StatusRectTable=dcmim2StatusRectTable, airIRRP100GroupConfigNumberofCoolingUnits=airIRRP100GroupConfigNumberofCoolingUnits, airIRRCGroupStatus=airIRRCGroupStatus, upsSCGPowerSynchronizationDelayTime=upsSCGPowerSynchronizationDelayTime, airFMSysAlarmMapExpMod1=airFMSysAlarmMapExpMod1, airIRRP500UnitStatusContainmtDPUS=airIRRP500UnitStatusContainmtDPUS, isxModularDistModuleBreakerPositionAlarms=isxModularDistModuleBreakerPositionAlarms, xATSInputContactStateNormal=xATSInputContactStateNormal, memSensorsHumidityMaxThresh=memSensorsHumidityMaxThresh, memSensorsAlarmGeneration=memSensorsAlarmGeneration, rPDU2SensorDiscrete=rPDU2SensorDiscrete, airIRmPmCmp2HysteresisSummerK=airIRmPmCmp2HysteresisSummerK, upsDiagSwitchGearOutputSwitchStatus=upsDiagSwitchGearOutputSwitchStatus, airFMModNomCoilDiffPresInWC=airFMModNomCoilDiffPresInWC, airIRG3RDURunHoursPump2=airIRG3RDURunHoursPump2, upsDiagSubSysNetworkComCardDateOfManufacture=upsDiagSubSysNetworkComCardDateOfManufacture, atsOutputPhaseState=atsOutputPhaseState, rpduInformationalConditionCleared=rpduInformationalConditionCleared, upsAdvControlFirmwareUpdate=upsAdvControlFirmwareUpdate, dcLVDImminentAlarm=dcLVDImminentAlarm, iemConfigProbeLowTempThreshold=iemConfigProbeLowTempThreshold, xATSEngineStopAsserted=xATSEngineStopAsserted, mfiletransferConfigTFTP=mfiletransferConfigTFTP, upsHighPrecInputEnergyUsage=upsHighPrecInputEnergyUsage, airIRRP500UnitStatusHumidifyDemand=airIRRP500UnitStatusHumidifyDemand, airFMSysAlarmMapExpMod1Entry=airFMSysAlarmMapExpMod1Entry, airFMSysAlarmMapInput16=airFMSysAlarmMapInput16, isxModularSubfeedBreakerOpenAlarm=isxModularSubfeedBreakerOpenAlarm, xPDUSystemOutputOverCurrentThreshold=xPDUSystemOutputOverCurrentThreshold, atsIdentNominalLineFrequency=atsIdentNominalLineFrequency, airFMSysAlarmMapOutput5=airFMSysAlarmMapOutput5, rPDU2PhaseTableSize=rPDU2PhaseTableSize, mtrapargsOctetString08=mtrapargsOctetString08, xPDUOutputFrequencyAlarmCleared=xPDUOutputFrequencyAlarmCleared, airIRmAlarmsEntry=airIRmAlarmsEntry)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmReturnAirTemperature=airIRmPmReturnAirTemperature, airIRG2GroupSetptsSupplyAirSetpointMetric=airIRG2GroupSetptsSupplyAirSetpointMetric, airIRG3RDUStatusEntry=airIRG3RDUStatusEntry, upsDiagSubSysChargerTable=upsDiagSubSysChargerTable, airFMSysAlarmMapExpMod2AirBlckIntOpen=airFMSysAlarmMapExpMod2AirBlckIntOpen, emsSensorDisconnected=emsSensorDisconnected, airPARemoteTempF=airPARemoteTempF, rPDULoadStatusLoadState=rPDULoadStatusLoadState, upsAdvTestCalibrationResults=upsAdvTestCalibrationResults, atsCommunicationEstablished=atsCommunicationEstablished, airIRSCUnitIdentSerialNumber=airIRSCUnitIdentSerialNumber, airFMGroupCfgResetFieldServiceDefaults=airFMGroupCfgResetFieldServiceDefaults, airIRG2RDT2RunHoursUnit=airIRG2RDT2RunHoursUnit, xPDUSystemBreakers=xPDUSystemBreakers, xATS=xATS, rPDUIdentSerialNumber=rPDUIdentSerialNumber, sPDUOutletConfigMSPgsEntry=sPDUOutletConfigMSPgsEntry, airIRG3GroupStatusMaxReturnAirTempMetric=airIRG3GroupStatusMaxReturnAirTempMetric, airIRSCUnitIdentLocation=airIRSCUnitIdentLocation, rPDU2PhasePropertiesNumber=rPDU2PhasePropertiesNumber, sPDUMasterConfigMSPIndex=sPDUMasterConfigMSPIndex, airFMModRHBlwrCtrl1=airFMModRHBlwrCtrl1, atsConfigChange=atsConfigChange, airFMGroupFailoverModLossOrLowAirFlow=airFMGroupFailoverModLossOrLowAirFlow, bmBatManChargerAlarm=bmBatManChargerAlarm, xATSEpoTripped=xATSEpoTripped, sPDUMasterConfigVMAudioAlarmActivated=sPDUMasterConfigVMAudioAlarmActivated, isxModularDistSysVoltageTable=isxModularDistSysVoltageTable, airIRmPmWaterTemperature2F=airIRmPmWaterTemperature2F, airIRRP100UnitConfigHumidifyEnable=airIRRP100UnitConfigHumidifyEnable, iemStatusProbeNumber=iemStatusProbeNumber, airIRRP500GroupConfigCoolDerivativeD=airIRRP500GroupConfigCoolDerivativeD, battManInputContactState=battManInputContactState, airIRmPmReturnAirHumidityTooLow=airIRmPmReturnAirHumidityTooLow, sPDUOutletConfigVMOutletIndex=sPDUOutletConfigVMOutletIndex, xATSTestingResultsLastWarmupDuration=xATSTestingResultsLastWarmupDuration, airIRG3RDUStatusSubcoolerOutletTempMetric=airIRG3RDUStatusSubcoolerOutletTempMetric, airIRG3IdentTable=airIRG3IdentTable, galaxy9000SSC=galaxy9000SSC, isxModularDistributionCommEstablished=isxModularDistributionCommEstablished, airIRmPmHumidifier1Runtime=airIRmPmHumidifier1Runtime, emsInputContactConfigEntry=emsInputContactConfigEntry, dcMinorAlarmCleared=dcMinorAlarmCleared, dcCommunicationLost=dcCommunicationLost, rPDU2OutletSwitchedStatusTable=rPDU2OutletSwitchedStatusTable, upsAdvInputNominalFrequency=upsAdvInputNominalFrequency, sPDUMasterStatusMSPTableSize=sPDUMasterStatusMSPTableSize, emStatusProbesTable=emStatusProbesTable, apcForcedEntryCleared=apcForcedEntryCleared, airFMSysCndsrFluidVlvCloseDelay=airFMSysCndsrFluidVlvCloseDelay, apCPSPwNum=apCPSPwNum, airFMGroupCfgDmdFightStatus=airFMGroupCfgDmdFightStatus, airFMSysNumRemoteSensors=airFMSysNumRemoteSensors, airFMSysCoilFluidActivDeadbandF=airFMSysCoilFluidActivDeadbandF, rPDU2BankPropertiesNumber=rPDU2BankPropertiesNumber, xATSTestingStatus=xATSTestingStatus, isxModularDistModuleBreakerPercent=isxModularDistModuleBreakerPercent, galaxy5500UPS80KVA=galaxy5500UPS80KVA, xPDUInputVoltageLowAlarm=xPDUInputVoltageLowAlarm, dm3StatusOEMshuntOffset=dm3StatusOEMshuntOffset, airFMModHumidifierType=airFMModHumidifierType, dcTemperatureAlarmCleared=dcTemperatureAlarmCleared, cpsAP930xAdm=cpsAP930xAdm, rPDU2PhaseToPhaseStatusModule=rPDU2PhaseToPhaseStatusModule, rPDU2DeviceStatusPeakPower=rPDU2DeviceStatusPeakPower, xPDUFuseBlownAlarmCleared=xPDUFuseBlownAlarmCleared, airIRRP500GroupStatusAirFlowMetric=airIRRP500GroupStatusAirFlowMetric, airFMModPropTableSize=airFMModPropTableSize, airFMModServIntComp2=airFMModServIntComp2, apcDoorEstablishedComms=apcDoorEstablishedComms, rPDUOutletOverloadCleared=rPDUOutletOverloadCleared, upsDiagSubSysXRCommunicationCardTableSize=upsDiagSubSysXRCommunicationCardTableSize, airFMSysLowCtrlHum=airFMSysLowCtrlHum, dcmim2IdentSystem=dcmim2IdentSystem, upsPhaseInputPowerFactor=upsPhaseInputPowerFactor, emsProbeConfigProbeDeltaHumidity=emsProbeConfigProbeDeltaHumidity, airIRmPmSensor11Failure=airIRmPmSensor11Failure, hardware=hardware, emsConfigName=emsConfigName, coolingUnitExtendedAnalogValue=coolingUnitExtendedAnalogValue, airIRRP500UnitIdentID=airIRRP500UnitIdentID, airIRRCGroupConfig=airIRRCGroupConfig, xATSGeneratorServiceTotalRunHoursLifetime=xATSGeneratorServiceTotalRunHoursLifetime, airIRRP100GroupSetpointsReheatUS=airIRRP100GroupSetpointsReheatUS, emsStatusInputContactCount=emsStatusInputContactCount, xATSSystemOutputUnderVoltThreshold=xATSSystemOutputUnderVoltThreshold, rPDU2IdentEntry=rPDU2IdentEntry, airIRG3GroupSetpointsLightingOnTime=airIRG3GroupSetpointsLightingOnTime, coolingUnitExtendedDiscreteEntry=coolingUnitExtendedDiscreteEntry, sPDUOutletConfigMSPgsPowerOffDelay=sPDUOutletConfigMSPgsPowerOffDelay, sPDUIdentModelNumberVM=sPDUIdentModelNumberVM, battManString1BatteryChemLowVoltageAlarm=battManString1BatteryChemLowVoltageAlarm, atsOutputPhaseEntry=atsOutputPhaseEntry, airFMGroupSysComm=airFMGroupSysComm, airIRRCUnitThresholdsEnteringFluidHighTempUS=airIRRCUnitThresholdsEnteringFluidHighTempUS, dm3ConfigLVD=dm3ConfigLVD, airIRRCUnitStatusSupplyAirTempMetric=airIRRCUnitStatusSupplyAirTempMetric, airIRRCGroupStatusActiveFlowControlStatus=airIRRCGroupStatusActiveFlowControlStatus, atsConfigTransferVoltageRange=atsConfigTransferVoltageRange, rPDUStatusPhaseState=rPDUStatusPhaseState, airIRRP100UnitStatusSuctionPressureMetric=airIRRP100UnitStatusSuctionPressureMetric, upsPowerFrameLayoutTable=upsPowerFrameLayoutTable, battManIdent=battManIdent, airIRRCUnitStatusFanSpeed=airIRRCUnitStatusFanSpeed, airIRmPmEheating4Type=airIRmPmEheating4Type, airIRmPmHumidifier1Alarm20us=airIRmPmHumidifier1Alarm20us, sPDUOutletStatusMSPOutletName=sPDUOutletStatusMSPOutletName, sPDUMasterControlMSPTableSize=sPDUMasterControlMSPTableSize, dcmim2StatusAlarms=dcmim2StatusAlarms, airFMSysNumPCIOMs=airFMSysNumPCIOMs, airIRRP500UnitConfig=airIRRP500UnitConfig, airIRmPmDehumidificManOpRunning=airIRmPmDehumidificManOpRunning, airFMStatusSystemRemoteLowTempC=airFMStatusSystemRemoteLowTempC, dcmim2StatusRectFail=dcmim2StatusRectFail, uioInputContactStatusContactName=uioInputContactStatusContactName, airFMModHumidity=airFMModHumidity, xPDUInputContactEntry=xPDUInputContactEntry, airIRG2RDT2RunHoursCompressor=airIRG2RDT2RunHoursCompressor, upsAdvIdentFirmwareRevision=upsAdvIdentFirmwareRevision, isxModularHighCurrentThresholdViolationCleared=isxModularHighCurrentThresholdViolationCleared, airIRRCUnitThresholds=airIRRCUnitThresholds, atsInputFrequency=atsInputFrequency, xATSGeneratorAdvStatusOilPressure=xATSGeneratorAdvStatusOilPressure, airIRG3GroupConfigCoolGainP=airIRG3GroupConfigCoolGainP, airFMModBlwr1Vlt=airFMModBlwr1Vlt, battManConfigNumberOfBoosts=battManConfigNumberOfBoosts, emsInputContactStateAbnormal=emsInputContactStateAbnormal, airIRRP500UnitRunHoursHeater3=airIRRP500UnitRunHoursHeater3, airIRmPmCmp2HysteresisWinter=airIRmPmCmp2HysteresisWinter, isxModularDistSubFeedLoadingTableSize=isxModularDistSubFeedLoadingTableSize, cpsSerialPortPppOptions=cpsSerialPortPppOptions, airFMModBlwr1RatedCurrent=airFMModBlwr1RatedCurrent, memInputAnalogCalibrationPoint3Value=memInputAnalogCalibrationPoint3Value, coolingUnitConfigurationDiscreteDescription=coolingUnitConfigurationDiscreteDescription, battManString2BatteryCalibIndex=battManString2BatteryCalibIndex, apcHardwareStateAbnormal=apcHardwareStateAbnormal, xATSGeneratorOutput=xATSGeneratorOutput, isxModularDistSysPowerKwhResetDate=isxModularDistSysPowerKwhResetDate, upsAdvOutputFrequency=upsAdvOutputFrequency, rPDU2DeviceConfigNearOverloadPowerThreshold=rPDU2DeviceConfigNearOverloadPowerThreshold, xATSInternalATSFaultCleared=xATSInternalATSFaultCleared, rPDUIdentDeviceBreakerRating=rPDUIdentDeviceBreakerRating, deviceName=deviceName, airIRRP100UnitThresholds=airIRRP100UnitThresholds, upsDischarged=upsDischarged, sPDUOutletConfig=sPDUOutletConfig, gutor=gutor, airIRG3CMStatusCMID=airIRG3CMStatusCMID, dcmim2ConfigLVDIndex=dcmim2ConfigLVDIndex, xPDUUPSInputVoltageLtoNPresent=xPDUUPSInputVoltageLtoNPresent, airIRSCUnitStatusContainmtDPUS=airIRSCUnitStatusContainmtDPUS, airFMStatusSystemActionTempC=airFMStatusSystemActionTempC, rPDU2DevicePropertiesNumMeteredOutlets=rPDU2DevicePropertiesNumMeteredOutlets, upsDiagSubSysChargerStatus=upsDiagSubSysChargerStatus, powerNetSoftwareConfig=powerNetSoftwareConfig, xATSDCBackupAlarmCleared=xATSDCBackupAlarmCleared, apcEnvSensorDisconnected=apcEnvSensorDisconnected, airIRmPmEheating1Type=airIRmPmEheating1Type, airIRmPmAuxiliaryAlarm1=airIRmPmAuxiliaryAlarm1, airIRSCGroupStatusMaxRackInletTempMetric=airIRSCGroupStatusMaxRackInletTempMetric, airIRSC=airIRSC, upsAdvInputFrequency=upsAdvInputFrequency, airIRmPmEheating1Running=airIRmPmEheating1Running, dm3ConfigSysLowTempAlarm=dm3ConfigSysLowTempAlarm, rPDUIdentDevicePowerWatts=rPDUIdentDevicePowerWatts, airFMSysFastStartup=airFMSysFastStartup, airFMModFilterDiffPresInWC=airFMModFilterDiffPresInWC, apcAnalogInputHighThresholdViolation=apcAnalogInputHighThresholdViolation, mfiletransferStatusLastTransferResult=mfiletransferStatusLastTransferResult, rPDU2BankConfigLowLoadCurrentThreshold=rPDU2BankConfigLowLoadCurrentThreshold, xATSSystemOutputVoltageLtoL=xATSSystemOutputVoltageLtoL, upsPhaseInputMinVoltage=upsPhaseInputMinVoltage, rPDU2SensorTempHumidity=rPDU2SensorTempHumidity, xATSGeneratorControlSwitchNotAutoCleared=xATSGeneratorControlSwitchNotAutoCleared, rPDUStatusOutletNumber=rPDUStatusOutletNumber, airIRRCUnitIdentLocation=airIRRCUnitIdentLocation, airIRmPmEheating2StartTemperature=airIRmPmEheating2StartTemperature, emsBeaconOff=emsBeaconOff, rPDU2OutletSwitchedConfigModule=rPDU2OutletSwitchedConfigModule, memSensorsTempLongDecRateThreshValue=memSensorsTempLongDecRateThreshValue, airIRmPmLouver3ManOpEnable=airIRmPmLouver3ManOpEnable, xATSIdentSerialNumber=xATSIdentSerialNumber, airIRmPmPump4PressureSetpoint=airIRmPmPump4PressureSetpoint, upsAdvStateTotaltimeonbypass=upsAdvStateTotaltimeonbypass, generator=generator, airIRRP100UnitStatusRackInletTempUS=airIRRP100UnitStatusRackInletTempUS, emsOutletConfigTable=emsOutletConfigTable, mUpsEnvironRelativeHumidity2=mUpsEnvironRelativeHumidity2, airIRRP100UnitConfigDehumidifyEnable=airIRRP100UnitConfigDehumidifyEnable, emsSensorControlSensorUserName=emsSensorControlSensorUserName, airIRG3RDUStatusSubcoolerOutletTempUS=airIRG3RDUStatusSubcoolerOutletTempUS, airIRmPmDrycooler1Runtime=airIRmPmDrycooler1Runtime, rARUStatusAruTemp3=rARUStatusAruTemp3, airIRmPmEheating4ManOpEnable=airIRmPmEheating4ManOpEnable, airIRSCGroupStatusCoolOutput=airIRSCGroupStatusCoolOutput, rPDU2IdentModule=rPDU2IdentModule, upsHighPrecInput=upsHighPrecInput, dcmim2StatusLVDState=dcmim2StatusLVDState, upsParallelSysName=upsParallelSysName, xATSGeneratorFuelSystem=xATSGeneratorFuelSystem, rPDU2DeviceStatusLoadState=rPDU2DeviceStatusLoadState, airIRG3RDUStatusOutletWaterTempMetric=airIRG3RDUStatusOutletWaterTempMetric, airIRmPmPump2LinearRangeK=airIRmPmPump2LinearRangeK, upsDiagSubSysBattMonitorStatus=upsDiagSubSysBattMonitorStatus, xATSSwitchBlockMap=xATSSwitchBlockMap, atsOutputBankEntry=atsOutputBankEntry, apcRegisteredUserAccessDenied=apcRegisteredUserAccessDenied, airIRmPmCommon5=airIRmPmCommon5, upsDiagSubSysFrameManufactureDate=upsDiagSubSysFrameManufactureDate, airIRRC100Series=airIRRC100Series, airIRmPmSensor10Defect=airIRmPmSensor10Defect, airIRG3CMStatusLocalDisplayOnOffEnabled=airIRG3CMStatusLocalDisplayOnOffEnabled, airIRmPmWaterTemperature2C=airIRmPmWaterTemperature2C, dm3ConfigInRlyDelay=dm3ConfigInRlyDelay, airFMSysAlarmMapExpMod2BlwrCntl1Fail=airFMSysAlarmMapExpMod2BlwrCntl1Fail, apCPSNPcmcia=apCPSNPcmcia, dm3StatusRectDesc=dm3StatusRectDesc, cpsDNSpriserv=cpsDNSpriserv, memInputAnalogCalibrationPoint3=memInputAnalogCalibrationPoint3, airIRmPmHumidifier1ManOpEnable=airIRmPmHumidifier1ManOpEnable, airFMSysTempAlarmDelay=airFMSysTempAlarmDelay, battManString1BatteryUserLowVoltageAlarm=battManString1BatteryUserLowVoltageAlarm, dcMajorAlarm=dcMajorAlarm, upsAdvControlRebootUpsWithOrWithoutAC=upsAdvControlRebootUpsWithOrWithoutAC, dcmim2StatusBattCapacityTestResult=dcmim2StatusBattCapacityTestResult, xPDUDeviceNominalMainInputVoltage=xPDUDeviceNominalMainInputVoltage, airIRmPmPump4ManOpEnable=airIRmPmPump4ManOpEnable, airIRmPmAuxiliaryAlarm6=airIRmPmAuxiliaryAlarm6, rPDU2DeviceConfigEntry=rPDU2DeviceConfigEntry, rARUSensorsConfigTableSize=rARUSensorsConfigTableSize, ais5000UPS60kVA=ais5000UPS60kVA, dm3StatusPowerModules=dm3StatusPowerModules, isxModularDistSubFeedLoadingCurrent=isxModularDistSubFeedLoadingCurrent, airIRG2RDT2RunHoursFanPSTableSize=airIRG2RDT2RunHoursFanPSTableSize, dcmim2=dcmim2, rPDU2PhaseStatusLoadState=rPDU2PhaseStatusLoadState, airIRG3CMSetpointsTable=airIRG3CMSetpointsTable, apcRegisteredUserAccessChange=apcRegisteredUserAccessChange, xPDUSystemOutput=xPDUSystemOutput, mtrapargs=mtrapargs, airFMSysAlarmMapMainModBlwrCntl1Fail=airFMSysAlarmMapMainModBlwrCntl1Fail, outletOff=outletOff, airIRmPmFan3ManOpEnable=airIRmPmFan3ManOpEnable, airIRmPmAuxiliaryAlarm5=airIRmPmAuxiliaryAlarm5, masterswitchVM=masterswitchVM, isxModularDistInfoSegmentIndex=isxModularDistInfoSegmentIndex, memSensorsStatusSensorNumber=memSensorsStatusSensorNumber, airIRmPmPWWHeatingCurrentValue=airIRmPmPWWHeatingCurrentValue, airIRmPmFan3Speed=airIRmPmFan3Speed, airIRRP100UnitStatusSupplyHumidity=airIRRP100UnitStatusSupplyHumidity, rPDU2OutletMeteredStatusIndex=rPDU2OutletMeteredStatusIndex, coolingUnitConfigurationStringMaxLength=coolingUnitConfigurationStringMaxLength, emsProbeConfigProbeHighTempThresh=emsProbeConfigProbeHighTempThresh, emsSensorStatusSensorNormalState=emsSensorStatusSensorNormalState)
mibBuilder.exportSymbols("PowerNet-MIB", emsProbeConfigProbeSTDecTempTime=emsProbeConfigProbeSTDecTempTime, upsAdvOutput=upsAdvOutput, upsDiagSubSysBattMonitorSerialNum=upsDiagSubSysBattMonitorSerialNum, airPASupplyTempF=airPASupplyTempF, battManUnitCalibIndex=battManUnitCalibIndex, apcCriticalDiscreteInputContactStateNormal=apcCriticalDiscreteInputContactStateNormal, airIRmPmEheating2StartTemperatureK=airIRmPmEheating2StartTemperatureK, upsDiagBatteryEntry=upsDiagBatteryEntry, airIRmPmPWWHeatingLinearRangeK=airIRmPmPWWHeatingLinearRangeK, cpsSerialPortSockPoll=cpsSerialPortSockPoll, upsDiagSubSysFrameEntry=upsDiagSubSysFrameEntry, cpsEthItf=cpsEthItf, dm3ConfigInRlyTableSize=dm3ConfigInRlyTableSize, airFMModBlwr2Vlt=airFMModBlwr2Vlt, rPDU2OutletMeteredPropertiesBank=rPDU2OutletMeteredPropertiesBank, airIRmPmFan1ManOpSpeed=airIRmPmFan1ManOpSpeed, upsAdvConfigBatterySelection=upsAdvConfigBatterySelection, dcmim2StatusSysBusVoltage=dcmim2StatusSysBusVoltage, airFMGroupCfgSetpointShareStatus=airFMGroupCfgSetpointShareStatus, upsNeedsFactorySetupFault=upsNeedsFactorySetupFault, airIRRP100GroupConfigCoolDerivativeD=airIRRP100GroupConfigCoolDerivativeD, airFMSysOutputs=airFMSysOutputs, atsOutputMaxPercentPower=atsOutputMaxPercentPower, aruFanRuntimeAlarmCleared=aruFanRuntimeAlarmCleared, memInputType=memInputType, airIRmPmMyZoneRoomTemperatureC=airIRmPmMyZoneRoomTemperatureC, airIRRP100GroupStatusHumidifyOutput=airIRRP100GroupStatusHumidifyOutput, upsDiagSubSysXRCommunicationCardFrameIndex=upsDiagSubSysXRCommunicationCardFrameIndex, atsConfigResetValues=atsConfigResetValues, airIRmPmHumidifier2=airIRmPmHumidifier2, xATSGeneratorServiceRunHoursUntilServiceDate=xATSGeneratorServiceRunHoursUntilServiceDate, eps6000UPSWithSSC=eps6000UPSWithSSC, airFMSysHotWaterTempF=airFMSysHotWaterTempF, dcBBCommunicationEstablished=dcBBCommunicationEstablished, smartUPS=smartUPS, rARUConfigAruTempOvrdEnableDisable=rARUConfigAruTempOvrdEnableDisable, airIRmPmSensor8Failure=airIRmPmSensor8Failure, airIRmPmPump4HysteresisF=airIRmPmPump4HysteresisF, apcEnvLTIncTempRateViolation=apcEnvLTIncTempRateViolation, upsAdvOutputNominalFrequency=upsAdvOutputNominalFrequency, airIRG2RDT2StatusSuctionTempMetric=airIRG2RDT2StatusSuctionTempMetric, cpsSerialPortProtocol=cpsSerialPortProtocol, xATSSource1Name=xATSSource1Name, pduCircuitPanelFrequencyOutOfRange=pduCircuitPanelFrequencyOutOfRange, upsBatterySoftBusStartFaultCleared=upsBatterySoftBusStartFaultCleared, airIRRP500GroupStatusReheatOutput=airIRRP500GroupStatusReheatOutput, airIRG3AlarmsEventCode=airIRG3AlarmsEventCode, airIRmPmPump3=airIRmPmPump3, airIRG2IdentManufactureDate=airIRG2IdentManufactureDate, airFMSysAlarmMapInput8=airFMSysAlarmMapInput8, emStatusProbeName=emStatusProbeName, isxModularPduDeviceNominalMainInputVoltage=isxModularPduDeviceNominalMainInputVoltage, rPDULoadStatusTable=rPDULoadStatusTable, rPDU2OutletSwitchedPropertiesName=rPDU2OutletSwitchedPropertiesName, sPDUOutletConfigVMEntry=sPDUOutletConfigVMEntry, dm3ConfigBattery=dm3ConfigBattery, xATSSource1Position=xATSSource1Position, rPDU2OutletSwitchedTableSize=rPDU2OutletSwitchedTableSize, emsAlarmDeviceStatusDeviceName=emsAlarmDeviceStatusDeviceName, atsInputEntry=atsInputEntry, aruExhaustTemperatureAlarm=aruExhaustTemperatureAlarm, airFMGroupCfgFailoverCommLoss=airFMGroupCfgFailoverCommLoss, isxModularDistModuleBreakerPower=isxModularDistModuleBreakerPower, battManConfigDischargeVoltageAlarmLevel=battManConfigDischargeVoltageAlarmLevel, uioOutputRelayStatusCommStatus=uioOutputRelayStatusCommStatus, memSensorsHumidityThreshHysteresis=memSensorsHumidityThreshHysteresis, airIRmPmCoolingPriority=airIRmPmCoolingPriority, sPDUOutletStatusMSPEntry=sPDUOutletStatusMSPEntry, rPDU2SensorTempHumidityConfigTemperatureAlarmEnable=rPDU2SensorTempHumidityConfigTemperatureAlarmEnable, dcmim2StatusAlarmsTableSize=dcmim2StatusAlarmsTableSize, dm3ConfigRectImbalanceAlarm=dm3ConfigRectImbalanceAlarm, memModulesStatusHardwareRev=memModulesStatusHardwareRev, mtrapargsOctetString=mtrapargsOctetString, dcPINChanged=dcPINChanged, battManString2BatteryChemHighVoltageAlarm=battManString2BatteryChemHighVoltageAlarm, mtrapargsIpAddress02=mtrapargsIpAddress02, airIRSCUnitIdentHardwareRevision=airIRSCUnitIdentHardwareRevision, dm3ConfigOutRlyName=dm3ConfigOutRlyName, rARUSensorsName=rARUSensorsName, airIRmPmEheating2Running=airIRmPmEheating2Running, airIRG3CMServiceIntervalsEntry=airIRG3CMServiceIntervalsEntry, rPDU2OutletSwitchedControlModule=rPDU2OutletSwitchedControlModule, airFMModRHComp1=airFMModRHComp1, dcmim2Control=dcmim2Control, xATSDeviceServiceType=xATSDeviceServiceType, mtrapargsGauge03=mtrapargsGauge03, rPDULoadDevBankMaxLoad=rPDULoadDevBankMaxLoad, emsAlarmDeviceStatus=emsAlarmDeviceStatus, envMinHumidityThresholdViolationCleared=envMinHumidityThresholdViolationCleared, airIRRCUnitConfigStartupDelay=airIRRCUnitConfigStartupDelay, upsPhaseOutputPercentPower=upsPhaseOutputPercentPower, isxModularDistSubFeedInfoKwhUsage=isxModularDistSubFeedInfoKwhUsage, sPDUOutletConfigMSPmupsP1HiHum=sPDUOutletConfigMSPmupsP1HiHum, smartUPS3Phase20kVA=smartUPS3Phase20kVA, xPDUDeviceInfraStruXureType=xPDUDeviceInfraStruXureType, airPADateOfManufacture=airPADateOfManufacture, xATSInputContactTable=xATSInputContactTable, rARUStatusAruCommStatus=rARUStatusAruCommStatus, airIRG2RDT2StatusSuctionTempUS=airIRG2RDT2StatusSuctionTempUS, ais5000UPS30kVA=ais5000UPS30kVA, airPACompressor=airPACompressor, isxModularDistModuleOutputBreakerMap=isxModularDistModuleOutputBreakerMap, airIRRP100UnitThresholdsSupplyHumidityLow=airIRRP100UnitThresholdsSupplyHumidityLow, upsNeedsFactorySetupFaultCleared=upsNeedsFactorySetupFaultCleared, airIRRP500UnitStatusDehumidifyOutput=airIRRP500UnitStatusDehumidifyOutput, airIRmPmOutsideAirTemperature=airIRmPmOutsideAirTemperature, airIRSCUnitStatus=airIRSCUnitStatus, airIRmPmCmp2StartTempSummerF=airIRmPmCmp2StartTempSummerF, xPDUSystemStateAlarmCleared=xPDUSystemStateAlarmCleared, xATSSwitchStatisticsTable=xATSSwitchStatisticsTable, pduMaintenanceBypassMode=pduMaintenanceBypassMode, airIRmPmCmp2Running=airIRmPmCmp2Running, airFMModBlwr2DCLinkVlt=airFMModBlwr2DCLinkVlt, dm3StatusDistribution=dm3StatusDistribution, accessPXStatusFrontDoorLock=accessPXStatusFrontDoorLock, dc2=dc2, upsBasicBatteryTimeOnBattery=upsBasicBatteryTimeOnBattery, airIRRP500UnitStatusFanSpeed=airIRRP500UnitStatusFanSpeed, isxModularDistInfoMeterDateOfManufacture=isxModularDistInfoMeterDateOfManufacture, upsRebootStarted=upsRebootStarted, userDeleted=userDeleted, dcmim2ConfigBattCapacityTestEndThresh=dcmim2ConfigBattCapacityTestEndThresh, xPDUBranchBreakerTable=xPDUBranchBreakerTable, airFMModBlwr2ActTorq=airFMModBlwr2ActTorq, dm3ConfigBreakersIndex=dm3ConfigBreakersIndex, conPortServ=conPortServ, sPDUMasterControlVMEntry=sPDUMasterControlVMEntry, airIRG3GroupSetpointsSupplyAirSetpointMetric=airIRG3GroupSetpointsSupplyAirSetpointMetric, upsDiagSubSysDisplayInterfaceCardTableSize=upsDiagSubSysDisplayInterfaceCardTableSize, xATSSource2VoltageLtoL=xATSSource2VoltageLtoL, airIRmPmAuxiliaryAlarm9=airIRmPmAuxiliaryAlarm9, atsInputTable=atsInputTable, airIRRP100GroupSetpointsSupplyAirUS=airIRRP100GroupSetpointsSupplyAirUS, battManStringCalibTableSize=battManStringCalibTableSize, airFMSysCoolSetpointF=airFMSysCoolSetpointF, isxModularDistModuleInfoNumCables=isxModularDistModuleInfoNumCables, isxModularOutputVoltageHighThresholdViolation=isxModularOutputVoltageHighThresholdViolation, battManString2ResponseTestCurrentBenchmarkEntry=battManString2ResponseTestCurrentBenchmarkEntry, isxModularDistModuleOutputAlarmLowEnable=isxModularDistModuleOutputAlarmLowEnable, cpsSerialPortAuthRadP=cpsSerialPortAuthRadP, airIRRP500UnitConfigHumidifierControl=airIRRP500UnitConfigHumidifierControl, xPDUOutputRelayTable=xPDUOutputRelayTable, airIRRP100UnitServiceIntervalCompressorAlarm=airIRRP100UnitServiceIntervalCompressorAlarm, airIRRP500UnitServiceIntervalFans=airIRRP500UnitServiceIntervalFans, xATSInternalATSFault=xATSInternalATSFault, airFMSysHumAlarmDelay=airFMSysHumAlarmDelay, emsConfig=emsConfig, upsHighPrecBatteryCurrentIndex=upsHighPrecBatteryCurrentIndex, airFMSysAlarmMapInput11=airFMSysAlarmMapInput11, upsHighPrecBatteryPackCartridgeStatus=upsHighPrecBatteryPackCartridgeStatus, airIRG3RDUServiceIntervalsAirFilterInterval=airIRG3RDUServiceIntervalsAirFilterInterval, isxModularDistSubFeedInfoThresholdMin=isxModularDistSubFeedInfoThresholdMin, upsSCGActiveMembershipStatus=upsSCGActiveMembershipStatus, airIRSCGroupSetptsCoolSetpointMetric=airIRSCGroupSetptsCoolSetpointMetric, rPDUOutletControl=rPDUOutletControl, airIRmPmSensor19Failure=airIRmPmSensor19Failure, airFMSysAlarmMapExpMod1CoolFail=airFMSysAlarmMapExpMod1CoolFail, upsIntegratedATSLineFailDelay=upsIntegratedATSLineFailDelay, sPDUOutletStatusMSPIndex=sPDUOutletStatusMSPIndex, airIRRP500GroupSetpointsDehumidify=airIRRP500GroupSetpointsDehumidify, airIRG3RDUStatusPowerSource=airIRG3RDUStatusPowerSource, emStatusContactStatus=emStatusContactStatus, airPASetpointTempF=airPASetpointTempF, rPDU2OutletMeteredStatusState=rPDU2OutletMeteredStatusState, dm3StatusOutRlyEntry=dm3StatusOutRlyEntry, upsAdvIdent=upsAdvIdent, airFMSysAlarmMapInput4=airFMSysAlarmMapInput4, rPDU2OutletSwitchedControlName=rPDU2OutletSwitchedControlName, rackAirRemovalUnit=rackAirRemovalUnit, airFMSysCoilFluidDehumDmd=airFMSysCoilFluidDehumDmd, airIRmPmTimerStop=airIRmPmTimerStop, rPDU2BankStatusModule=rPDU2BankStatusModule, airIRG3CMRunHoursAirFilter=airIRG3CMRunHoursAirFilter, emsProbeStatusProbeIndex=emsProbeStatusProbeIndex, airIRSCGroupSetpoints=airIRSCGroupSetpoints, airIRmPmSetpointTemperatureDayF=airIRmPmSetpointTemperatureDayF, airIRmPmCmp1StartTempSummerF=airIRmPmCmp1StartTempSummerF, badVoltageCleared=badVoltageCleared, upsPhaseNumOutputPhases=upsPhaseNumOutputPhases, airIRRCUnitConfigPowerSource=airIRRCUnitConfigPowerSource, upsAdvTestDiagnosticDay=upsAdvTestDiagnosticDay, rPDUOutletConfigOutletBank=rPDUOutletConfigOutletBank, aruRedundantPowerLostAlarmCleared=aruRedundantPowerLostAlarmCleared, emsIdentFirmwareRev=emsIdentFirmwareRev, smartUPS2000=smartUPS2000, rPDUOutletNearOverload=rPDUOutletNearOverload, aruFanFailCleared=aruFanFailCleared, airIRmPmDrycooler4=airIRmPmDrycooler4, airIRmPmStoptimeUnit=airIRmPmStoptimeUnit, airIRG3CMStatusLiquidInletPressureUS=airIRG3CMStatusLiquidInletPressureUS, coolingUnitExtendedDiscreteIntegerReferenceKey=coolingUnitExtendedDiscreteIntegerReferenceKey, airIRRP100GroupConfigNumberOfActiveFlowControllers=airIRRP100GroupConfigNumberOfActiveFlowControllers, sPDUMasterControlVMCommand=sPDUMasterControlVMCommand, airIRRCGroupStatusAirFlowMetric=airIRRCGroupStatusAirFlowMetric, airFMSysActualSteamHotGasReheat=airFMSysActualSteamHotGasReheat, upsDiagSubSysBattMonitorFrameIndex=upsDiagSubSysBattMonitorFrameIndex, airIRRP100UnitConfigIdleOnCoolFail=airIRRP100UnitConfigIdleOnCoolFail, airIRG2GroupConfig=airIRG2GroupConfig, galaxy300UPS10kVA31=galaxy300UPS10kVA31, upsAdvInputVoltageTHD=upsAdvInputVoltageTHD, airIRRP100GroupConfig=airIRRP100GroupConfig, memBeaconStatusTable=memBeaconStatusTable, emsStatusCommStatus=emsStatusCommStatus, airIRmPmDrycooler1SummerStartTempC=airIRmPmDrycooler1SummerStartTempC, emsProbeStatusProbeHighHumidityThresh=emsProbeStatusProbeHighHumidityThresh, sPDUMasterPending=sPDUMasterPending, isxModularDistSysCurrentAlarmMinEnable=isxModularDistSysCurrentAlarmMinEnable, battManString2BatteryIndex=battManString2BatteryIndex, airIRmPmReturnAirTemperatureTooHigh=airIRmPmReturnAirTemperatureTooHigh, upsAdvTotalDCCurrentTableIndex=upsAdvTotalDCCurrentTableIndex, isxModularDistSubFeedInfoKwhReset=isxModularDistSubFeedInfoKwhReset, sPDUOutletConfigVMTable=sPDUOutletConfigVMTable, airIRmPmHotGasHeatingAlarm=airIRmPmHotGasHeatingAlarm, airIRRP100UnitStatusCompressorDriveAlarmStatus=airIRRP100UnitStatusCompressorDriveAlarmStatus, airIRmPmNumberOfElectricHeaters=airIRmPmNumberOfElectricHeaters, galaxy5500UPS40KVA=galaxy5500UPS40KVA, xPDUIdentDateOfManufacture=xPDUIdentDateOfManufacture, airFMSysAlarmMap=airFMSysAlarmMap, memOutletConfigTable=memOutletConfigTable, atsInputMaxPower=atsInputMaxPower, powerRestored=powerRestored, dm3StatusOEMrectOffset=dm3StatusOEMrectOffset, rPDU2DevicePropertiesIndex=rPDU2DevicePropertiesIndex, atsConfigPhaseTable=atsConfigPhaseTable, xPDUSystemOutputMaxKWPower=xPDUSystemOutputMaxKWPower, airIRRP500GroupConfigCoolGainP=airIRRP500GroupConfigCoolGainP, apcDoorClosed=apcDoorClosed, memSensorsTempMaxThresh=memSensorsTempMaxThresh, airIRRCGroupStatusMaxRackInletTempUS=airIRRCGroupStatusMaxRackInletTempUS, atsOutputMinPercentPower=atsOutputMinPercentPower, dcmim2StatusLVDTable=dcmim2StatusLVDTable, iemConfigProbeLowHumidThreshold=iemConfigProbeLowHumidThreshold, airIRRCUnitConfigCoolCapacity=airIRRCUnitConfigCoolCapacity, airIRRP100UnitThresholdsRackInletHighTempMetric=airIRRP100UnitThresholdsRackInletHighTempMetric, mfiletransferControl=mfiletransferControl, airIRG3RDUStatusPump2HeadPressureUS=airIRG3RDUStatusPump2HeadPressureUS, externalSwitchGearClosed=externalSwitchGearClosed, airFMSysAlarmMapMainModCondPumpFail=airFMSysAlarmMapMainModCondPumpFail, networkAir=networkAir, battManStringCalibEntry=battManStringCalibEntry, airFMModHumEntry=airFMModHumEntry, upsBatteryNeedsReplacement=upsBatteryNeedsReplacement, airIRG3CMStatusEvaporatorTempMetric=airIRG3CMStatusEvaporatorTempMetric, xPDUDeviceBypassInputPresent=xPDUDeviceBypassInputPresent, airFMModIdent=airFMModIdent, xATSGeneratorIdentModelNumber=xATSGeneratorIdentModelNumber, upsHighPrecTotalDCCurrentPolarity=upsHighPrecTotalDCCurrentPolarity, smartUPS3Phase10kVA=smartUPS3Phase10kVA, airIRmPmSensor2Defect=airIRmPmSensor2Defect, isxModularDistModuleOutputThresholdLow=isxModularDistModuleOutputThresholdLow, memSensorsHumidityLowThresh=memSensorsHumidityLowThresh, airIRmPmLouver3Position=airIRmPmLouver3Position, battManDCCurrentZeroCalib=battManDCCurrentZeroCalib, airIRAlarmConditionsIndex=airIRAlarmConditionsIndex)
mibBuilder.exportSymbols("PowerNet-MIB", upsInverterOverTemperatureCleared=upsInverterOverTemperatureCleared, upsAdvControl=upsAdvControl, eps8000FreqConverter=eps8000FreqConverter, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared, airIRG3IdentRDUSysOID=airIRG3IdentRDUSysOID, xPDUOutputRelayEntry=xPDUOutputRelayEntry, accessPXStatusFront=accessPXStatusFront, dm3StatusFuses=dm3StatusFuses, airFMModServIntHumReset=airFMModServIntHumReset, rPDU2PhaseToPhaseStatusVoltage3to1=rPDU2PhaseToPhaseStatusVoltage3to1, upsPhaseOutputMinPercentLoad=upsPhaseOutputMinPercentLoad, battManager=battManager, battManString2ResponseTestChangeEntry=battManString2ResponseTestChangeEntry, isxModularDistSysCurrentPhaseIndex=isxModularDistSysCurrentPhaseIndex, airIRmPmMyZoneSupplyTemperature=airIRmPmMyZoneSupplyTemperature, cpsSerialPortConf=cpsSerialPortConf, accessPXStatusRearDoorHandle=accessPXStatusRearDoorHandle, isxModularDistModuleInfoEntry=isxModularDistModuleInfoEntry, upsDiagIMTableSize=upsDiagIMTableSize, atsStatusPhaseSyncStatus=atsStatusPhaseSyncStatus, airFMSysAlarmMapInput1=airFMSysAlarmMapInput1, airIRG3RDUStatusCondenserInletTempMetric=airIRG3RDUStatusCondenserInletTempMetric, dcFanFailAlarm=dcFanFailAlarm, upsAdvStateAbnormalConditions=upsAdvStateAbnormalConditions, rPDUOutletLowLoad=rPDUOutletLowLoad, airIRmPmMinLimitSupplyAirTemperatureF=airIRmPmMinLimitSupplyAirTemperatureF, dm3StatusLVDName=dm3StatusLVDName, atsPowerSupplyFailureCleared=atsPowerSupplyFailureCleared, upsHighPrecBatteryCurrentEntry=upsHighPrecBatteryCurrentEntry, xATSGenCommEstablished=xATSGenCommEstablished, upsAdvBatteryPower=upsAdvBatteryPower, isxModularDistModuleOutputKwhReset=isxModularDistModuleOutputKwhReset, upsParallelSysLocalAddress=upsParallelSysLocalAddress, airIRRCUnitStatusFluidFlowUS=airIRRCUnitStatusFluidFlowUS, rPDU=rPDU, airIRmPmDrycooler4Running=airIRmPmDrycooler4Running, dm3StatusRectTableSize=dm3StatusRectTableSize, galaxy7000SSC800kVA=galaxy7000SSC800kVA, airIRRP100GroupSetpointsFanSpeedPreference=airIRRP100GroupSetpointsFanSpeedPreference, airIRG3RDUStatusInletWaterTempUS=airIRG3RDUStatusInletWaterTempUS, atsOutputBankMaxPercentLoad=atsOutputBankMaxPercentLoad, emsOutputRelayStateNormal=emsOutputRelayStateNormal, rARUStatusAruName=rARUStatusAruName, rARUPowerStatusRedundantAcConfig=rARUPowerStatusRedundantAcConfig, AirIRG2RDType2IOState=AirIRG2RDType2IOState, emsInputContactConfigInputContactName=emsInputContactConfigInputContactName, airIRG3RDUStatusTotalRDUOutputPower=airIRG3RDUStatusTotalRDUOutputPower, airFMStatusSystemActionTempF=airFMStatusSystemActionTempF, upsPhaseOutput=upsPhaseOutput, airIRRP100UnitStatusFilterDPUS=airIRRP100UnitStatusFilterDPUS, dm3StatusInRlyTable=dm3StatusInRlyTable, apcCriticalDiscreteInputContactStateAbnormal=apcCriticalDiscreteInputContactStateAbnormal, mtrapargsString04=mtrapargsString04, atsOutputPercentLoad=atsOutputPercentLoad, atsStatusOverCurrentState=atsStatusOverCurrentState, airFMSysResetUserDflts=airFMSysResetUserDflts, dm3ConfigOutRlyTableSize=dm3ConfigOutRlyTableSize, airIRmPmDrycooler2ManOpEnable=airIRmPmDrycooler2ManOpEnable, sPDUMasterStatusVMRebootDuration=sPDUMasterStatusVMRebootDuration, upsIntegratedATS=upsIntegratedATS, airFMModCoolEntry=airFMModCoolEntry, airIRRP500GroupStatusHumidifyDemand=airIRRP500GroupStatusHumidifyDemand, airIRG3CMThresholdsRackInletTempHighUS=airIRG3CMThresholdsRackInletTempHighUS, memInputAnalogCalibrationPoint1Value=memInputAnalogCalibrationPoint1Value, airIRSCUnitThresholdsSupplyAirHighTempUS=airIRSCUnitThresholdsSupplyAirHighTempUS, dm3StatusAlarmsText=dm3StatusAlarmsText, upsHighPrecTotalDCCurrentTable=upsHighPrecTotalDCCurrentTable, airFMSysHumState=airFMSysHumState, airIRmPmFan1ManOpRunning=airIRmPmFan1ManOpRunning, upsDiagSubSysIntBypSwitchHardwareRev=upsDiagSubSysIntBypSwitchHardwareRev, upsAdvIdentFirmwareRevision2=upsAdvIdentFirmwareRevision2, airFMSysAlarmMapMainModBlwrCntl2Fail=airFMSysAlarmMapMainModBlwrCntl2Fail, uioInputContactStatusCurrentState=uioInputContactStatusCurrentState, airPAHardwareRevision=airPAHardwareRevision, airIRRP500UnitStatusContainmtDPMetric=airIRRP500UnitStatusContainmtDPMetric, rPDU2DeviceStatusTable=rPDU2DeviceStatusTable, sPDUOutletConfigMSPallIndex=sPDUOutletConfigMSPallIndex, airFMSysAlarmMapOutput9=airFMSysAlarmMapOutput9, airIRmPmReturnAirHumidityTooHigh=airIRmPmReturnAirHumidityTooHigh, airFMModBlwr2HeatsinkTempC=airFMModBlwr2HeatsinkTempC, xATSGeneratorLowCoolantTempAlarm=xATSGeneratorLowCoolantTempAlarm, xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared, airIRmPmPump2HysteresisF=airIRmPmPump2HysteresisF, upsDiagSubSysExternalPowerFrameBoardIndex=upsDiagSubSysExternalPowerFrameBoardIndex, airIRmPmFan2=airIRmPmFan2, emsProbeConfigProbeHighHumidityThresh=emsProbeConfigProbeHighHumidityThresh, airIRmPmMinLimitWaterTemperatureC=airIRmPmMinLimitWaterTemperatureC, upsDiagSubFeedBreakerIndex=upsDiagSubFeedBreakerIndex, noBatteriesCleared=noBatteriesCleared, sPDUMasterStatusVM=sPDUMasterStatusVM, airIRG3GroupConfigConfigurationType=airIRG3GroupConfigConfigurationType, sPDUOutletConfigMSPmupsP1LowHum=sPDUOutletConfigMSPmupsP1LowHum, outletReboot=outletReboot, isxModularTotalOutputCurrentLowThresholdViolationCleared=isxModularTotalOutputCurrentLowThresholdViolationCleared, coolingUnitConfigurationAnalogValue=coolingUnitConfigurationAnalogValue, airIRmPmEheating2Runtime=airIRmPmEheating2Runtime, emsOutputRelayControlTable=emsOutputRelayControlTable, dcMajorAlarmCleared=dcMajorAlarmCleared, airIRmPmCmp2Runtime=airIRmPmCmp2Runtime, airIRmPmDehumidificRuntime=airIRmPmDehumidificRuntime, battManString2BatteryEntry=battManString2BatteryEntry, airIRG2GroupConfigRuntimeBalancingEnable=airIRG2GroupConfigRuntimeBalancingEnable, emsMajorAlarm=emsMajorAlarm, upsAdvInputBypassTotalActivePower=upsAdvInputBypassTotalActivePower, airFMModStmElectHumMode=airFMModStmElectHumMode, airFMGroupFailoverModBlwrCntrl2Fail=airFMGroupFailoverModBlwrCntrl2Fail, dm3StatusSysRectVoltSanity=dm3StatusSysRectVoltSanity, upsAdvBatteryRunTimeRemaining=upsAdvBatteryRunTimeRemaining, airFMSysReheatPIDDerivativeD=airFMSysReheatPIDDerivativeD, airFMGroupCfgIdleBlower=airFMGroupCfgIdleBlower, memSensorsStatusModuleNumber=memSensorsStatusModuleNumber, iemConfigContactSeverity=iemConfigContactSeverity, sPDUOutletConfigMSPallOutletName=sPDUOutletConfigMSPallOutletName, upsIntegratedATSSelectedSource=upsIntegratedATSSelectedSource, memInputAnalogThreshHysteresis=memInputAnalogThreshHysteresis, mconfigTrapReceiverTable=mconfigTrapReceiverTable, rPDU2BankStatusLoadState=rPDU2BankStatusLoadState, airIRmPmWaterDetector=airIRmPmWaterDetector, emsOutletStatusEntry=emsOutletStatusEntry, dm3ConfigRectConfigAlarm=dm3ConfigRectConfigAlarm, coolingUnitExtendedAnalogTableIndex=coolingUnitExtendedAnalogTableIndex, airIRG2RDT2StatusOutputState=airIRG2RDT2StatusOutputState, upsAdvInputLineFailCause=upsAdvInputLineFailCause, xATSGeneratorOverspeed=xATSGeneratorOverspeed, airIRG2RDT2RunHoursFanPSHours=airIRG2RDT2RunHoursFanPSHours, pduGroundOvercurrent=pduGroundOvercurrent, rPDULoadBankConfigEntry=rPDULoadBankConfigEntry, isx24ModuleHalfRackPdu=isx24ModuleHalfRackPdu, rPDUStatusPhaseNumber=rPDUStatusPhaseNumber, upsOutletGroupConfigLoadShedTimeOnBattery=upsOutletGroupConfigLoadShedTimeOnBattery, upsSyncCtrlGroupStatus=upsSyncCtrlGroupStatus, airIRRP500UnitThresholdsSupplyHumidityHigh=airIRRP500UnitThresholdsSupplyHumidityHigh, airIRmPmPump4Runtime=airIRmPmPump4Runtime, dm3IdentSysDescriptionText=dm3IdentSysDescriptionText, xPDUBranchCurrentLowAlarmCleared=xPDUBranchCurrentLowAlarmCleared, airIRRCUnitStatusContainmtDPUS=airIRRCUnitStatusContainmtDPUS, xPDUBypassInputUnderVoltThreshold=xPDUBypassInputUnderVoltThreshold, upsOutletGroupConfigEntry=upsOutletGroupConfigEntry, upsDiagSwitchGearBypassInputSwitchStatus=upsDiagSwitchGearBypassInputSwitchStatus, cpsMultipleIP=cpsMultipleIP, airIRRP100UnitThresholdsSupplyHumidityHigh=airIRRP100UnitThresholdsSupplyHumidityHigh, xATSGeneratorStatusOperational=xATSGeneratorStatusOperational, atsSourceStatusFail=atsSourceStatusFail, upsPhaseInputMaxPower=upsPhaseInputMaxPower, airIRG3CMSetpointsEntry=airIRG3CMSetpointsEntry, sPDUOutletControlMSP=sPDUOutletControlMSP, airIRSCUnitConfigAltitudeUS=airIRSCUnitConfigAltitudeUS, ceWarningCondition=ceWarningCondition, battManInputContactAlarmDelay=battManInputContactAlarmDelay, airFMModIdentTableSize=airFMModIdentTableSize, rPDU2DeviceStatusPowerFactor=rPDU2DeviceStatusPowerFactor, uioSensorStatusSensorLocation=uioSensorStatusSensorLocation, isxModularPduIdentMonitorCardHardwareRev=isxModularPduIdentMonitorCardHardwareRev, apcEnvSTIncTempRateViolation=apcEnvSTIncTempRateViolation, dm3ConfigOutRlyAlarm=dm3ConfigOutRlyAlarm, airIRmPmMyZoneEmergencyTemperature=airIRmPmMyZoneEmergencyTemperature, pduCircuitPanelNeutralOvercurrent=pduCircuitPanelNeutralOvercurrent, airFMSeries=airFMSeries, upsHighPrecTotalDCFrameCurrent=upsHighPrecTotalDCFrameCurrent, battManAlarmEnvironment=battManAlarmEnvironment, emsOutputRelayControl=emsOutputRelayControl, atsInputType=atsInputType, airFMSysActualHumCtrl=airFMSysActualHumCtrl, envMinTempThresholdViolation=envMinTempThresholdViolation, airIRmPmPump2StartTemperature=airIRmPmPump2StartTemperature, airFMSysAlarmMapOutput=airFMSysAlarmMapOutput, upsAdvTotalDCCurrentPolarity=upsAdvTotalDCCurrentPolarity, smartBoostOn=smartBoostOn, emsProbeStatusProbeHighTempThresh=emsProbeStatusProbeHighTempThresh, airIRmPmGECWvalveManOpOpeningGrade=airIRmPmGECWvalveManOpOpeningGrade, apcHandleOpened=apcHandleOpened, airIRSCGroupSetptsFanSpeedPreference=airIRSCGroupSetptsFanSpeedPreference, emConfigProbeMaxTempThreshold=emConfigProbeMaxTempThreshold, galaxy=galaxy, aruSmokeAlarm=aruSmokeAlarm, dm3StatusLVDTable=dm3StatusLVDTable, batteryDecrease=batteryDecrease, eps7000UPS=eps7000UPS, rARUConfigAruName=rARUConfigAruName, bmsInformationalConditionCleared=bmsInformationalConditionCleared, upsDiagSubSysNetworkComCardFirmwareAppOSRev=upsDiagSubSysNetworkComCardFirmwareAppOSRev, airIRmIdentManufactureDate=airIRmIdentManufactureDate, cpsMotd=cpsMotd, battManInputContactTable=battManInputContactTable, upsBatteryTempSensorFaultCleared=upsBatteryTempSensorFaultCleared, xATSOutputCurrentHighAlarmCleared=xATSOutputCurrentHighAlarmCleared, airIRmPmSensor16Defect=airIRmPmSensor16Defect, xPDUBypassVoltageHighAlarm=xPDUBypassVoltageHighAlarm, xATSTestingScheduleNextTestDate=xATSTestingScheduleNextTestDate, rpduInformationalCondition=rpduInformationalCondition, airIRmPmEheating2Hysteresis=airIRmPmEheating2Hysteresis, humidityThresholdViolation2=humidityThresholdViolation2, cpsInfoSerialPortSigDSR=cpsInfoSerialPortSigDSR, upsAdvConfigMaxShutdownTime=upsAdvConfigMaxShutdownTime, xATSOutputRelays=xATSOutputRelays, atsSourceSwitched=atsSourceSwitched, sPDUOutletConfigVMRebootDuration=sPDUOutletConfigVMRebootDuration, airIRSCUnitIdentManufactureDate=airIRSCUnitIdentManufactureDate, emsMajorAlarmCleared=emsMajorAlarmCleared, airIRmPmGlobalZoneDataEmergencyOpMode=airIRmPmGlobalZoneDataEmergencyOpMode, coolingUnitStatusAnalogTableSize=coolingUnitStatusAnalogTableSize, upsState=upsState, emConfigProbeMaxTempEnable=emConfigProbeMaxTempEnable, cpsSerialPortSockTx=cpsSerialPortSockTx, airIRmPmCmp1StartTempSummer=airIRmPmCmp1StartTempSummer, sPDUMasterConfigVMLowLoadWarningThreshold=sPDUMasterConfigVMLowLoadWarningThreshold, airFMSysPresentRole=airFMSysPresentRole, airFMSysOutputEntry=airFMSysOutputEntry, coolingUnitStatusDiscreteValueAsString=coolingUnitStatusDiscreteValueAsString, airIRmPmLouver2=airIRmPmLouver2, rPDUStatusBankState=rPDUStatusBankState, sPDUOutletConfigVMPowerOffTime=sPDUOutletConfigVMPowerOffTime, airIRRP500UnitStatusHumidifierCurrent=airIRRP500UnitStatusHumidifierCurrent, airIRG2GroupConfigCoolResetRateI=airIRG2GroupConfigCoolResetRateI, upsSwitchGearLayoutPositionID=upsSwitchGearLayoutPositionID, airIRG2GroupStatusMaxReturnAirTempUS=airIRG2GroupStatusMaxReturnAirTempUS, cpsSerialFacility=cpsSerialFacility, airFMModServIntResets=airFMModServIntResets, apcEnvSTDecTempRateViolation=apcEnvSTDecTempRateViolation, airIRRP100UnitStatusCompressorDriveCurrent=airIRRP100UnitStatusCompressorDriveCurrent, airFMSysInputTableSize=airFMSysInputTableSize, iemContactFaultCleared=iemContactFaultCleared, upsDiagSubSysSystemPowerSupplySerialNum=upsDiagSubSysSystemPowerSupplySerialNum, upsIntegratedATSSourceEntry=upsIntegratedATSSourceEntry, airInRoom=airInRoom, battManAlarmBatteries=battManAlarmBatteries, dm3IdentSysCntrlRev=dm3IdentSysCntrlRev, airIRmPmFan2Runtime=airIRmPmFan2Runtime, rPDU2DeviceStatusIndex=rPDU2DeviceStatusIndex, emsOutputRelayStatusOutputRelayIndex=emsOutputRelayStatusOutputRelayIndex, airIRG3GroupStatusIndex=airIRG3GroupStatusIndex, apcOutputRelayStateNormal=apcOutputRelayStateNormal, msvmOutletOn=msvmOutletOn, rPDU2SensorDiscreteConfigNumber=rPDU2SensorDiscreteConfigNumber, battManTestResults=battManTestResults, airIRmPmRuntimeHeating=airIRmPmRuntimeHeating, airIRmPmLocalStop=airIRmPmLocalStop, batteryFramePositionID=batteryFramePositionID, smartBoostOff=smartBoostOff, powerNetSoftwareEntry=powerNetSoftwareEntry, memInputsCommStatus=memInputsCommStatus, sPDUMasterConfigVMName=sPDUMasterConfigVMName, airFMSysAlarmMapExpMod2LowSupplyTemp=airFMSysAlarmMapExpMod2LowSupplyTemp, airIRSCUnitStatusCoolDemand=airIRSCUnitStatusCoolDemand, rPDU2PhasePropertiesModule=rPDU2PhasePropertiesModule, upsDiagPMTableSize=upsDiagPMTableSize, xATSSwitchSettingsMaxFrequencyDeviation=xATSSwitchSettingsMaxFrequencyDeviation, airIRSCGroupConfigAltitudeUS=airIRSCGroupConfigAltitudeUS, airFMSysAlarmMapInput9=airFMSysAlarmMapInput9, apCPSpname=apCPSpname, airIRmPmUnitControlType=airIRmPmUnitControlType, atsConfigBankTableIndex=atsConfigBankTableIndex, airFMSysAlarmMapExpMod2Table=airFMSysAlarmMapExpMod2Table, airIRmPmPWWHeatingLinearRangeF=airIRmPmPWWHeatingLinearRangeF)
mibBuilder.exportSymbols("PowerNet-MIB", apCPSFlashSize=apCPSFlashSize, airIRmPmRemoteUPS=airIRmPmRemoteUPS, airIRmPmLouver1Position=airIRmPmLouver1Position, upsAdvOutputActivePower=upsAdvOutputActivePower, uioOutputRelayStatusEntry=uioOutputRelayStatusEntry, dm3ConfigInRlyEntry=dm3ConfigInRlyEntry, airIRRCUnitServiceIntervalsAirFilter=airIRRCUnitServiceIntervalsAirFilter, rPDU2OutletMeteredConfigLowLoadCurrentThreshold=rPDU2OutletMeteredConfigLowLoadCurrentThreshold, airIRG2RD=airIRG2RD, atsOutputBankMinPercentLoad=atsOutputBankMinPercentLoad, memSensorsConfigTableSize=memSensorsConfigTableSize, airIRG3RDUStatusCondenserOutletPressureUS=airIRG3RDUStatusCondenserOutletPressureUS, battManIdentSerialNumber=battManIdentSerialNumber, airIRG3GroupStatusAvgAirFlowMetric=airIRG3GroupStatusAvgAirFlowMetric, dm3StatusAlarmsTableSize=dm3StatusAlarmsTableSize, emsOutletStateNormal=emsOutletStateNormal, upsHighPrecOutputLoad=upsHighPrecOutputLoad, accessPXStatusBeacon=accessPXStatusBeacon, airIRG3RDUSetpointsEntry=airIRG3RDUSetpointsEntry, isxModularPduIdentMonitorCardSerialNumber=isxModularPduIdentMonitorCardSerialNumber, airIRmPmCmp1ManOperationState=airIRmPmCmp1ManOperationState, emsSensorConfigSensorSystemName=emsSensorConfigSensorSystemName, rARUSensorsTempMaxThresh=rARUSensorsTempMaxThresh, dcmim2IdentSysFWVersion=dcmim2IdentSysFWVersion, netLock=netLock, xATSGeneratorFuelSystemFuelLevel=xATSGeneratorFuelSystemFuelLevel, apcOutputRelayFault=apcOutputRelayFault, upsOutletGroupTurnedOff=upsOutletGroupTurnedOff, accPX=accPX, atsRMSOverFrequencyCleared=atsRMSOverFrequencyCleared, xATSStartFailure=xATSStartFailure, isxModularDistModuleOutputKwhResetDate=isxModularDistModuleOutputKwhResetDate, atsStatusCommStatus=atsStatusCommStatus, upsAdvConfigUpperOutputVoltTolerance=upsAdvConfigUpperOutputVoltTolerance, rPDU2DeviceStatusNPSType=rPDU2DeviceStatusNPSType, airIRRCUnitStatusEnteringFluidTemperatureUS=airIRRCUnitStatusEnteringFluidTemperatureUS, dcRectifierOVPAlarmCleared=dcRectifierOVPAlarmCleared, airIRG3RDUThresholdsDeviceIndex=airIRG3RDUThresholdsDeviceIndex, airIRmPmCmp1HysteresisSummer=airIRmPmCmp1HysteresisSummer, airIRG3IdentSerialNumber=airIRG3IdentSerialNumber, airIRG3RDUConfigCalibrateRefrigerantLeakDetector=airIRG3RDUConfigCalibrateRefrigerantLeakDetector, xATSTestingResultsLastCrankDuration=xATSTestingResultsLastCrankDuration, upsDiagSubSysDisplayInterfaceCardTable=upsDiagSubSysDisplayInterfaceCardTable, xPDUInputVoltageHighAlarm=xPDUInputVoltageHighAlarm, isxModularTotalOutputCurrentMaxThresholdViolation=isxModularTotalOutputCurrentMaxThresholdViolation, smwInformationalConditionCleared=smwInformationalConditionCleared, airIRmPmDrycooler4ManOpEnable=airIRmPmDrycooler4ManOpEnable, bmBatManCommEstab=bmBatManCommEstab, upsOutletGroupCommand=upsOutletGroupCommand, atsCalibrationInputPhaseEntry=atsCalibrationInputPhaseEntry, dm3StatusSysTempUnits=dm3StatusSysTempUnits, airIRmPmDrycooler2SummerStartTempF=airIRmPmDrycooler2SummerStartTempF, airIRSCUnitSetpoints=airIRSCUnitSetpoints, dcmim2StatusSysTempUnits=dcmim2StatusSysTempUnits, emConfigProbeHighTempEnable=emConfigProbeHighTempEnable, emsOutputRelayControlEntry=emsOutputRelayControlEntry, airIRmPmCmp2HysteresisWinterF=airIRmPmCmp2HysteresisWinterF, emConfigProbeLowHumidEnable=emConfigProbeLowHumidEnable, airIRmPmReturnAirTemperatureF=airIRmPmReturnAirTemperatureF, rPDULoadDevMaxOutletTable=rPDULoadDevMaxOutletTable, isxModularDistSysCurrentThresholdLow=isxModularDistSysCurrentThresholdLow, rARUSensorsTempShortDecRateThreshTime=rARUSensorsTempShortDecRateThreshTime, sPDUMasterConfigVMTable=sPDUMasterConfigVMTable, cpsInfoSerialPortSpeed=cpsInfoSerialPortSpeed, pduUpsOperationMode=pduUpsOperationMode, airFMSysCoolPIDMethod=airFMSysCoolPIDMethod, coolingUnitConfigurationAnalogEntry=coolingUnitConfigurationAnalogEntry, airIRmPmCompressor1Failure=airIRmPmCompressor1Failure, airIRmPmCmp1StartTempWinter=airIRmPmCmp1StartTempWinter, rPDU2SensorTempHumidityConfigTable=rPDU2SensorTempHumidityConfigTable, xPDUMainInputVoltagePhaseIndex=xPDUMainInputVoltagePhaseIndex, airFMModRHComp1Reset=airFMModRHComp1Reset, galaxy5000UPS20KVA=galaxy5000UPS20KVA, memOutletLocation=memOutletLocation, airFMModBlwr1CtrlCoolFanLife=airFMModBlwr1CtrlCoolFanLife, airIRmPmMaxLimitWaterTemperatureC=airIRmPmMaxLimitWaterTemperatureC, apcOutputRelayFaultCleared=apcOutputRelayFaultCleared, battManString1OhmicValueData=battManString1OhmicValueData, airFMSysAvgRemoteTempF=airFMSysAvgRemoteTempF, emConfigProbeNumber=emConfigProbeNumber, airFMSysSteamHumDmd=airFMSysSteamHumDmd, mspOutletOn=mspOutletOn, airFMSysActualSteamElectrodeHum=airFMSysActualSteamElectrodeHum, memInputAnalogCalibrationPoint5=memInputAnalogCalibrationPoint5, rARUSensorsTempShortIncRateThreshTime=rARUSensorsTempShortIncRateThreshTime, airIRSCUnitStatusDischargePressureMetric=airIRSCUnitStatusDischargePressureMetric, atsConfigBankEntry=atsConfigBankEntry, airIRmPmAuxAlarm1=airIRmPmAuxAlarm1, subfeedBreakerPresent=subfeedBreakerPresent, bmsCriticalConditionCleared=bmsCriticalConditionCleared, envMaxHumidityThresholdViolationCleared=envMaxHumidityThresholdViolationCleared, airIRmPmFilter3Clogged=airIRmPmFilter3Clogged, atsOutputBankCurrent=atsOutputBankCurrent, airIRmPmMinLimitReturnAirHumidity=airIRmPmMinLimitReturnAirHumidity, symmetraPx250kVA=symmetraPx250kVA, airFMGroupSysRoleAssignment=airFMGroupSysRoleAssignment, rARUSensorsTempLowThresh=rARUSensorsTempLowThresh, atsInputMinVoltage=atsInputMinVoltage, atsNearOverloadCleared=atsNearOverloadCleared, rPDULoadDevBankEntry=rPDULoadDevBankEntry, rPDUIdentDeviceDisplayOrientation=rPDUIdentDeviceDisplayOrientation, memBeaconConfigTableSize=memBeaconConfigTableSize, atsOutputBankTableIndex=atsOutputBankTableIndex, smartUPS10000=smartUPS10000, airFMSysNumModules=airFMSysNumModules, memOutletNormalState=memOutletNormalState, airIRmPmCommon3=airIRmPmCommon3, xATSSystemOutputFrequencyTolerance=xATSSystemOutputFrequencyTolerance, airIRmPmUnitEvaporationTemperature1F=airIRmPmUnitEvaporationTemperature1F, memSensorsTempHighThresh=memSensorsTempHighThresh, cpsSerialPortAuthtype=cpsSerialPortAuthtype, airIRAlarms=airIRAlarms, xPDUUPSInputVoltagePhaseEntry=xPDUUPSInputVoltagePhaseEntry, airIRmPmGvalveManOperationEnable=airIRmPmGvalveManOperationEnable, rPDULoadDevOutletIndex=rPDULoadDevOutletIndex, upsDiagSubSysIntBypSwitchTableSize=upsDiagSubSysIntBypSwitchTableSize, dm3ConfigLVDTableSize=dm3ConfigLVDTableSize, rPDU2OutletSwitchedConfigNumber=rPDU2OutletSwitchedConfigNumber, xATSSwitchTimersEntry=xATSSwitchTimersEntry, upsDiagSubSysInverterStatus=upsDiagSubSysInverterStatus, battManString2ResponseTestChangeData=battManString2ResponseTestChangeData, rPDU2Outlet=rPDU2Outlet, airIRmPmSensor15Failure=airIRmPmSensor15Failure, upsParallelOutputPower=upsParallelOutputPower, airFMGroupFailover=airFMGroupFailover, memSensorsTempLongDecRateThreshTime=memSensorsTempLongDecRateThreshTime, airIRG2GroupSetptsCoolSetpointUS=airIRG2GroupSetptsCoolSetpointUS, airIRRP500UnitThresholdsEnteringFluidHighTempUS=airIRRP500UnitThresholdsEnteringFluidHighTempUS, upsParallelOutputApparentPowerTable=upsParallelOutputApparentPowerTable, upsBasicControlConserveBattery=upsBasicControlConserveBattery, upsParallelSysRemoteAddress=upsParallelSysRemoteAddress, isxModularDistModuleOutputAlarmGeneration=isxModularDistModuleOutputAlarmGeneration, cpsSerialPortNetMask=cpsSerialPortNetMask, airIRmPmHumidifier3Failure=airIRmPmHumidifier3Failure, etlStatus=etlStatus, dm3ConfigRectifier=dm3ConfigRectifier, airFMSysAlarmMapInput15=airFMSysAlarmMapInput15, airIRmPmDrycooler2Runtime=airIRmPmDrycooler2Runtime, upsIntegratedATSLineStabilityDelay=upsIntegratedATSLineStabilityDelay, smartUPS3Phase30kVA=smartUPS3Phase30kVA, apcEnvMaxTempThresholdViolation=apcEnvMaxTempThresholdViolation, airFMSysAlarmMapMainModEntry=airFMSysAlarmMapMainModEntry, envHighTempThresholdViolation=envHighTempThresholdViolation, airFMSysInterstageDelay=airFMSysInterstageDelay, airIRRP500UnitIdentManufactureDate=airIRRP500UnitIdentManufactureDate, xATSGeneratorEngineCold=xATSGeneratorEngineCold, airIRmPmCmp2HysteresisSummerF=airIRmPmCmp2HysteresisSummerF, upsDiagSubSysInverterFirmwareRev=upsDiagSubSysInverterFirmwareRev, bmBatManCommLost=bmBatManCommLost, dm3StatusSystemTemp=dm3StatusSystemTemp, airIRG2RDT2StatusEvaporatorFanSpeed=airIRG2RDT2StatusEvaporatorFanSpeed, emStatusContactsTable=emStatusContactsTable, isxModularDistModuleInfoTable=isxModularDistModuleInfoTable, upsBasicConfigDeviceTable=upsBasicConfigDeviceTable, upsDiagSubFeedPhaseEntry=upsDiagSubFeedPhaseEntry, cpsDNSserv=cpsDNSserv, airIRmPmPump3HysteresisF=airIRmPmPump3HysteresisF, galaxyVMUPS180kVA=galaxyVMUPS180kVA, airIRmPmPump2Hysteresis=airIRmPmPump2Hysteresis, iemConfigRelayName=iemConfigRelayName, emsOutletConfigEntry=emsOutletConfigEntry, airIRG2GroupStatusMaxRackInletTempUS=airIRG2GroupStatusMaxRackInletTempUS, airFMSysAlarmMapInput10=airFMSysAlarmMapInput10, airIRG3GroupSetpointsCoolDeadbandUS=airIRG3GroupSetpointsCoolDeadbandUS, airIRRCUnitIdent=airIRRCUnitIdent, xATSSource1VoltageLtoN=xATSSource1VoltageLtoN, rPDUOutletStatusCommandPending=rPDUOutletStatusCommandPending, upsBatteryFrameLayoutTable=upsBatteryFrameLayoutTable, atsOutputBankOutputVoltage=atsOutputBankOutputVoltage, memBeaconStatusModuleNumber=memBeaconStatusModuleNumber, airIRG3RDUStatusDCPowerSupply2Current=airIRG3RDUStatusDCPowerSupply2Current, sPDUOutletControlVMOutletCommand=sPDUOutletControlVMOutletCommand, msvmOverloadCleared=msvmOverloadCleared, rPDU2SensorDiscreteStatusName=rPDU2SensorDiscreteStatusName, rPDU2SensorDiscreteStatusAlarmState=rPDU2SensorDiscreteStatusAlarmState, upsDiagMCCBBox=upsDiagMCCBBox, apcLocalDisplayIdent=apcLocalDisplayIdent, apcLocalDisplayIdentFirmwareRev=apcLocalDisplayIdentFirmwareRev, rPDU2Bank=rPDU2Bank, upsOutputSwitchClosed=upsOutputSwitchClosed, outletOn=outletOn, airIRmPmMaxLimitSupplyAirHumidity=airIRmPmMaxLimitSupplyAirHumidity, airFMSysCoolEconIsolFunction=airFMSysCoolEconIsolFunction, airIRSCUnitConfigStartupDelay=airIRSCUnitConfigStartupDelay, upsPhase=upsPhase, airFMSysPresentStatus=airFMSysPresentStatus, atsCalibrationPowerSupplyVoltageTableIndex=atsCalibrationPowerSupplyVoltageTableIndex, airIRRP500UnitStatusRackInletTemperature3Metric=airIRRP500UnitStatusRackInletTemperature3Metric, airFMSysAlarmMapExpMod2Entry=airFMSysAlarmMapExpMod2Entry, emStatusProbeCurrentTemp=emStatusProbeCurrentTemp, xPDUBypassInputVoltageLtoN=xPDUBypassInputVoltageLtoN, cpsInfoSerialPortTxBytes=cpsInfoSerialPortTxBytes, emStatusProbeStatus=emStatusProbeStatus, airIRmPmDrycooler1WinterStartTemp=airIRmPmDrycooler1WinterStartTemp, rPDU2DeviceControlIndex=rPDU2DeviceControlIndex, airFMStatusSystemRemoteAvgHum=airFMStatusSystemRemoteAvgHum, upsDiagSubFeedPhaseCurrent=upsDiagSubFeedPhaseCurrent, cpsSerialPortTelnetMode=cpsSerialPortTelnetMode, sPDUOutletStatusMSPTable=sPDUOutletStatusMSPTable, emsProbeConfigTable=emsProbeConfigTable, apcWarningDiscreteInputContactStateNormal=apcWarningDiscreteInputContactStateNormal, airFMSysSuctPresCompensation=airFMSysSuctPresCompensation, upsHighPrecInputBypassFrequency=upsHighPrecInputBypassFrequency, upsAdvBatteryActualVoltageTable=upsAdvBatteryActualVoltageTable, rARUSensorsTempLongIncRateThreshTime=rARUSensorsTempLongIncRateThreshTime, dp100E=dp100E, dm3ConfigLVDIndex=dm3ConfigLVDIndex, xATSGeneratorVeryLowRunTimeAlarmCleared=xATSGeneratorVeryLowRunTimeAlarmCleared, powerNetSoftwareTableSize=powerNetSoftwareTableSize, airFMSysMaxRemoteTempC=airFMSysMaxRemoteTempC, rARUPowerStatusAuxiliaryAcPresent=rARUPowerStatusAuxiliaryAcPresent, isxModularDistModuleOutputKwhUsage=isxModularDistModuleOutputKwhUsage, moduleDate=moduleDate, rPDU2OutletSwitchedStatusCommandPending=rPDU2OutletSwitchedStatusCommandPending, dcRectifierFailAlarmCleared=dcRectifierFailAlarmCleared, upsPhaseResetMaxMinValues=upsPhaseResetMaxMinValues, pduCircuitPanelNeutralOvercurrentCleared=pduCircuitPanelNeutralOvercurrentCleared, airIRmPmHumidifier2Failure=airIRmPmHumidifier2Failure, xPDUBranchBreakerRDPFeed=xPDUBranchBreakerRDPFeed, rARUFanStatusFanFlowRate=rARUFanStatusFanFlowRate, configChangeSNMP=configChangeSNMP, dm3ConfigLVDEntry=dm3ConfigLVDEntry, cpsSerialPortDBsyslog=cpsSerialPortDBsyslog, airIRmPmGECWvalveManOpEnable=airIRmPmGECWvalveManOpEnable, airIRRCUnitRunHoursFanPowerSupplyLeft=airIRRCUnitRunHoursFanPowerSupplyLeft, masterSwitchsPDU=masterSwitchsPDU, upsDiagSubSysPowerFactorCorrectionTableSize=upsDiagSubSysPowerFactorCorrectionTableSize, atsOutputPhaseTable=atsOutputPhaseTable, isxModularDistModuleOutputsTableSize=isxModularDistModuleOutputsTableSize, sPDUOutletControlIndex=sPDUOutletControlIndex, cpsSerialLockDir=cpsSerialLockDir, dcmim2StatusRectTableSize=dcmim2StatusRectTableSize, airIRmPmPump2ManOpRunning=airIRmPmPump2ManOpRunning, atsInputVoltageOrientation=atsInputVoltageOrientation, battManUnitCalib=battManUnitCalib, rPDU2SensorDiscreteTableSize=rPDU2SensorDiscreteTableSize, upsPhaseInputPhaseEntry=upsPhaseInputPhaseEntry, xPDUGroundCurrent=xPDUGroundCurrent, sPDUIdentMSPTable=sPDUIdentMSPTable, airIRRP500UnitStatus=airIRRP500UnitStatus, isxModularPduDeviceFansPresent=isxModularPduDeviceFansPresent, rPDUIdentDeviceNumBreakers=rPDUIdentDeviceNumBreakers, iemConfigContactNumber=iemConfigContactNumber, airIRG3RDUStatusPumpOutletTempMetric=airIRG3RDUStatusPumpOutletTempMetric, airFMSysAlarmMapExpMod1HumReplCyl=airFMSysAlarmMapExpMod1HumReplCyl, symmetraUPS8kVA=symmetraUPS8kVA, apcKeyOverrideLocked=apcKeyOverrideLocked, xPDUBranchCurrentMinAlarmCleared=xPDUBranchCurrentMinAlarmCleared, dm3ConfigRectHighVoltThresh=dm3ConfigRectHighVoltThresh, rARUStatusAruRemoteSetpoint=rARUStatusAruRemoteSetpoint, airIRRP100GroupSetpointsReheatMetric=airIRRP100GroupSetpointsReheatMetric, memInputAlarmGeneration=memInputAlarmGeneration, sPDUIdentVMTableSize=sPDUIdentVMTableSize, airIRmPmDrycooler3WinterStartTempF=airIRmPmDrycooler3WinterStartTempF)
mibBuilder.exportSymbols("PowerNet-MIB", emsMinorAlarmCleared=emsMinorAlarmCleared, airIRmPmEheating2=airIRmPmEheating2, apcUnregisteredUserStatusChange=apcUnregisteredUserStatusChange, airIRRCUnitRunHoursFan3=airIRRCUnitRunHoursFan3, airIRRP500GroupSetpointsHumidify=airIRRP500GroupSetpointsHumidify, emsAlarmDeviceStatusTable=emsAlarmDeviceStatusTable, smartUPS2=smartUPS2, airIRmPmSensor14Defect=airIRmPmSensor14Defect, upsAdvStateNumberoftimesNormal=upsAdvStateNumberoftimesNormal, configChangeOutlet=configChangeOutlet, memBeaconStatusCurrentState=memBeaconStatusCurrentState, upsEepromFault=upsEepromFault, xATSGeneratorVeryLowRunTimeAlarm=xATSGeneratorVeryLowRunTimeAlarm, airFMSysDehumPIDGainP=airFMSysDehumPIDGainP, xATSGeneratorIdentSerialNumber=xATSGeneratorIdentSerialNumber, airIRmPmGvalvePreOpeningTime=airIRmPmGvalvePreOpeningTime, rPDU2SensorDiscreteConfigName=rPDU2SensorDiscreteConfigName, extBatteryFrameDecrease=extBatteryFrameDecrease, battManString1BatteryVoltage=battManString1BatteryVoltage, rPDULoadDevBankTableSize=rPDULoadDevBankTableSize, airIRRCUnitRunHoursFan5=airIRRCUnitRunHoursFan5, airIRG2RDT2ThresholdsRackInletHighTempUS=airIRG2RDT2ThresholdsRackInletHighTempUS, rPDULoadBankConfig=rPDULoadBankConfig, rARUStatusAruTotalAirflow=rARUStatusAruTotalAirflow, battManString1BatteryDryout=battManString1BatteryDryout, atsCalibrationPowerSupplyVoltageTable=atsCalibrationPowerSupplyVoltageTable, airIRRP100UnitStatusCompressorDriveHeatSinkTempUS=airIRRP100UnitStatusCompressorDriveHeatSinkTempUS, emsInputContactStatusTable=emsInputContactStatusTable, airFMSysCoilFluidActivThreshF=airFMSysCoilFluidActivThreshF, symmetra3PhaseUPS20kVA=symmetra3PhaseUPS20kVA, atsOutputBankLoad=atsOutputBankLoad, cpsCardConfType=cpsCardConfType, airIRmPmDehumidification=airIRmPmDehumidification, sPDUMasterConfigVMTableSize=sPDUMasterConfigVMTableSize, rPDULoadStatus=rPDULoadStatus, airFMModDischPresPSI=airFMModDischPresPSI, cpsSerialPortSocketPort=cpsSerialPortSocketPort, isxModularTransformerOverheatingCleared=isxModularTransformerOverheatingCleared, xATSIdentFirmwareControllerRev=xATSIdentFirmwareControllerRev, cpsEthIPaddr2=cpsEthIPaddr2, emsHardwareStateAbnormal=emsHardwareStateAbnormal, isxModularDistInfoMeterModelNumber=isxModularDistInfoMeterModelNumber, upsAdvBatteryRecommendedReplaceDate=upsAdvBatteryRecommendedReplaceDate, airIRRP500GroupStatusReheatDemand=airIRRP500GroupStatusReheatDemand, emsSensorStatusTable=emsSensorStatusTable, mtrapargsString05=mtrapargsString05, airIRmPmWinterModeStartTempF=airIRmPmWinterModeStartTempF, sideCarFrameIndex=sideCarFrameIndex, airIRG3RDUServiceIntervalsDeviceIndex=airIRG3RDUServiceIntervalsDeviceIndex, airIRG2RDT2RunHours=airIRG2RDT2RunHours, airIRmPmCmp2StartTempWinterF=airIRmPmCmp2StartTempWinterF, upsDiagSubSysSystemPowerSupplyIndex=upsDiagSubSysSystemPowerSupplyIndex, upsOutletGroupConfigPowerOffDelay=upsOutletGroupConfigPowerOffDelay, airIR=airIR, airIRmPmDrycooler1Hysteresis=airIRmPmDrycooler1Hysteresis, xPDUInputContactNumContacts=xPDUInputContactNumContacts, isxModularPduIdentSerialNumber=isxModularPduIdentSerialNumber, upsDiagnosticsPassed=upsDiagnosticsPassed, airIRRP500GroupStatusCoolDemand=airIRRP500GroupStatusCoolDemand, isxModularSubfeedBreakerOpenAlarmCleared=isxModularSubfeedBreakerOpenAlarmCleared, upsDiagSubSysExternalSwitchGearIndex=upsDiagSubSysExternalSwitchGearIndex, rPDU2OutletSwitchedStatusState=rPDU2OutletSwitchedStatusState, airFMModBlwr1ActTorq=airFMModBlwr1ActTorq, dcPower=dcPower, dm3ConfigLVDResetThresh=dm3ConfigLVDResetThresh, airIRG3RDUStatusInletWaterTempMetric=airIRG3RDUStatusInletWaterTempMetric, uioSensorStatusTemperatureDegC=uioSensorStatusTemperatureDegC, upsDiagSubSysInverterFrameIndex=upsDiagSubSysInverterFrameIndex, mtrapargsGauge=mtrapargsGauge, dm3StatusRectStandby=dm3StatusRectStandby, xPDUSystemOutputNeutralCurrent=xPDUSystemOutputNeutralCurrent, airIRG3IdentLocation=airIRG3IdentLocation, cpsSerialPortSniffAdm=cpsSerialPortSniffAdm, airIRG3RDUStatusCWValvePosition=airIRG3RDUStatusCWValvePosition, airFMGroupFailoverSysLowEnvHum=airFMGroupFailoverSysLowEnvHum, rPDUOutletStatusLoad=rPDUOutletStatusLoad, bmBatManBatteryAlarm=bmBatManBatteryAlarm, galaxyVMUPS80kVA=galaxyVMUPS80kVA, airIRmPmAuxiliaryAlarm10=airIRmPmAuxiliaryAlarm10, xPDUDeviceLoadTestPortPresent=xPDUDeviceLoadTestPortPresent, rPDU2SensorDiscreteStatusType=rPDU2SensorDiscreteStatusType, envLTDecTempRateViolationCleared=envLTDecTempRateViolationCleared, pduCircuitPanelInputUndercurrentCleared=pduCircuitPanelInputUndercurrentCleared, upsOscillatorFailedCleared=upsOscillatorFailedCleared, rPDUOutletStatusEntry=rPDUOutletStatusEntry, upsParallelSysSwitchGearInstallationLoadPct=upsParallelSysSwitchGearInstallationLoadPct, upsInput=upsInput, cpsSerialPortLFSuppress=cpsSerialPortLFSuppress, airIRG2RDT2StatusRackInletTempUS=airIRG2RDT2StatusRackInletTempUS, galaxyVMUPS110kVA=galaxyVMUPS110kVA, battManStringRippleCurrent=battManStringRippleCurrent, external=external, rPDU2PhaseStatusIndex=rPDU2PhaseStatusIndex, airIRRP100UnitStatusCompressorDriveVoltage=airIRRP100UnitStatusCompressorDriveVoltage, airIRG3RDUStatusStartupDelay=airIRG3RDUStatusStartupDelay, upsAdvStateSystemMessages=upsAdvStateSystemMessages, airFMSysHotWaterVlvAct=airFMSysHotWaterVlvAct, upsDiagSubSysExternalPowerFrameBoardEntry=upsDiagSubSysExternalPowerFrameBoardEntry, msvmNearOverloadCleared=msvmNearOverloadCleared, rmPDUCommunicationLost=rmPDUCommunicationLost, envMaxHumidityThresholdViolation=envMaxHumidityThresholdViolation, upsDiagFlyWheel=upsDiagFlyWheel, upsPhaseInputVoltageOrientation=upsPhaseInputVoltageOrientation, upsCalibrationStackChanged=upsCalibrationStackChanged, airIRmPmSensor12Failure=airIRmPmSensor12Failure, airIRG3RDURunHoursEntry=airIRG3RDURunHoursEntry, upsOutletGroupControlTableSize=upsOutletGroupControlTableSize, rPDU2SensorTempHumidityConfigHumidityAlarmEnable=rPDU2SensorTempHumidityConfigHumidityAlarmEnable, rPDULoadDevMaxOutletEntry=rPDULoadDevMaxOutletEntry, battManStringCalibIndex=battManStringCalibIndex, xATSSwitchSettings=xATSSwitchSettings, upsParallelOutputActivePowerEntry=upsParallelOutputActivePowerEntry, atsStatusSwitchStatus=atsStatusSwitchStatus, airIRmPmSetpointTemperatureDayC=airIRmPmSetpointTemperatureDayC, airFMStatusSystemActionHum=airFMStatusSystemActionHum, upsHighPrecBatteryNominalVoltage=upsHighPrecBatteryNominalVoltage, deviceStatusChange=deviceStatusChange, upsHighPrecBatteryActualVoltageTableIndex=upsHighPrecBatteryActualVoltageTableIndex, upsAdvBatteryFrameActualVoltage=upsAdvBatteryFrameActualVoltage, airIRG3RDUStatusDewPointTempUS=airIRG3RDUStatusDewPointTempUS, dm3ConfigBattLowVoltAlarm=dm3ConfigBattLowVoltAlarm, isxModularMinCurrentThresholdViolationCleared=isxModularMinCurrentThresholdViolationCleared, dm3StatusSysConvVoltage=dm3StatusSysConvVoltage, iemIdentHardwareRevision=iemIdentHardwareRevision, airFMIdent=airFMIdent, airIRRP500UnitIdent=airIRRP500UnitIdent, rPDU2SensorTempHumidityStatusEntry=rPDU2SensorTempHumidityStatusEntry, airIRG2GroupConfigCoolDerivativeD=airIRG2GroupConfigCoolDerivativeD, airIRmPmHumidifier1StartHumidity=airIRmPmHumidifier1StartHumidity, airIRmPmRuntimeHumidification=airIRmPmRuntimeHumidification, upsDiagIMTable=upsDiagIMTable, isxModularPduDevice=isxModularPduDevice, rPDU2PhaseConfigTable=rPDU2PhaseConfigTable, airIRmPmDehumidificMinWaterTemp=airIRmPmDehumidificMinWaterTemp, upsDiagMCCBBoxStatus=upsDiagMCCBBoxStatus, airFMSysSteamElectrodeHumDmd=airFMSysSteamElectrodeHumDmd, masterSwitchrPDU2=masterSwitchrPDU2, calibrationEnd=calibrationEnd, rPDUOutletDevNumTotalOutlets=rPDUOutletDevNumTotalOutlets, airIRRP100UnitRunHoursAirFilter=airIRRP100UnitRunHoursAirFilter, upsSleeping=upsSleeping, airIRmPmLowPressureWinterDelay=airIRmPmLowPressureWinterDelay, cpsSerialPortDBmenu=cpsSerialPortDBmenu, upsPhaseInputType=upsPhaseInputType, xATSInputContactNumContacts=xATSInputContactNumContacts, galaxyVMUPS90kVA=galaxyVMUPS90kVA, isxModularDistInfoEntry=isxModularDistInfoEntry, mtrapargsInteger05=mtrapargsInteger05, rPDU2OutletSwitchedControlIndex=rPDU2OutletSwitchedControlIndex, upsSCGNumOfGroupMembers=upsSCGNumOfGroupMembers, mcontrolRestartAgent=mcontrolRestartAgent, upsAdvBatteryFrameCurrent=upsAdvBatteryFrameCurrent, airIRmPmLastMaintenanceYear=airIRmPmLastMaintenanceYear, xPDUBranchBreakerTableSize=xPDUBranchBreakerTableSize, xATSInputContactTableSize=xATSInputContactTableSize, memOutletConfigEntry=memOutletConfigEntry, pduOnBatteryMode=pduOnBatteryMode, rPDU2OutletMeteredStatusEnergy=rPDU2OutletMeteredStatusEnergy, xATSSwitchStatisticsTableSize=xATSSwitchStatisticsTableSize, xPDUIdentFirmwareAppOSRev=xPDUIdentFirmwareAppOSRev, airIRG2RDT2ConfigStartupDelay=airIRG2RDT2ConfigStartupDelay, airIRSCUnitStatusCoolOutput=airIRSCUnitStatusCoolOutput, isxModularCoolingFanAlarm=isxModularCoolingFanAlarm, rPDULoadStatusIndex=rPDULoadStatusIndex, bmBatManKneeAlarm=bmBatManKneeAlarm, rPDU2DeviceControlTable=rPDU2DeviceControlTable, airIRRCUnitIdentHardwareRevision=airIRRCUnitIdentHardwareRevision, sPDUMasterStatusMSPTable=sPDUMasterStatusMSPTable, airIRRP500=airIRRP500, severity=severity, isxModularDistModuleInfoTableSize=isxModularDistModuleInfoTableSize, rARUSensorsTempThreshHysteresis=rARUSensorsTempThreshHysteresis, airFMModCoolTableSize=airFMModCoolTableSize, apcEnvSensorConnected=apcEnvSensorConnected, upsBasicStateOutputState=upsBasicStateOutputState, xPDUInputVoltageLowAlarmCleared=xPDUInputVoltageLowAlarmCleared, emConfigProbeLowTempEnable=emConfigProbeLowTempEnable, rPDU2OutletMeteredStatusTable=rPDU2OutletMeteredStatusTable, airIRRP100UnitIdentID=airIRRP100UnitIdentID, xATSTestingScheduleTestDay=xATSTestingScheduleTestDay, isxModularDistSysPowerKw=isxModularDistSysPowerKw, xATSSource1Rotation=xATSSource1Rotation, airIRmPmPump4Speed=airIRmPmPump4Speed, sPDUMasterStatusMSPEntry=sPDUMasterStatusMSPEntry, xATSEpoReset=xATSEpoReset, sPDUOutletStatusVMEntry=sPDUOutletStatusVMEntry, smartUPS3000=smartUPS3000, xPDUACMonitoringPoint=xPDUACMonitoringPoint, upsAdvTestRuntimeCalibration=upsAdvTestRuntimeCalibration, airFMSysActualHumCtrlMethod=airFMSysActualHumCtrlMethod, rPDU2DeviceConfigDisplayOrientation=rPDU2DeviceConfigDisplayOrientation, dm3StatusConvEntry=dm3StatusConvEntry, ceWarningConditionCleared=ceWarningConditionCleared, battManStringCurrent=battManStringCurrent, airFMModServIntHeaterReset=airFMModServIntHeaterReset, airFMSysReheatEssFunction=airFMSysReheatEssFunction, cpsInfoSerialPortErrParity=cpsInfoSerialPortErrParity, airIRRP100UnitStatusRackInletTempMetric=airIRRP100UnitStatusRackInletTempMetric, upsHighPrecBatteryCurrent=upsHighPrecBatteryCurrent, upsDiagSubSysNetworkComCardSerialNumber=upsDiagSubSysNetworkComCardSerialNumber, upsDiagSubSysExternalSwitchGearFrameIndex=upsDiagSubSysExternalSwitchGearFrameIndex, upsDiagSubSysNetworkComCardTableSize=upsDiagSubSysNetworkComCardTableSize, iemHighTempThresholdViolationCleared=iemHighTempThresholdViolationCleared, upsPhaseInputMinCurrent=upsPhaseInputMinCurrent, sPDUOutletConfigMSPannunName=sPDUOutletConfigMSPannunName, upsAdvTotalDCCurrent=upsAdvTotalDCCurrent, battManSystemAmbientProbeDisconnected=battManSystemAmbientProbeDisconnected, airIRRP100GroupConfigReheatResetRateI=airIRRP100GroupConfigReheatResetRateI, airFMSysHighCtrlTempC=airFMSysHighCtrlTempC, airIRRCUnitStatusLeavingFluidTemperatureMetric=airIRRCUnitStatusLeavingFluidTemperatureMetric, airIRG2RDT2ThresholdsReturnAirHighTempUS=airIRG2RDT2ThresholdsReturnAirHighTempUS, isxModularDistModuleOutputAlarmMaxEnable=isxModularDistModuleOutputAlarmMaxEnable, rPDUOutletControlIndex=rPDUOutletControlIndex, xPDUSystemBreakerDescription=xPDUSystemBreakerDescription, rPDU2OutletSwitchedPropertiesEntry=rPDU2OutletSwitchedPropertiesEntry, airIRRP500UnitStatusFluidFlowUS=airIRRP500UnitStatusFluidFlowUS, emsProbeStatusProbeHumidity=emsProbeStatusProbeHumidity, sPDUMasterControlVM=sPDUMasterControlVM, isxModularDistModuleOutputLocation=isxModularDistModuleOutputLocation, airIRG3RDUStatusCondenserOutletTempMetric=airIRG3RDUStatusCondenserOutletTempMetric, accessViolationConsole=accessViolationConsole, airIRG2SC=airIRG2SC, airIRRP100GroupSetpointsActiveFlowControlBias=airIRRP100GroupSetpointsActiveFlowControlBias, rPDU2DevicePropertiesOutletLayout=rPDU2DevicePropertiesOutletLayout, emsIdentProductNumber=emsIdentProductNumber, airFMSysAlarmMapSysLowEnvTemp=airFMSysAlarmMapSysLowEnvTemp, rPDUOutletBankEntry=rPDUOutletBankEntry, airIRRCUnitStatusCoolDemand=airIRRCUnitStatusCoolDemand, dm3ConfigRectFailSafe=dm3ConfigRectFailSafe, uioSensorStatusTable=uioSensorStatusTable, airIRmPmEheating3StartTemperatureF=airIRmPmEheating3StartTemperatureF, mtrapargsString03=mtrapargsString03, upsPhaseInputName=upsPhaseInputName, sPDUOutletControlMSPTable=sPDUOutletControlMSPTable, rPDU2SensorTempHumidityStatusHumidityStatus=rPDU2SensorTempHumidityStatusHumidityStatus, airIRG2RDT2RunHoursFanPSTable=airIRG2RDT2RunHoursFanPSTable, airFMSysActualSteamHum=airFMSysActualSteamHum, dm3ConfigConvThresh=dm3ConfigConvThresh, emsStatusAlinkProbeDeviceCount=emsStatusAlinkProbeDeviceCount, upsDiagSubSysExternalPowerFrameBoardStatus=upsDiagSubSysExternalPowerFrameBoardStatus, airIRRP100UnitIdent=airIRRP100UnitIdent, atsInputPhaseTableIndex=atsInputPhaseTableIndex, airIRmPmMyZoneSequencingTime=airIRmPmMyZoneSequencingTime, rPDU2PhaseToPhaseStatusTable=rPDU2PhaseToPhaseStatusTable, apcDoorSenseDisconnected=apcDoorSenseDisconnected, airFMAlarmClearActiveGroupAlarms=airFMAlarmClearActiveGroupAlarms, emsMinorAlarm=emsMinorAlarm, airIRmPmDayNightMode=airIRmPmDayNightMode, airFMModCoilFluidVlvPos=airFMModCoilFluidVlvPos, cpsSerialPortSysBufSess=cpsSerialPortSysBufSess, airIRG3RDUConfigStartupDelay=airIRG3RDUConfigStartupDelay, airFMSysCoolDeadbandF=airFMSysCoolDeadbandF, rPDU2PhaseConfigOverloadRestriction=rPDU2PhaseConfigOverloadRestriction, battManString1ResponseTestCurrentEntry=battManString1ResponseTestCurrentEntry)
mibBuilder.exportSymbols("PowerNet-MIB", battManUnitCalibEntry=battManUnitCalibEntry, dm3StatusOutRlyTable=dm3StatusOutRlyTable, rPDULoadDevMaxOutletTableSize=rPDULoadDevMaxOutletTableSize, dm3StatusRectDevType=dm3StatusRectDevType, memSensors=memSensors, airIRmPmPump3ManOpRunning=airIRmPmPump3ManOpRunning, coolingUnitConfigurationAnalogTable=coolingUnitConfigurationAnalogTable, airIRSCGroupStatusMaxReturnAirTempUS=airIRSCGroupStatusMaxReturnAirTempUS, upsOutletGroups=upsOutletGroups, airIRmPmAuxiliaryAlarm3=airIRmPmAuxiliaryAlarm3, upsSideCarFrameLayoutEntry=upsSideCarFrameLayoutEntry, dm3ConfigRelays=dm3ConfigRelays, airIRRP500UnitServiceIntervalHumidifierAlarm=airIRRP500UnitServiceIntervalHumidifierAlarm, airFMSysInputEntry=airFMSysInputEntry, airIRmPmGECWvalveGEOffTempF=airIRmPmGECWvalveGEOffTempF, abnormalCondition=abnormalCondition, airIRG2RDT2StatusSuctionPressureUS=airIRG2RDT2StatusSuctionPressureUS, mconfigClockDate=mconfigClockDate, airIRRCUnitThresholdsRackInletHighTempMetric=airIRRCUnitThresholdsRackInletHighTempMetric, airIRRP500GroupStatusDehumidifyDemand=airIRRP500GroupStatusDehumidifyDemand, emsOutletStatusOutletName=emsOutletStatusOutletName, rPDUPowerSupply2Fail=rPDUPowerSupply2Fail, xPDUBypassInputOverVoltThreshold=xPDUBypassInputOverVoltThreshold, xATSGeneratorBatteryCharger=xATSGeneratorBatteryCharger, airIRRP500UnitIdentSerialNumber=airIRRP500UnitIdentSerialNumber, upsBasicInput=upsBasicInput, upsAdvConfigOutofSyncBypassTransferDelay=upsAdvConfigOutofSyncBypassTransferDelay, battManString1ResponseTestCurrentData=battManString1ResponseTestCurrentData, airFMStatusSystemHumidifyEnabled=airFMStatusSystemHumidifyEnabled, airIRmPmDrycooler4HysteresisF=airIRmPmDrycooler4HysteresisF, airIRmPmDrycooler2=airIRmPmDrycooler2, rPDUNearOverloadCleared=rPDUNearOverloadCleared, airIRmPmDrycooler1HysteresisK=airIRmPmDrycooler1HysteresisK, iemLowTempThresholdViolationCleared=iemLowTempThresholdViolationCleared, battManControl=battManControl, cpsSerialPortLogform=cpsSerialPortLogform, airIRG3CMStatusLiquidInletPressureMetric=airIRG3CMStatusLiquidInletPressureMetric, rPDULoadPhaseConfig=rPDULoadPhaseConfig, atsRMSUnderFrequency=atsRMSUnderFrequency, dm3StatusBattCurrentSanity=dm3StatusBattCurrentSanity, rPDUNearOverload=rPDUNearOverload, airIRSCUnitStatusSuperheatTempUS=airIRSCUnitStatusSuperheatTempUS, upsAdvStateNumberoftimesonbattery=upsAdvStateNumberoftimesonbattery, xATSSource2Name=xATSSource2Name, memInputAnalogHighThresh=memInputAnalogHighThresh, sPDUMasterConfigMSPEntry=sPDUMasterConfigMSPEntry, atsConfigPhase=atsConfigPhase, airFMModBlwr1FanPower=airFMModBlwr1FanPower, airIRRP100GroupConfigLoadAssistEnable=airIRRP100GroupConfigLoadAssistEnable, rPDUOutletConfigOutletName=rPDUOutletConfigOutletName, airFMSysAlarmMapSysTableSize=airFMSysAlarmMapSysTableSize, rPDU2BankConfigBankPeakCurrentReset=rPDU2BankConfigBankPeakCurrentReset, airIRmPmEEV2TemperatureSensorError=airIRmPmEEV2TemperatureSensorError, airIRSCUnitSetptsCoolDeadbandUS=airIRSCUnitSetptsCoolDeadbandUS, upsDiagSubSysExternalPowerFrameBoardTableSize=upsDiagSubSysExternalPowerFrameBoardTableSize, rPDUOutletDevNumCntrlOutlets=rPDUOutletDevNumCntrlOutlets, rPDU2BankStatusCurrent=rPDU2BankStatusCurrent, dm3ConfigRectAlarms=dm3ConfigRectAlarms, upsSCGMemberIP=upsSCGMemberIP, rPDULoadPhaseConfigEntry=rPDULoadPhaseConfigEntry, Rpdu2OutletPhaseLayoutType=Rpdu2OutletPhaseLayoutType, upsIntegratedATSSourceTableSize=upsIntegratedATSSourceTableSize, airFMSysCoolSetpointC=airFMSysCoolSetpointC, airIRmPmPump4StartTemperatureF=airIRmPmPump4StartTemperatureF, airIRG2RDT2ConfigOutputSource=airIRG2RDT2ConfigOutputSource, upsBatterySoftBusStartFault=upsBatterySoftBusStartFault, xATSSource2Position=xATSSource2Position, dm3ConfigConvLowVoltAlarm=dm3ConfigConvLowVoltAlarm, airIRSCUnitStatusCondInletTempMetric=airIRSCUnitStatusCondInletTempMetric, dm3ConfigCompMethod=dm3ConfigCompMethod, envLTDecTempRateViolation=envLTDecTempRateViolation, airFMGroupFailoverSysLowEnvTemp=airFMGroupFailoverSysLowEnvTemp, accessPXConfigBeaconAction=accessPXConfigBeaconAction, nlIdent=nlIdent, iemIdent=iemIdent, xPDUIdentSerialNumber=xPDUIdentSerialNumber, airFMSysCtrlTempF=airFMSysCtrlTempF, rPDU2DevicePropertiesMaxCurrentRating=rPDU2DevicePropertiesMaxCurrentRating, airFMModBlwr1DCLinkVlt=airFMModBlwr1DCLinkVlt, upsFirmwareUpdateFailed=upsFirmwareUpdateFailed, upsParallelInputPhaseEntry=upsParallelInputPhaseEntry, dm3StatusRectCfg=dm3StatusRectCfg, upsDiagSubSysDCCircuitBreakerFrameIndex=upsDiagSubSysDCCircuitBreakerFrameIndex, aruSmokeAlarmCleared=aruSmokeAlarmCleared, airFMModBlwr2CmdFreq=airFMModBlwr2CmdFreq, dcmim2ControlRunFunctBatteryTest=dcmim2ControlRunFunctBatteryTest, xPDUDeviceTransformerPresent=xPDUDeviceTransformerPresent, airIRSCGroupSetptsCoolSetpointUS=airIRSCGroupSetptsCoolSetpointUS, sPDUOutletConfigIndex=sPDUOutletConfigIndex, airIRmPmSensor4Failure=airIRmPmSensor4Failure, xATSGeneratorLowACVEventCleared=xATSGeneratorLowACVEventCleared, airFMSysAlarmMapSysSupplySensFail=airFMSysAlarmMapSysSupplySensFail, rARUConfigAruTempOvrdSetpoint=rARUConfigAruTempOvrdSetpoint, dcFuseCBAlarm=dcFuseCBAlarm, isxModularDistModuleBreakerEntry=isxModularDistModuleBreakerEntry, xATSGeneratorLowBatteryVoltCleared=xATSGeneratorLowBatteryVoltCleared, airFMSysAlarmMapInput5=airFMSysAlarmMapInput5, dm3ConfigRectCurrLimitAlarm=dm3ConfigRectCurrLimitAlarm, rPDUPowerSupply1Fail=rPDUPowerSupply1Fail, airFMModBlwr1InverterTempC=airFMModBlwr1InverterTempC, upsParallelInputTotalActivePower=upsParallelInputTotalActivePower, xATSSwitchSettingsMinPhaseBalance=xATSSwitchSettingsMinPhaseBalance, apcAdConverterFault=apcAdConverterFault, monitors=monitors, airIRRP100GroupSetpointsHumidify=airIRRP100GroupSetpointsHumidify, coolingUnitConfigurationAnalogUnits=coolingUnitConfigurationAnalogUnits, upsHighPrecBatteryActualVoltage=upsHighPrecBatteryActualVoltage, atsOutputPhaseTableIndex=atsOutputPhaseTableIndex, airIRSCUnitRunHoursCompressor=airIRSCUnitRunHoursCompressor, airIRmPmCmp1Running=airIRmPmCmp1Running, airIRRP100GroupStatusDehumidifyDemand=airIRRP100GroupStatusDehumidifyDemand, upsDiagComBusExternalMIMStatus=upsDiagComBusExternalMIMStatus, airIRmPmCmp1StartTempSummerK=airIRmPmCmp1StartTempSummerK, airIRmPmCompressor1LowPressure=airIRmPmCompressor1LowPressure, isxModularDistSubFeedInfoThresholdLow=isxModularDistSubFeedInfoThresholdLow, apcDeviceClearUserConfigs=apcDeviceClearUserConfigs, xATSGeneratorSettingsCrankRestTime=xATSGeneratorSettingsCrankRestTime, rPDUCommunicationEstablished=rPDUCommunicationEstablished, airIRRP100UnitConfigPowerSourceConfig=airIRRP100UnitConfigPowerSourceConfig, upsAdvInputBypassVoltageTHD=upsAdvInputBypassVoltageTHD, upsPhaseOutputTable=upsPhaseOutputTable, airFMSysUPSVlt=airFMSysUPSVlt, xPDUDeviceFusesPresent=xPDUDeviceFusesPresent, emsHardwareStateNormal=emsHardwareStateNormal, xATSGeneratorLowCoolantLevelAlarmCleared=xATSGeneratorLowCoolantLevelAlarmCleared, airIRmPmPump4Failure=airIRmPmPump4Failure, xPDUSystemInMaintenanceBypassMode=xPDUSystemInMaintenanceBypassMode, airIRSCUnitSetptsCoolSetpointMetric=airIRSCUnitSetptsCoolSetpointMetric, emsSensorControlEntry=emsSensorControlEntry, memInputsStatusInputNumber=memInputsStatusInputNumber, xATSDataCommMismatchErrorCleared=xATSDataCommMismatchErrorCleared, emsAlinkPowerOverloadCleared=emsAlinkPowerOverloadCleared, upsDiagIMType=upsDiagIMType, airIRRP500GroupConfigReheatResetRateI=airIRRP500GroupConfigReheatResetRateI, airIRmPmGeneralError=airIRmPmGeneralError, emStatusContactsEntry=emStatusContactsEntry, battManConfigBatteryChemistry=battManConfigBatteryChemistry, sPDUMasterStatusVMTable=sPDUMasterStatusVMTable, coolingUnitConfigurationStringEntry=coolingUnitConfigurationStringEntry, airIRRCUnitConfigInputNormalState=airIRRCUnitConfigInputNormalState, upsAdvControlTurnOnUPS=upsAdvControlTurnOnUPS, atsOutputBankTableSize=atsOutputBankTableSize, airFMSysAlarmMapExpMod1BlwrCntl2Fail=airFMSysAlarmMapExpMod1BlwrCntl2Fail, airIRmPmFan2Alarm=airIRmPmFan2Alarm, isxModularDistModuleOutputStatus=isxModularDistModuleOutputStatus, airFMSysCooling=airFMSysCooling, upsAdvConfigAllowedSetEntry=upsAdvConfigAllowedSetEntry, airIRSCGroupStatusCoolDemand=airIRSCGroupStatusCoolDemand, xATSSwitchStatusAutomaticOperationSwitch=xATSSwitchStatusAutomaticOperationSwitch, xATSSwitchTimersName=xATSSwitchTimersName, upsHighPrecBatteryVoltage=upsHighPrecBatteryVoltage, rPDUOutletDevice=rPDUOutletDevice, isxModularOutputVoltageLowThresholdViolationCleared=isxModularOutputVoltageLowThresholdViolationCleared, dm3StatusRectPcbRev=dm3StatusRectPcbRev, upsBasicInputPhase=upsBasicInputPhase, rPDU2OutletMeteredPropertiesName=rPDU2OutletMeteredPropertiesName, mfiletransferConfigSettingsFilename=mfiletransferConfigSettingsFilename, receiverAddr=receiverAddr, airFMModBlwr1ModuleIndex=airFMModBlwr1ModuleIndex, airFMSysMinRemoteTempC=airFMSysMinRemoteTempC, airIRmPmPump2=airIRmPmPump2, airIRmPmSensor1Failure=airIRmPmSensor1Failure, airIRmPmUnitOnOff=airIRmPmUnitOnOff, sPDUOutletControlVMOutletIndex=sPDUOutletControlVMOutletIndex, upsDiagSubSysExternalSwitchGearTableSize=upsDiagSubSysExternalSwitchGearTableSize, rPDUOutletBankTable=rPDUOutletBankTable, airIRRCGroupConfigNumberofCoolingUnits=airIRRCGroupConfigNumberofCoolingUnits, msvmCommunicationLost=msvmCommunicationLost, sPDUMasterStatusVMCommandPending=sPDUMasterStatusVMCommandPending, sPDUOutletControlVMOutletName=sPDUOutletControlVMOutletName, rPDU2DeviceConfigModule=rPDU2DeviceConfigModule, airIRmPmEEV1StepperMotorError=airIRmPmEEV1StepperMotorError, xPDUSystemInUPSOperationalMode=xPDUSystemInUPSOperationalMode, upsPhaseInputEntry=upsPhaseInputEntry, dm3ConfigOutRlyTable=dm3ConfigOutRlyTable, rPDU2OutletMeteredConfigEntry=rPDU2OutletMeteredConfigEntry, iemConfigProbeTempUnits=iemConfigProbeTempUnits, xATSOutputRelayNumRelays=xATSOutputRelayNumRelays, battManStringCurrentProbeDisconnected=battManStringCurrentProbeDisconnected, airIRRCUnitStatusEnteringFluidTemperatureMetric=airIRRCUnitStatusEnteringFluidTemperatureMetric, dm3ConfigConvFailMax=dm3ConfigConvFailMax, airIRRCUnitStatusAirFlowUS=airIRRCUnitStatusAirFlowUS, airIRG2GroupSetptsFanSpeedPreference=airIRG2GroupSetptsFanSpeedPreference, dcInputRelayOn=dcInputRelayOn, airFMGroupFailoverModHighSupplyTemp=airFMGroupFailoverModHighSupplyTemp, airIRRP500Series=airIRRP500Series, rPDU2OutletMeteredPropertiesIndex=rPDU2OutletMeteredPropertiesIndex, apcWarningDiscreteInputContactStateAbnormal=apcWarningDiscreteInputContactStateAbnormal, airIRRP500GroupConfig=airIRRP500GroupConfig, xPDUGroundCurrentThreshold=xPDUGroundCurrentThreshold, rPDU2BankPropertiesPhaseLayout=rPDU2BankPropertiesPhaseLayout, emsCommunicationEstablished=emsCommunicationEstablished, rARUStatusAruIndex=rARUStatusAruIndex, upsAdvConfigLowerOutputVoltTolerance=upsAdvConfigLowerOutputVoltTolerance, rPDU2OutletMeteredPropertiesPowerRating=rPDU2OutletMeteredPropertiesPowerRating, airFMAlarmClearActiveSysModAlarms=airFMAlarmClearActiveSysModAlarms, airIRmPmGvalveOpeningGrade=airIRmPmGvalveOpeningGrade, battManIdentDateOfManufacture=battManIdentDateOfManufacture, dcmim2ConfigLVDTrip=dcmim2ConfigLVDTrip, airIRSCUnitStatusContainmtDPMetric=airIRSCUnitStatusContainmtDPMetric, accessPXStatusBeaconName=accessPXStatusBeaconName, battManACCurrentZeroCalib=battManACCurrentZeroCalib, rPDU2BankStatusPeakCurrentTimestamp=rPDU2BankStatusPeakCurrentTimestamp, airFMModBlwr1CmdFreq=airFMModBlwr1CmdFreq, galaxyVMUPS120kVA=galaxyVMUPS120kVA, cpsSerialPortLogWtmp=cpsSerialPortLogWtmp, dm3StatusSysConvCurrent=dm3StatusSysConvCurrent, isxcCriticalAlarmCleared=isxcCriticalAlarmCleared, battManStringOnBattery=battManStringOnBattery, xATSSwitchTransferEvent=xATSSwitchTransferEvent, airFMSysAlarmMapSysEntry=airFMSysAlarmMapSysEntry, aruFanRuntimeAlarm=aruFanRuntimeAlarm, rPDUStatusPhaseTableSize=rPDUStatusPhaseTableSize, cpsSerialDBFacility=cpsSerialDBFacility, airFMSysHumDeadband=airFMSysHumDeadband, upsDiagSubSysInverterHardwareRev=upsDiagSubSysInverterHardwareRev, airIRRP500UnitStatusRackInletTemperature1US=airIRRP500UnitStatusRackInletTemperature1US, sPDUMasterConfigVMHighLoadWarningThreshold=sPDUMasterConfigVMHighLoadWarningThreshold, rPDU2SensorTempHumidityStatusType=rPDU2SensorTempHumidityStatusType, airFMGroupFailoverSysSupplySensorFail=airFMGroupFailoverSysSupplySensorFail, xPDUSystemOutputPhaseTable=xPDUSystemOutputPhaseTable, airIRG3GroupStatusEntry=airIRG3GroupStatusEntry, upsDiagSubSysXRCommunicationCardIndex=upsDiagSubSysXRCommunicationCardIndex, cpsDNSsecserv=cpsDNSsecserv, rPDU2PhaseConfigOverloadCurrentThreshold=rPDU2PhaseConfigOverloadCurrentThreshold, upsPhaseOutputMinLoad=upsPhaseOutputMinLoad, battManSystemSuspendVoltage=battManSystemSuspendVoltage, rPDU2OutletSwitchedPropertiesTable=rPDU2OutletSwitchedPropertiesTable, xATSOutputCurrentHighAlarm=xATSOutputCurrentHighAlarm, airFMModCoolTable=airFMModCoolTable, airIRRP100Group=airIRRP100Group, memBeaconStatusBeaconNumber=memBeaconStatusBeaconNumber, airIRRP500GroupStatusDewPointTempMetric=airIRRP500GroupStatusDewPointTempMetric, upsParallelOutputApparentPowerEntry=upsParallelOutputApparentPowerEntry, upsDiagBatteryFirmwareRev=upsDiagBatteryFirmwareRev, isxModularSubfeedMaxCurrentThresholdViolationCleared=isxModularSubfeedMaxCurrentThresholdViolationCleared, emsProbeStatusProbeLowTempThresh=emsProbeStatusProbeLowTempThresh, apcLocalDisplayIdentModelNumber=apcLocalDisplayIdentModelNumber, airIRG2RDT2RunHoursEvapFanHours=airIRG2RDT2RunHoursEvapFanHours, dm3IdentSystem=dm3IdentSystem, apcDeviceClearLostComms=apcDeviceClearLostComms, rPDU2OutletSwitchedStatusNumber=rPDU2OutletSwitchedStatusNumber, airFMSysReheatSetpointC=airFMSysReheatSetpointC, airInformationalConditionCleared=airInformationalConditionCleared, airFMModHumidifier=airFMModHumidifier, airFMModBlwr2ChokeTempC=airFMModBlwr2ChokeTempC, dm3ConfigConvSetPoint=dm3ConfigConvSetPoint, airIRG3RDUConfigTable=airIRG3RDUConfigTable, sPDUOutletConfigMSPannunIndex=sPDUOutletConfigMSPannunIndex, cpsSerialPortTable=cpsSerialPortTable, upsParallelSystem=upsParallelSystem, airFMGroupFailoverModHighFilterDP=airFMGroupFailoverModHighFilterDP, galaxy5500UPS120KVA=galaxy5500UPS120KVA, upsPfcInputRelayFailureCleared=upsPfcInputRelayFailureCleared)
mibBuilder.exportSymbols("PowerNet-MIB", upsAdvConfigUpsSleepTime=upsAdvConfigUpsSleepTime, sPDUOutletConfigMSPallName=sPDUOutletConfigMSPallName, airIRmPmNumberOfSuctionValves=airIRmPmNumberOfSuctionValves, dm3StatusLVDTableSize=dm3StatusLVDTableSize, airIRRP100UnitStatusCompressorDrivePower=airIRRP100UnitStatusCompressorDrivePower, airFMStatusSystemReheatingEnabled=airFMStatusSystemReheatingEnabled, isxModularDistModuleBreakerTableSize=isxModularDistModuleBreakerTableSize, upsPhaseOutputFrequency=upsPhaseOutputFrequency, airIRRP500UnitConfigReheatEnable=airIRRP500UnitConfigReheatEnable, airIRmPmCommon4=airIRmPmCommon4, airFMModComp2=airFMModComp2, airIRmPmNumberOfGECWValves=airIRmPmNumberOfGECWValves, airIRRCUnitThresholdsEnteringFluidHighTempMetric=airIRRCUnitThresholdsEnteringFluidHighTempMetric, sPDUOutletStatusMSP=sPDUOutletStatusMSP, accessPXConfigAutoRelockTime=accessPXConfigAutoRelockTime, airIRRP100GroupStatusMinRackInletTempMetric=airIRRP100GroupStatusMinRackInletTempMetric, rPDU2PhaseStatusPowerFactor=rPDU2PhaseStatusPowerFactor, backUPS=backUPS, airIRmPmPump1HysteresisK=airIRmPmPump1HysteresisK, memInputAbnormalSeverity=memInputAbnormalSeverity, airIRRCUnitConfigOutputNormalState=airIRRCUnitConfigOutputNormalState, airIRmPmPump4LinearRangeK=airIRmPmPump4LinearRangeK, airIRRP500UnitIdentFirmwareRevision=airIRRP500UnitIdentFirmwareRevision, airFMModRHBlwr2Reset=airFMModRHBlwr2Reset, emsOutputRelayStatusEntry=emsOutputRelayStatusEntry, sPDUMasterConfigPDUName=sPDUMasterConfigPDUName, airIRmPmSensor5Failure=airIRmPmSensor5Failure, upsPhaseOutputVoltageOrientation=upsPhaseOutputVoltageOrientation, atsCalibrationPowerSupplyVoltage=atsCalibrationPowerSupplyVoltage, airIRG3CMSetpointsDeviceIndex=airIRG3CMSetpointsDeviceIndex, bmBatManChargerAlarmCleared=bmBatManChargerAlarmCleared, dm3StatusConvPcbRev=dm3StatusConvPcbRev, emsInputContactStatusInputContactIndex=emsInputContactStatusInputContactIndex, upsPhaseOutputPower=upsPhaseOutputPower, cpsSerialPortAutoInput=cpsSerialPortAutoInput, apcTransformerDCImbalanceFaultCleared=apcTransformerDCImbalanceFaultCleared, emsProbeStatusProbeSerialNumber=emsProbeStatusProbeSerialNumber, airIRmAlarms=airIRmAlarms, dcRectifierOVPAlarm=dcRectifierOVPAlarm, upsOutletGroupConfigTable=upsOutletGroupConfigTable, rPDU2SensorTempHumidityStatusTable=rPDU2SensorTempHumidityStatusTable, airFMSysCoilFluidActivThreshC=airFMSysCoilFluidActivThreshC, rPDU2IdentTable=rPDU2IdentTable, battManString2BatteryChemLowVoltageAlarm=battManString2BatteryChemLowVoltageAlarm, sPDUOutletConfigVMName=sPDUOutletConfigVMName, airIRmPmMyZoneRoomTemperatureF=airIRmPmMyZoneRoomTemperatureF, cpsSerialGroupTable=cpsSerialGroupTable, upsAdvConfigSimpleSignalShutdowns=upsAdvConfigSimpleSignalShutdowns, airIRG3CMThresholdsRackInletTempHighMetric=airIRG3CMThresholdsRackInletTempHighMetric, airIRG2AlarmsTable=airIRG2AlarmsTable, emsStatusHardwareStatus=emsStatusHardwareStatus, battManString2BatteryCalibTable=battManString2BatteryCalibTable, airFMSysAlarmMapExpMod1HumFail=airFMSysAlarmMapExpMod1HumFail, coolingUnitConfigurationDiscreteTable=coolingUnitConfigurationDiscreteTable, airFMSysLowCoilFluidTempF=airFMSysLowCoilFluidTempF, airIRmPmCompressor2Failure=airIRmPmCompressor2Failure, rPDU2PhaseToPhaseStatusEntry=rPDU2PhaseToPhaseStatusEntry, airIRG3AlarmsIndex=airIRG3AlarmsIndex, rPDU2DeviceStatusPower=rPDU2DeviceStatusPower, rPDU2OutletSwitchedControlTable=rPDU2OutletSwitchedControlTable, rPDU2DevicePropertiesNumMeteredBanks=rPDU2DevicePropertiesNumMeteredBanks, xATSSource2Quality=xATSSource2Quality, xPDUSystemGroundCurrentAlarm=xPDUSystemGroundCurrentAlarm, upsBatteryReplaced=upsBatteryReplaced, upsBasicControl=upsBasicControl, isx6ModuleRackPdu=isx6ModuleRackPdu, rPDU2OutletMeteredStatusCurrent=rPDU2OutletMeteredStatusCurrent, airIRG3CMTableSize=airIRG3CMTableSize, airFMGroupLoadShareReheatThreshF=airFMGroupLoadShareReheatThreshF, airFMGroupSysManualRoleSetting=airFMGroupSysManualRoleSetting, upsDiagSubSysSystemPowerSupplyFrameIndex=upsDiagSubSysSystemPowerSupplyFrameIndex, rPDU2DeviceStatusName=rPDU2DeviceStatusName, coolingUnitStatusDiscreteTable=coolingUnitStatusDiscreteTable, dm3ConfigFusesIndex=dm3ConfigFusesIndex, memInputAnalogCalibrationPoint2Value=memInputAnalogCalibrationPoint2Value, rARUStatusTable=rARUStatusTable, powerNetSoftwareOid=powerNetSoftwareOid, xPDUBranchCurrentMaxAlarmCleared=xPDUBranchCurrentMaxAlarmCleared, airFMGroupFailoverSysHighEnvTemp=airFMGroupFailoverSysHighEnvTemp, cpsSerialPortPppMtu=cpsSerialPortPppMtu, airIRRP500UnitStatusReturnAirTempUS=airIRRP500UnitStatusReturnAirTempUS, airIRG2RDT2StatusDischargePressureMetric=airIRG2RDT2StatusDischargePressureMetric, airIRmPmPump4Running=airIRmPmPump4Running, sPDUIdentFirmwareRev=sPDUIdentFirmwareRev, isxModularPduIdentMonitorCardFirmwareAppOSRev=isxModularPduIdentMonitorCardFirmwareAppOSRev, smartUPS450=smartUPS450, airIRmPmSensor18Failure=airIRmPmSensor18Failure, upsHighPrecBatteryPackSerialNumber=upsHighPrecBatteryPackSerialNumber, pduUtilityLineOvervoltage=pduUtilityLineOvervoltage, upsDiagSubSysSystemPowerSupplyTableSize=upsDiagSubSysSystemPowerSupplyTableSize, airFMSysFlowSwitch=airFMSysFlowSwitch, xATSSystemOutputTotalPowerFactor=xATSSystemOutputTotalPowerFactor, rPDUStatusBankIndex=rPDUStatusBankIndex, airFMSysAlarmMapOutput8=airFMSysAlarmMapOutput8, upsWokeUp=upsWokeUp, airFMGroupLoadShareHumThresh=airFMGroupLoadShareHumThresh, xPDUInputContactNormalState=xPDUInputContactNormalState, upsAdvTestDiagnostics=upsAdvTestDiagnostics, xPDUCoolingFanAlarmCleared=xPDUCoolingFanAlarmCleared, upsHighPrecTotalDCCurrentTableIndex=upsHighPrecTotalDCCurrentTableIndex, isxModularDistSubFeeds=isxModularDistSubFeeds, accessPXConfigRearDoorLockControl=accessPXConfigRearDoorLockControl, emsSensorConfigEntry=emsSensorConfigEntry, battManString2BatteryTableSize=battManString2BatteryTableSize, airIRmPmFan2Failure=airIRmPmFan2Failure, mfiletransferConfigFTP=mfiletransferConfigFTP, battManConfig=battManConfig, sPDUMasterStatusVMMaxLoad=sPDUMasterStatusVMMaxLoad, upsDiagSubSysFrameIndex=upsDiagSubSysFrameIndex, rPDUOutletConfigMonitoredOverloadThreshold=rPDUOutletConfigMonitoredOverloadThreshold, xPDUSystemOutputUnderVoltThreshold=xPDUSystemOutputUnderVoltThreshold, airIRG3IdentEntry=airIRG3IdentEntry, mupsCommunicationEstablished=mupsCommunicationEstablished, upsDiagSubSysFrameHardwareRev=upsDiagSubSysFrameHardwareRev, emsCommunicationLost=emsCommunicationLost, dm3ConfigConvImbalanceAlarm=dm3ConfigConvImbalanceAlarm, upsPhaseOutputMinPercentPower=upsPhaseOutputMinPercentPower, coolingUnitExtendedAnalogScale=coolingUnitExtendedAnalogScale, msvmOverload=msvmOverload, baseFanFailureCleared=baseFanFailureCleared, airFMSysResetFldSrvcDflts=airFMSysResetFldSrvcDflts, airIRmPmPWWHeatingManOpValue=airIRmPmPWWHeatingManOpValue, memOutputStatusTable=memOutputStatusTable, airIRG2RDT2RunHoursFanPSEntry=airIRG2RDT2RunHoursFanPSEntry, envHighHumidityThresholdViolationCleared=envHighHumidityThresholdViolationCleared, xATSTestingResultsLastDateOfTest=xATSTestingResultsLastDateOfTest, airIRRP500UnitConfigInputNormalState=airIRRP500UnitConfigInputNormalState, calibrationStart=calibrationStart, dm3StatusConvPhyAddr=dm3StatusConvPhyAddr, emsInputContactConfigTable=emsInputContactConfigTable, upsBasicTest=upsBasicTest, airIRRP500UnitThresholds=airIRRP500UnitThresholds, airIRSCGroupSetptsSupplyAirSetpointMetric=airIRSCGroupSetptsSupplyAirSetpointMetric, airIRmPmDrycooler2WinterStartTempF=airIRmPmDrycooler2WinterStartTempF, emsOutletConfigOutletName=emsOutletConfigOutletName, airIRG2RDT2Setpoints=airIRG2RDT2Setpoints, battManConfigMaxCellVoltage=battManConfigMaxCellVoltage, airIRmPmPCStop=airIRmPmPCStop, airIRG3IdentIndex=airIRG3IdentIndex, airIRmPmPump1Runtime=airIRmPmPump1Runtime, memInputAnalogLowThresh=memInputAnalogLowThresh, intelligenceModuleRemoved=intelligenceModuleRemoved, rPDU2PhasePropertiesTable=rPDU2PhasePropertiesTable, isxcFailureAlarmCleared=isxcFailureAlarmCleared, sPDUIdentModelNumber=sPDUIdentModelNumber, atsStatusSourceAStatus=atsStatusSourceAStatus, airIRmPmDrycooler4SummerStartTempF=airIRmPmDrycooler4SummerStartTempF, isxModularDistSysCurrent=isxModularDistSysCurrent, coolingUnitExtendedDiscreteTableSize=coolingUnitExtendedDiscreteTableSize, atsStatus5VPowerSupply=atsStatus5VPowerSupply, upsDiagSubSysExternalSwitchGearManufactureDate=upsDiagSubSysExternalSwitchGearManufactureDate, galaxy7000UPS200kVA=galaxy7000UPS200kVA, cpsSerialSpec=cpsSerialSpec, upsWarningCondition=upsWarningCondition, airIRmPmMyZoneRoomTemperature=airIRmPmMyZoneRoomTemperature, airFMModServIntBlwrCtrl1Reset=airFMModServIntBlwrCtrl1Reset, emsAlarmDeviceStatusDeviceIndex=emsAlarmDeviceStatusDeviceIndex, isxModularDistSubFeedInfoTableSize=isxModularDistSubFeedInfoTableSize, airIRG3RDUThresholdsEnteringFluidTempHighUS=airIRG3RDUThresholdsEnteringFluidTempHighUS, iemConfigProbesEntry=iemConfigProbesEntry, airIRRCUnitConfig=airIRRCUnitConfig, xPDUDevicePanelBreakerRating=xPDUDevicePanelBreakerRating, sPDUMasterStatusVMOverloadCondition=sPDUMasterStatusVMOverloadCondition, upsBasicSystemStatus=upsBasicSystemStatus, airIRmPmMinLimitReturnAirTemperature=airIRmPmMinLimitReturnAirTemperature, airFMSysAlarmMapInput6=airFMSysAlarmMapInput6, airFM=airFM, airIRRP500UnitRunHoursCondensatePump=airIRRP500UnitRunHoursCondensatePump, rPDU2PhaseConfigEntry=rPDU2PhaseConfigEntry, upsAdvOutputCurrentTHD=upsAdvOutputCurrentTHD, coolingUnitExtendedDiscreteTableIndex=coolingUnitExtendedDiscreteTableIndex, airIRmPmDrycooler2HysteresisK=airIRmPmDrycooler2HysteresisK, cpsInfoSerialPortSigDTR=cpsInfoSerialPortSigDTR, upsBasicConfigDeviceEntry=upsBasicConfigDeviceEntry, airIRG2GroupStatusMaxRackInletTempMetric=airIRG2GroupStatusMaxRackInletTempMetric, dm3ConfigBreakersName=dm3ConfigBreakersName, xATSGeneratorIdentMaxPowerRating=xATSGeneratorIdentMaxPowerRating, cpsInfoSerialPortSigCTS=cpsInfoSerialPortSigCTS, rPDUOutletControlOutletBank=rPDUOutletControlOutletBank, xATSGeneratorSettingsStopDelay=xATSGeneratorSettingsStopDelay, sPDUOutletConfigEntry=sPDUOutletConfigEntry, airIRG3RDUThresholdsRDUID=airIRG3RDUThresholdsRDUID, airFMModBlwr2InverterTempC=airFMModBlwr2InverterTempC, upsInverterOverTemperature=upsInverterOverTemperature, apcEnvLowHumidityThresholdViolationCleared=apcEnvLowHumidityThresholdViolationCleared, upsComm=upsComm, rPDU2IdentContact=rPDU2IdentContact, emsProbeConfigProbeLowHumidityThresh=emsProbeConfigProbeLowHumidityThresh, isxModularDistSysCurrentAlarmStatus=isxModularDistSysCurrentAlarmStatus, dm3ConfigBreakersEntry=dm3ConfigBreakersEntry, eps6000UPS=eps6000UPS, dm3Status=dm3Status, batteryPackCommEstablished=batteryPackCommEstablished, cpsInfoSerialPortNumber=cpsInfoSerialPortNumber, dm3StatusRectFanFail=dm3StatusRectFanFail, upsDiagSubSysSystemPowerSupplyEntry=upsDiagSubSysSystemPowerSupplyEntry, xPDUInternalCommError=xPDUInternalCommError, atsNumInputs=atsNumInputs, emsOutputRelayStatus=emsOutputRelayStatus, dm3ConfigFuses=dm3ConfigFuses, isxModularOutputFrequencyThresholdViolation=isxModularOutputFrequencyThresholdViolation, xATSTestingResultsTestLastTestTime=xATSTestingResultsTestLastTestTime, rPDUPowerSupplyAlarm=rPDUPowerSupplyAlarm, dm3ConfigOutputRelays=dm3ConfigOutputRelays, emsSensorConfigSensorIndex=emsSensorConfigSensorIndex, upsPhaseInputTableIndex=upsPhaseInputTableIndex, airIRRP100UnitStatusInputState=airIRRP100UnitStatusInputState, apcLocalDisplayConfigCheckLogIndicator=apcLocalDisplayConfigCheckLogIndicator, battManBatteryCalib=battManBatteryCalib, memModulesStatusModuleNumber=memModulesStatusModuleNumber, battManSystemPilotTempF=battManSystemPilotTempF, upsAdvControlFlashAndBeep=upsAdvControlFlashAndBeep, sPDUMasterConfigMSP=sPDUMasterConfigMSP, dcRectifierOvertempAlarmCleared=dcRectifierOvertempAlarmCleared, airIRmPmHumidifier2CurrentValue=airIRmPmHumidifier2CurrentValue, airFMModBlwr2TableSize=airFMModBlwr2TableSize, airIRRP500UnitStatusReturnAirTempMetric=airIRRP500UnitStatusReturnAirTempMetric, airFMModBlower1=airFMModBlower1, dm3StatusBreakersEntry=dm3StatusBreakersEntry, coolingUnitConfigurationDiscreteIntegerReferenceKey=coolingUnitConfigurationDiscreteIntegerReferenceKey, rPDUIdentDeviceOrientation=rPDUIdentDeviceOrientation, coolingUnitExtendedDiscreteValueAsInteger=coolingUnitExtendedDiscreteValueAsInteger, xATSGeneratorStatusGeneratorName=xATSGeneratorStatusGeneratorName, upsOutletGroupStatusName=upsOutletGroupStatusName, airIRG2IdentGroupSysOID=airIRG2IdentGroupSysOID, airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric=airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric, memOutletStatusTableSize=memOutletStatusTableSize, xATSGeneratorServiceTotalkWhLifetime=xATSGeneratorServiceTotalkWhLifetime, battManConfigCellsperBattery=battManConfigCellsperBattery, xATSSwitchStatistics=xATSSwitchStatistics, powerModuleDecrease=powerModuleDecrease, upsBasicIdentModel=upsBasicIdentModel, AirIRSCFanSpeedControl=AirIRSCFanSpeedControl, airFMSysAlarmMapMainModLowSupplyTemp=airFMSysAlarmMapMainModLowSupplyTemp, rPDU2DevicePropertiesModule=rPDU2DevicePropertiesModule, airIRmPmUnitTemperatureF=airIRmPmUnitTemperatureF, mspCommunicationLost=mspCommunicationLost, airIRRP500GroupSetpointsReheatMetric=airIRRP500GroupSetpointsReheatMetric, upsAdvOutputCurrent=upsAdvOutputCurrent, airFMSysCoolPIDDerivativeD=airFMSysCoolPIDDerivativeD, xATSSwitchTimersIndex=xATSSwitchTimersIndex, emsIdentEMSName=emsIdentEMSName, airFMSysAlarmMapSysLowEnvHum=airFMSysAlarmMapSysLowEnvHum, airFMSysAlarmMapOutputTableSize=airFMSysAlarmMapOutputTableSize, rPDUOutletBankOverloadRestriction=rPDUOutletBankOverloadRestriction, dcCommunicationEstablished=dcCommunicationEstablished, isxModularDistSysVoltageEntry=isxModularDistSysVoltageEntry, airIRRCUnitStatusSupplyAirTempUS=airIRRCUnitStatusSupplyAirTempUS, rPDU2BankConfigTable=rPDU2BankConfigTable, battManConfigBatteriesperString=battManConfigBatteriesperString, airFMGroupFailoverModWaterDetected=airFMGroupFailoverModWaterDetected, memInputsConfigModuleNumber=memInputsConfigModuleNumber, rPDU2IdentHardwareRev=rPDU2IdentHardwareRev, airIRSCGroupSetptsCoolDeadbandMetric=airIRSCGroupSetptsCoolDeadbandMetric)
mibBuilder.exportSymbols("PowerNet-MIB", rARUPowerStatusAruIndex=rARUPowerStatusAruIndex, airIRG2AlarmsTableSize=airIRG2AlarmsTableSize, airIRmPmWaterTemperatureF=airIRmPmWaterTemperatureF, xATSGeneratorGroundFaultAlarm=xATSGeneratorGroundFaultAlarm, upsParallelOutputActivePower=upsParallelOutputActivePower, memOutletAction=memOutletAction, cpsSerialPppd=cpsSerialPppd, rPDU2Sensor=rPDU2Sensor, battManOhmicValueCorrectionFactor=battManOhmicValueCorrectionFactor, airIRmPmDrycooler3HysteresisK=airIRmPmDrycooler3HysteresisK, rPDU2SensorTempHumidityStatusIndex=rPDU2SensorTempHumidityStatusIndex, battManString2ResponseTestCurrentBenchmarkTable=battManString2ResponseTestCurrentBenchmarkTable, airIRG2RDT2ThresholdsSupplyAirHighTempMetric=airIRG2RDT2ThresholdsSupplyAirHighTempMetric, isxModularDistTotals=isxModularDistTotals, battManString2OhmicValueTableSize=battManString2OhmicValueTableSize, xPDUBranchCurrentLowAlarm=xPDUBranchCurrentLowAlarm, sPDUOutletConfigMSPmupsP2LowHum=sPDUOutletConfigMSPmupsP2LowHum, rPDUOutletBankIndex=rPDUOutletBankIndex, airIRRP500UnitStatusMaximumRackInletTempMetric=airIRRP500UnitStatusMaximumRackInletTempMetric, airIRmPmMaxLimitReturnAirHumidity=airIRmPmMaxLimitReturnAirHumidity, airIRG2GroupStatusMinReturnAirTempUS=airIRG2GroupStatusMinReturnAirTempUS, upsPhaseOutputPhaseEntry=upsPhaseOutputPhaseEntry, airIRRP500Group=airIRRP500Group, rPDUOutletPhaseIndex=rPDUOutletPhaseIndex, cpsSerialPortAuthAcc=cpsSerialPortAuthAcc, sPDUMasterStatusVMEntry=sPDUMasterStatusVMEntry, rPDU2OutletSwitchedConfigName=rPDU2OutletSwitchedConfigName, airIRRP500GroupConfigPercentGlycol=airIRRP500GroupConfigPercentGlycol, rPDU2OutletSwitchedStatusIndex=rPDU2OutletSwitchedStatusIndex, airFMSysAvgRemoteHum=airFMSysAvgRemoteHum, airIRG2RDT2StatusCoolDemand=airIRG2RDT2StatusCoolDemand, airIRmPmWaterTemperature=airIRmPmWaterTemperature, xPDUSystemOutputFrequencyTolerance=xPDUSystemOutputFrequencyTolerance, airCriticalCondition=airCriticalCondition, temperatureThresholdViolationCleared2=temperatureThresholdViolationCleared2, airIRRP100UnitIdentName=airIRRP100UnitIdentName, airFMSysAlarmMapMainModHumReplCyl=airFMSysAlarmMapMainModHumReplCyl, airFMIdentModuleFirmwareRev=airFMIdentModuleFirmwareRev, airIRmPmCmp1HysteresisSummerK=airIRmPmCmp1HysteresisSummerK, coolingUnitAboutTableSize=coolingUnitAboutTableSize, rPDU2PhaseConfigLowLoadCurrentThreshold=rPDU2PhaseConfigLowLoadCurrentThreshold, airIRG3RDUConfigRDUID=airIRG3RDUConfigRDUID, airIRmPmPump2StartTemperatureF=airIRmPmPump2StartTemperatureF, emsInputContactStatus=emsInputContactStatus, upsParallelDiagSubSysBreakerStatus=upsParallelDiagSubSysBreakerStatus, xATSGeneratorOverload=xATSGeneratorOverload, coolingUnitConfigurationAnalogMinimum=coolingUnitConfigurationAnalogMinimum, iemConfigProbeHumidHysteresis=iemConfigProbeHumidHysteresis, airIRmPmPump3Running=airIRmPmPump3Running, sPDUOutletCtl=sPDUOutletCtl, cpsSerialRlogin=cpsSerialRlogin, airIRmPmNumberOfDryCoolers=airIRmPmNumberOfDryCoolers, dm3ConfigInRlyIndex=dm3ConfigInRlyIndex, upsParallelInputApparentPower=upsParallelInputApparentPower, emStatusProbeTempUnits=emStatusProbeTempUnits, essentialServicesStatus=essentialServicesStatus, airIRRP500UnitStatusSupplyAirTempMetric=airIRRP500UnitStatusSupplyAirTempMetric, battManUnitSerialNumber=battManUnitSerialNumber, iemStatusProbeStatus=iemStatusProbeStatus, sPDUOutletConfigMSPmupsP2LowTemp=sPDUOutletConfigMSPmupsP2LowTemp, dm3StatusRectCurrentLimit=dm3StatusRectCurrentLimit, xATSNotInAutomaticMode=xATSNotInAutomaticMode, airFMSysCoilFluidActualCoolDehum=airFMSysCoilFluidActualCoolDehum, ais5000UPS10kVA=ais5000UPS10kVA, airIRRP100UnitServiceIntervalAirFilterAlarm=airIRRP100UnitServiceIntervalAirFilterAlarm, rPDU2SensorTempHumidityStatusTempStatus=rPDU2SensorTempHumidityStatusTempStatus, masterSwitchV1=masterSwitchV1, airIRG2RDT2Config=airIRG2RDT2Config, masterSwitchrPDU=masterSwitchrPDU, airFMStatusModuleSupplyTempC=airFMStatusModuleSupplyTempC, airInRoomPerimeter=airInRoomPerimeter, isxModularDistInfoMeterSerialNumber=isxModularDistInfoMeterSerialNumber, battManAlarmManagementController=battManAlarmManagementController, sPDUOutletConfigMSPgsOutletName=sPDUOutletConfigMSPgsOutletName, airIRG3AlarmsTableSize=airIRG3AlarmsTableSize, upsAdvConfigLCDLocalLanguage=upsAdvConfigLCDLocalLanguage, battManString2BatteryUserHighVoltageAlarm=battManString2BatteryUserHighVoltageAlarm, environmentalMgtSystem=environmentalMgtSystem, iemConfigProbeHighTempEnable=iemConfigProbeHighTempEnable, memOutletConfigTableSize=memOutletConfigTableSize, xATSInputContactNormalState=xATSInputContactNormalState, rPDU2PhaseConfigPhasePeakCurrentReset=rPDU2PhaseConfigPhasePeakCurrentReset, dm3ConfigRectLowVoltThresh=dm3ConfigRectLowVoltThresh, upsIntegratedATSUpsReturnStaggering=upsIntegratedATSUpsReturnStaggering, battManSystemAmbientHighTempAlarm=battManSystemAmbientHighTempAlarm, battManConfigBatteryAHCapacity=battManConfigBatteryAHCapacity, airIRG2GroupStatusMinReturnAirTempMetric=airIRG2GroupStatusMinReturnAirTempMetric, miniSNMPadapter=miniSNMPadapter, atsOutputPhaseIndex=atsOutputPhaseIndex, airIRmPmFan2Running=airIRmPmFan2Running, dm3StatusBreakers=dm3StatusBreakers, battManString1ResponseTestChangeTableSize=battManString1ResponseTestChangeTableSize, airFMModPropTable=airFMModPropTable, airFMSysReheatPIDGainP=airFMSysReheatPIDGainP, rPDULoadStatusBankNumber=rPDULoadStatusBankNumber, upsFirmwareUpdateSucceeded=upsFirmwareUpdateSucceeded, airFMModHumTableSize=airFMModHumTableSize, xATSSource2=xATSSource2, mtrapargsString08=mtrapargsString08, airIRRCUnitThresholdsSupplyAirHighTempMetric=airIRRCUnitThresholdsSupplyAirHighTempMetric, airIRmPmSensor20Failure=airIRmPmSensor20Failure, battManString2ResponseTestCurrentIndex=battManString2ResponseTestCurrentIndex, cpsSerialPortAccSrv2=cpsSerialPortAccSrv2, upsDiagSubSysIntBypSwitchTable=upsDiagSubSysIntBypSwitchTable, masterSwitchV2=masterSwitchV2, airIRRCGroupStatusMaxRackInletTempMetric=airIRRCGroupStatusMaxRackInletTempMetric, atsInputVoltage=atsInputVoltage, airIRRP500UnitStatusSupplyHumidity=airIRRP500UnitStatusSupplyHumidity, sPDUIdentSerialNumberMSP=sPDUIdentSerialNumberMSP, airIRAlarmConditionsEntry=airIRAlarmConditionsEntry, cpsSerialPortAuthSrv2=cpsSerialPortAuthSrv2, airIRmPmDrycooler3Running=airIRmPmDrycooler3Running, isxModularDistSysPowerEntry=isxModularDistSysPowerEntry, rPDULoadDevMaxOutletLoad=rPDULoadDevMaxOutletLoad, upsBottomFeedFrameLayoutPositionID=upsBottomFeedFrameLayoutPositionID, accessPXStatusBeaconCurrentState=accessPXStatusBeaconCurrentState, emsSensorConfigSensorNormalState=emsSensorConfigSensorNormalState, atsOutputBankMinCurrent=atsOutputBankMinCurrent, symmetra3PhaseUPS80kVA=symmetra3PhaseUPS80kVA, upsTurnedOn=upsTurnedOn, upsHighPrecBatteryPackEntry=upsHighPrecBatteryPackEntry, airIRRP100GroupConfigAltitudeUS=airIRRP100GroupConfigAltitudeUS, sPDUOutletControl=sPDUOutletControl, iemStatusProbeTempUnits=iemStatusProbeTempUnits, upsDiagSwitchGearStatus=upsDiagSwitchGearStatus, airIRRP100UnitIdentManufactureDate=airIRRP100UnitIdentManufactureDate, airIRmPmEEV1PressureSensorError=airIRmPmEEV1PressureSensorError, atsCalibrationNumInputs=atsCalibrationNumInputs, dm3ConfigBattAmpHour=dm3ConfigBattAmpHour, xATSGeneratorLowFuelLevelAlarmCleared=xATSGeneratorLowFuelLevelAlarmCleared, airConditioners=airConditioners, pduUtilityLineUndervoltage=pduUtilityLineUndervoltage, smartUPS600=smartUPS600, xPDUCircuitBreakers=xPDUCircuitBreakers, battManInputContactEntry=battManInputContactEntry, emConfigContactName=emConfigContactName, isxModularDistInfoMeterFirmwareRev=isxModularDistInfoMeterFirmwareRev, dm3ConfigInRlyName=dm3ConfigInRlyName, isxModularBreakerOpenAlarm=isxModularBreakerOpenAlarm, ups=ups, airIRRP500GroupSetpointsCoolMetric=airIRRP500GroupSetpointsCoolMetric, airPACondensatePump=airPACondensatePump, rPDU2OutletSwitchedConfigEntry=rPDU2OutletSwitchedConfigEntry, airIRRCGroupSetpointsCoolMetric=airIRRCGroupSetpointsCoolMetric, airIRRCGroup=airIRRCGroup, xATSTestingSimulatePowerFailTest=xATSTestingSimulatePowerFailTest, ceSevereConditionCleared=ceSevereConditionCleared, sPDUOutletConfigMSPmupsName=sPDUOutletConfigMSPmupsName, airIRmPmRuntimeUnit=airIRmPmRuntimeUnit, apcDcBusOverVoltageCleared=apcDcBusOverVoltageCleared, atsStatusSelectedSource=atsStatusSelectedSource, memSensorsStatusSensorLocation=memSensorsStatusSensorLocation, upsParallelDiagSubSysBreakerFrameIndex=upsParallelDiagSubSysBreakerFrameIndex, xATSIdentFirmwareAppRev=xATSIdentFirmwareAppRev, battManString2BatteryCalibEntry=battManString2BatteryCalibEntry, rsRedundancyRestored=rsRedundancyRestored, airIRG2AlarmsDescription=airIRG2AlarmsDescription, airIRRCGroupConfigConfigurationType=airIRRCGroupConfigConfigurationType, upsOutletGroupControlEntry=upsOutletGroupControlEntry, airIRSCUnitServiceIntervals=airIRSCUnitServiceIntervals, memOutputStatusCurrentState=memOutputStatusCurrentState, atsConfigVoltageSensitivity=atsConfigVoltageSensitivity, emsSensorControlSensorSystemName=emsSensorControlSensorSystemName, airIRmPmPump3StartTemperatureK=airIRmPmPump3StartTemperatureK, atsOutputMaxPercentLoad=atsOutputMaxPercentLoad, pduUPSInputVoltageLost=pduUPSInputVoltageLost, sPDUOutletConfigMSPgsOutletIndex=sPDUOutletConfigMSPgsOutletIndex, airIRG3CMStatusReturnAirTempUS=airIRG3CMStatusReturnAirTempUS, atsRMSOverVoltage=atsRMSOverVoltage, airIRG3RDUStatusOperatingMode=airIRG3RDUStatusOperatingMode, rPDU2DeviceStatusOutletsEnergyStartTime=rPDU2DeviceStatusOutletsEnergyStartTime, accessPXIdentAlarmStatus=accessPXIdentAlarmStatus, upsAdvConfigBattExhaustThresh=upsAdvConfigBattExhaustThresh, iemStatusRelayStatus=iemStatusRelayStatus, airIRG2RDT2StatusDischargePressureUS=airIRG2RDT2StatusDischargePressureUS, airIRmPmEEV2StepperMotorError=airIRmPmEEV2StepperMotorError, accessPXStatusFrontDoor=accessPXStatusFrontDoor, emConfigProbeMaxHumidEnable=emConfigProbeMaxHumidEnable, rARUConfigAruIndex=rARUConfigAruIndex, airIRRP100UnitStatusDehumidifyDemand=airIRRP100UnitStatusDehumidifyDemand, cpsSerialPortEntry=cpsSerialPortEntry, airFMModServIntBlwrCtrl1=airFMModServIntBlwrCtrl1, xPDUInputContactName=xPDUInputContactName, AirIRSCCapacityControlType=AirIRSCCapacityControlType, sPDUOutletConfigMSPannunInitialState=sPDUOutletConfigMSPannunInitialState, airFMSysAlarmMapExpMod2OutputIndex=airFMSysAlarmMapExpMod2OutputIndex, airIRmPmLouver2ManOpPosition=airIRmPmLouver2ManOpPosition, iemHighHumidThresholdViolation=iemHighHumidThresholdViolation, isxModularDistModuleOutputThresholdHigh=isxModularDistModuleOutputThresholdHigh, iemStatus=iemStatus, isxModularOutputFrequencyViolationCleared=isxModularOutputFrequencyViolationCleared, airIRmPmDrycooler2WinterStartTempC=airIRmPmDrycooler2WinterStartTempC, airIRmPmCmp2StartTempWinterK=airIRmPmCmp2StartTempWinterK, cpsInfoSerialPortErrOverrun=cpsInfoSerialPortErrOverrun, xPDUBypassInputVoltagePhaseIndex=xPDUBypassInputVoltagePhaseIndex, airIRmPmFan3Runtime=airIRmPmFan3Runtime, xATSSystemOutputOverCurrentThreshold=xATSSystemOutputOverCurrentThreshold, airIRRP100UnitServiceIntervalCompressor=airIRRP100UnitServiceIntervalCompressor, airFMSysAlarmMapExpMod1AirBlckIntOpen=airFMSysAlarmMapExpMod1AirBlckIntOpen, airIRRP100UnitStatusSuctionPressureUS=airIRRP100UnitStatusSuctionPressureUS, xPDUOutputFrequencyAlarm=xPDUOutputFrequencyAlarm, airFMModRHTableSize=airFMModRHTableSize, sPDUMasterConfigMSPTable=sPDUMasterConfigMSPTable, airFMModElectrodeCurrent=airFMModElectrodeCurrent, isxModularDistSysVoltagePhaseIndex=isxModularDistSysVoltagePhaseIndex, rPDU2SensorTempHumidityConfigHumidityLowThresh=rPDU2SensorTempHumidityConfigHumidityLowThresh, airIRmPmDrycooler3Failure=airIRmPmDrycooler3Failure, upsAdvTestDiagnosticSchedule=upsAdvTestDiagnosticSchedule, apcLocalDisplayConfig=apcLocalDisplayConfig, rPDU2OutletSwitchedConfigTable=rPDU2OutletSwitchedConfigTable, upsDiagFlyWheelStatus=upsDiagFlyWheelStatus, airFMSysInputDelay=airFMSysInputDelay, airIRG3GroupStatusAvgSupplyTempUS=airIRG3GroupStatusAvgSupplyTempUS, airPASystemPower=airPASystemPower, automaticTransferSwitch=automaticTransferSwitch, airIRG3RDUConfigDeviceIndex=airIRG3RDUConfigDeviceIndex, upsAdvConfigAlarmRedundancy=upsAdvConfigAlarmRedundancy, memInputsConfigTable=memInputsConfigTable, airFMStatusModuleReturnTempC=airFMStatusModuleReturnTempC, dm3ConfigPowerModules=dm3ConfigPowerModules, memBeaconStatusTableSize=memBeaconStatusTableSize, airIRG3CMServiceIntervalsAirFilterAlarm=airIRG3CMServiceIntervalsAirFilterAlarm, upsAdvBatteryActualVoltage=upsAdvBatteryActualVoltage, dcBatteryBreakerAlarmCleared=dcBatteryBreakerAlarmCleared, upsSyncCtrlGroupConfig=upsSyncCtrlGroupConfig, rPDU2OutletSwitchedPropertiesBank=rPDU2OutletSwitchedPropertiesBank, battManSystemCalib=battManSystemCalib, powerFrameIndex=powerFrameIndex, airIRRP500UnitServiceIntervalHumidifier=airIRRP500UnitServiceIntervalHumidifier, airFMSysAlarmMapExpMod1OutputIndex=airFMSysAlarmMapExpMod1OutputIndex, switchgearBreakerIndex=switchgearBreakerIndex, airIRmPmPump3Failure=airIRmPmPump3Failure, airPARemoteTempC=airPARemoteTempC, memOutputConfigModuleNumber=memOutputConfigModuleNumber, airIRmPmCmp1HysteresisWinter=airIRmPmCmp1HysteresisWinter, airIRRP100GroupStatusActiveFlowControlStatus=airIRRP100GroupStatusActiveFlowControlStatus, airFMStatusSystemOn=airFMStatusSystemOn, upsAdvConfigBasicSignalLowBatteryDuration=upsAdvConfigBasicSignalLowBatteryDuration, airIRG2GroupConfigCoolGainP=airIRG2GroupConfigCoolGainP, airIRG2RDT2StatusOperateMode=airIRG2RDT2StatusOperateMode, dm3ConfigLVDTable=dm3ConfigLVDTable, xATSTestingScheduleTestWithLoadInterval=xATSTestingScheduleTestWithLoadInterval, atsOutputVoltageOrientation=atsOutputVoltageOrientation, rPDU2SensorTempHumidityConfigHumidityHysteresis=rPDU2SensorTempHumidityConfigHumidityHysteresis, iemContactFault=iemContactFault, upsOutletGroupStatusEntry=upsOutletGroupStatusEntry, xPDUSystemStateAlarm=xPDUSystemStateAlarm, rARUSensorsConfigEntry=rARUSensorsConfigEntry, apcUpsConfigFieldIndex=apcUpsConfigFieldIndex, airIRSCUnitStatusCondInletTempUS=airIRSCUnitStatusCondInletTempUS, airIRmPmSensor5Defect=airIRmPmSensor5Defect, cpsSerialPortSniffSess=cpsSerialPortSniffSess, battManStringTable=battManStringTable, emsInputContactConfigInputContactNormalState=emsInputContactConfigInputContactNormalState)
mibBuilder.exportSymbols("PowerNet-MIB", upsHighPrecBatteryPackIndex=upsHighPrecBatteryPackIndex, airFMSysNumber=airFMSysNumber, airFMSysCoolPIDResetRateI=airFMSysCoolPIDResetRateI, airFMSysHotWaterTempC=airFMSysHotWaterTempC, emStatusProbeLowTempViolation=emStatusProbeLowTempViolation, coolingUnitExtendedAnalogTableSize=coolingUnitExtendedAnalogTableSize, infraStruXureATS=infraStruXureATS, atsCalibration=atsCalibration, rPDULoadDevBankIndex=rPDULoadDevBankIndex, upsFirmwareMismatchCleared=upsFirmwareMismatchCleared, sPDUOutletConfigMSPgsName=sPDUOutletConfigMSPgsName, airIRRP100GroupSetpoints=airIRRP100GroupSetpoints, xPDUSystemOutputVoltageLtoN=xPDUSystemOutputVoltageLtoN, dm3ConfigRectFanFailAlarm=dm3ConfigRectFanFailAlarm, upsSideCarFrameLayoutTable=upsSideCarFrameLayoutTable, redundantSwitch=redundantSwitch, struxureWareOperations=struxureWareOperations, xPDUBranchCurrentMaxAlarm=xPDUBranchCurrentMaxAlarm, airIRmPmLouver1=airIRmPmLouver1, rARUSensorsStatusTable=rARUSensorsStatusTable, upsFirmwareUpdateFinished=upsFirmwareUpdateFinished, airIRRP=airIRRP, xATSGeneratorFuelTankRuptureAlarm=xATSGeneratorFuelTankRuptureAlarm, apcAnalogInputLowThresholdViolation=apcAnalogInputLowThresholdViolation, airIRG3RDUStatusPump1HeadPressureMetric=airIRG3RDUStatusPump1HeadPressureMetric, upsDiagnosticPowerModules=upsDiagnosticPowerModules, emConfigProbeHighTempThreshold=emConfigProbeHighTempThreshold, xATSSwitchBlockMapStatus=xATSSwitchBlockMapStatus, airIRSCUnitRunHoursCondenserFan1=airIRSCUnitRunHoursCondenserFan1, rPDU2DeviceStatusModule=rPDU2DeviceStatusModule, upsPhaseInputTable=upsPhaseInputTable, dm3IdentSysDescriptionIndex=dm3IdentSysDescriptionIndex, rPDU2OutletMeteredPropertiesTable=rPDU2OutletMeteredPropertiesTable, airIRmPmGECWvalveOpeningGrade=airIRmPmGECWvalveOpeningGrade, airIRRP500UnitStatusEnteringFluidTemperatureMetric=airIRRP500UnitStatusEnteringFluidTemperatureMetric, xATSGeneratorOutputPhaseIndex=xATSGeneratorOutputPhaseIndex, apCPSPcmcia=apCPSPcmcia, rPDUOutletConfigMonitoredTable=rPDUOutletConfigMonitoredTable, airIRSCGroupStatusAirFlowUS=airIRSCGroupStatusAirFlowUS, dm3ConfigBreakersTable=dm3ConfigBreakersTable, rPDUOutletStatusOutletBank=rPDUOutletStatusOutletBank, airFMModBlwr1TableSize=airFMModBlwr1TableSize, airIRG2RDT2StatusSuperheatTempMetric=airIRG2RDT2StatusSuperheatTempMetric, airIRRCUnitRunHoursFan2=airIRRCUnitRunHoursFan2, upsDiagPMHardwareRev=upsDiagPMHardwareRev, battManStringIndex=battManStringIndex, upsPhaseOutputTableIndex=upsPhaseOutputTableIndex, upsHighPrecInputMaxLineVoltage=upsHighPrecInputMaxLineVoltage, airFMSysCommLossShutdownDelay=airFMSysCommLossShutdownDelay, xATSGeneratorOutputVoltageLtoL=xATSGeneratorOutputVoltageLtoL, isxModularDistModuleInfoAlarmStatus=isxModularDistModuleInfoAlarmStatus, isxModularDistSubFeedInfoAlarmStatus=isxModularDistSubFeedInfoAlarmStatus, emsSensorConfigTable=emsSensorConfigTable, upsControl=upsControl, xPDUTransformerTempAlarm=xPDUTransformerTempAlarm, airIRRCGroupConfigCoolDerivativeD=airIRRCGroupConfigCoolDerivativeD, accessControl=accessControl, isxModularSubfeedHighCurrentThresholdViolation=isxModularSubfeedHighCurrentThresholdViolation, dcLVDImminentAlarmCleared=dcLVDImminentAlarmCleared, airIRG3RDUThresholdsTable=airIRG3RDUThresholdsTable, atsRedundancyRestored=atsRedundancyRestored, airIRG2IdentFirmwareRevision=airIRG2IdentFirmwareRevision, isxModularDistModuleOutputConnectorType=isxModularDistModuleOutputConnectorType, symmetra3PhaseUPS40kVA=symmetra3PhaseUPS40kVA, coolingUnitStatusDiscreteDescription=coolingUnitStatusDiscreteDescription, isxModularDistSubFeedLoadingPercent=isxModularDistSubFeedLoadingPercent, xATSGeneratorStatusModeSwitchPosition=xATSGeneratorStatusModeSwitchPosition, xATSGeneratorOverloadCleared=xATSGeneratorOverloadCleared, iemProbeConnected=iemProbeConnected, memInputNumberCalibrationPoints=memInputNumberCalibrationPoints, upsAdvConfigBypassToleranceSetting=upsAdvConfigBypassToleranceSetting, aruAlinkCommunicationEstablished=aruAlinkCommunicationEstablished, airFMModCooling=airFMModCooling, xATSOutputRelayTableSize=xATSOutputRelayTableSize, airFMSysAlarmMapExpMod2=airFMSysAlarmMapExpMod2, isxModularPduDeviceServiceType=isxModularPduDeviceServiceType, description=description, xPDUFuseBlownAlarm=xPDUFuseBlownAlarm, airIRRCUnitStatusOperateMode=airIRRCUnitStatusOperateMode, cpsSerialPortRemHost=cpsSerialPortRemHost, upsAdvStateSymmetraSpecificFaults=upsAdvStateSymmetraSpecificFaults, airIRSCUnitStatusRackInletTempMetric=airIRSCUnitStatusRackInletTempMetric, iemConfigProbeName=iemConfigProbeName, atsOutputMinLoad=atsOutputMinLoad, rARUFanStatusNominalFanSpeed=rARUFanStatusNominalFanSpeed, airIRRCUnitConfigIdleOnLeakDetect=airIRRCUnitConfigIdleOnLeakDetect, dcmim2ConfigLVD=dcmim2ConfigLVD, rPDU2DeviceStatusEnergy=rPDU2DeviceStatusEnergy, emsAlarmDeviceControlDeviceCommand=emsAlarmDeviceControlDeviceCommand, airIRmPmMinLimitReturnAirTemperatureC=airIRmPmMinLimitReturnAirTemperatureC, airIRG3CMServiceIntervalsDeviceIndex=airIRG3CMServiceIntervalsDeviceIndex, airFMSysCndsrFluidVlvAct=airFMSysCndsrFluidVlvAct, dm3StatusSystemStart=dm3StatusSystemStart, upsDiagSubSysFrameFirmwareRev=upsDiagSubSysFrameFirmwareRev, dischargeCleared=dischargeCleared, memInputsConfigInputNumber=memInputsConfigInputNumber, atsOutputBankState=atsOutputBankState, pduCircuitPanelInputOvervoltageCleared=pduCircuitPanelInputOvervoltageCleared, rPDUOutletOff=rPDUOutletOff, xPDUMainInputUnderVoltThreshold=xPDUMainInputUnderVoltThreshold, xATSOutputFrequencyAlarm=xATSOutputFrequencyAlarm, airIRRP100GroupSetpointsCoolUS=airIRRP100GroupSetpointsCoolUS, upsAdvInputApparentPower=upsAdvInputApparentPower, upsAdvOutputVoltage=upsAdvOutputVoltage, dm3ConfigConvFailAlarm=dm3ConfigConvFailAlarm, airIRmPmGECWvalveLinearRange=airIRmPmGECWvalveLinearRange, dm3ConfigRect2ofNAlarm=dm3ConfigRect2ofNAlarm, returnFromBypass=returnFromBypass, airIRmPmHumidifier1LinearRange=airIRmPmHumidifier1LinearRange, airIRG3RDUStatusPump1HeadPressureUS=airIRG3RDUStatusPump1HeadPressureUS, airIRRP500UnitConfigPowerSourceConfig=airIRRP500UnitConfigPowerSourceConfig, airIRmPmMyZoneCWEnergySaveMode=airIRmPmMyZoneCWEnergySaveMode, isxModularDistSubFeedInfoName=isxModularDistSubFeedInfoName, upsDiagSubSysInverterTable=upsDiagSubSysInverterTable, masterswitch=masterswitch, subfeedBreakerStatus=subfeedBreakerStatus, xATSGeneratorLowBatteryVoltDuringCrankAlarm=xATSGeneratorLowBatteryVoltDuringCrankAlarm, bmsCriticalCondition=bmsCriticalCondition, airFMModBlwr2ModuleIndex=airFMModBlwr2ModuleIndex, pduNoPanelFeedMode=pduNoPanelFeedMode, subfeedBreakerIndex=subfeedBreakerIndex, atsOutputVoltage=atsOutputVoltage, airIRmPmCmp1HysteresisSummerF=airIRmPmCmp1HysteresisSummerF, atsCalibrationInputPhaseTableIndex=atsCalibrationInputPhaseTableIndex, sPDUMasterControlVMName=sPDUMasterControlVMName, apcTestTrap=apcTestTrap, upsOutletGroupControlCommand=upsOutletGroupControlCommand, airIRmPmUnitMaintenanceInterval=airIRmPmUnitMaintenanceInterval, airIRmPmSensor3Failure=airIRmPmSensor3Failure, emsStatusCheckLogLight=emsStatusCheckLogLight, mcontrol=mcontrol, memOutletStatusOutletNumber=memOutletStatusOutletNumber, airIRG2RDT2Thresholds=airIRG2RDT2Thresholds, upsConfig=upsConfig, upsParallelOutputPercentLoad=upsParallelOutputPercentLoad, airIRG3GroupConfigCapacityControlType=airIRG3GroupConfigCapacityControlType, airFMModCoilDiffPresInWC=airFMModCoilDiffPresInWC, xATSGeneratorLowOilLevelAlarmCleared=xATSGeneratorLowOilLevelAlarmCleared, cpsSerialPortDBsize=cpsSerialPortDBsize, cpsCardIdentEntry=cpsCardIdentEntry, emsProbeStatusProbeMinHumidityThresh=emsProbeStatusProbeMinHumidityThresh, airIRAlarmConditionsTableSize=airIRAlarmConditionsTableSize, airIRmPmMinLimitSupplyAirTemperatureC=airIRmPmMinLimitSupplyAirTemperatureC, upsParallelOutputApparentPower=upsParallelOutputApparentPower, upsAdvConfigInformationalAlarmDelay=upsAdvConfigInformationalAlarmDelay, airIRmPmCmp1Runtime=airIRmPmCmp1Runtime, airIRG2RDT2StatusAirFlowUS=airIRG2RDT2StatusAirFlowUS, airIRSCUnitConfigOpControl=airIRSCUnitConfigOpControl, coolingUnitAboutValue=coolingUnitAboutValue, airIRRP100GroupStatusCoolOutput=airIRRP100GroupStatusCoolOutput, battManString2ResponseTestCurrentBenchmarkData=battManString2ResponseTestCurrentBenchmarkData, pduUtilityLineUndervoltageCleared=pduUtilityLineUndervoltageCleared, airIRmPmPump3LinearRangeF=airIRmPmPump3LinearRangeF, battManConfigMonitorWireLength=battManConfigMonitorWireLength, mfiletransferControlInitiateFileTransfer=mfiletransferControlInitiateFileTransfer, upsPhaseOutputPhaseTableIndex=upsPhaseOutputPhaseTableIndex, dcmim2StatusRectifier=dcmim2StatusRectifier, upsOutletGroupControlTable=upsOutletGroupControlTable, isxcVirtual=isxcVirtual, upsPowerFrameLayoutTableSize=upsPowerFrameLayoutTableSize, sPDUOutletConfigMSPgs=sPDUOutletConfigMSPgs, airIRG2RDT2RunHoursEvapFanTable=airIRG2RDT2RunHoursEvapFanTable, airIRG2RDT2StatusRackInletTempMetric=airIRG2RDT2StatusRackInletTempMetric, airIRRP500GroupConfigCoolResetRateI=airIRRP500GroupConfigCoolResetRateI, coolingUnitConfigurationDiscrete=coolingUnitConfigurationDiscrete, smwCriticalCondition=smwCriticalCondition, isxModDistribution=isxModDistribution, sPDUMasterControlMSPCommand=sPDUMasterControlMSPCommand, airFMModServIntBlwr1=airFMModServIntBlwr1, airIRSCUnitIdent=airIRSCUnitIdent, rPDU2SensorTempHumidityConfigEntry=rPDU2SensorTempHumidityConfigEntry, upsHighPrecBatteryFrameCurrent=upsHighPrecBatteryFrameCurrent, memOutputStatusEntry=memOutputStatusEntry, upsDiagSubSysChargerTableSize=upsDiagSubSysChargerTableSize, emsInputContactConfigInputContactIndex=emsInputContactConfigInputContactIndex, airIRSCUnitStatusSuctionTempUS=airIRSCUnitStatusSuctionTempUS, cpsEthIPmask2=cpsEthIPmask2, airIRRP100UnitConfigStartupDelay=airIRRP100UnitConfigStartupDelay, dm3StatusFusesTable=dm3StatusFusesTable, upsEepromFaultCleared=upsEepromFaultCleared, upsDiagSubSysExternalPowerFrameBoardTable=upsDiagSubSysExternalPowerFrameBoardTable, xATSGeneratorFuelSystemVeryLowFuelLevelThreshold=xATSGeneratorFuelSystemVeryLowFuelLevelThreshold, airIRmIdentModelNumber=airIRmIdentModelNumber, dm3ConfigConv2ofNAlarm=dm3ConfigConv2ofNAlarm, airIRG2RDT2RunHoursFanPSIndex=airIRG2RDT2RunHoursFanPSIndex, upsSCGACOutputStatus=upsSCGACOutputStatus, sPDUOutletConfigMSPmupsP1HiTemp=sPDUOutletConfigMSPmupsP1HiTemp, airIRmPmMaxLimitReturnAirTemperatureC=airIRmPmMaxLimitReturnAirTemperatureC, airIRmPmPump4=airIRmPmPump4, airWarningConditionCleared=airWarningConditionCleared, cpsSerialGroupUsers=cpsSerialGroupUsers, isxModularPduIdentDateOfManufacture=isxModularPduIdentDateOfManufacture, battManString2ResponseTestCurrentTable=battManString2ResponseTestCurrentTable, isxModularDistModuleOutputTotalPower=isxModularDistModuleOutputTotalPower, airFMIdentTableSize=airFMIdentTableSize, sPDUOutletConfigMSPmupsZone1=sPDUOutletConfigMSPmupsZone1, airIRRP100UnitServiceIntervalAirFilter=airIRRP100UnitServiceIntervalAirFilter, xATSSource2TableSize=xATSSource2TableSize, airFMIdentModuleSerialNumber=airFMIdentModuleSerialNumber, rPDUOutlet=rPDUOutlet, airIRRP500UnitStatusOperateMode=airIRRP500UnitStatusOperateMode, battManStringHighRippleCurrent=battManStringHighRippleCurrent, isxModularDistModuleOutputThresholdMax=isxModularDistModuleOutputThresholdMax, sPDUMasterControlMSPTable=sPDUMasterControlMSPTable, emConfigContactEnable=emConfigContactEnable, sPDUMasterControlMSPIndex=sPDUMasterControlMSPIndex, coolingUnitConfigurationAnalogTableSize=coolingUnitConfigurationAnalogTableSize, upsAdvControlSimulatePowerFail=upsAdvControlSimulatePowerFail, xPDUOutputRelays=xPDUOutputRelays, rPDUOutletStatus=rPDUOutletStatus, dcmim2StatusBattFunctTestResult=dcmim2StatusBattFunctTestResult, dcmim2StatusLVDTableSize=dcmim2StatusLVDTableSize, sPDUMasterStatusMSPName=sPDUMasterStatusMSPName, airPA=airPA, airFMAlarmTime=airFMAlarmTime, airIRmPmFireSmokeDetector=airIRmPmFireSmokeDetector, dcmim2StatusLVDIndex=dcmim2StatusLVDIndex, atsStatusMinus12VPowerSupply=atsStatusMinus12VPowerSupply, airFMSysAlarmMapMainModHighSupplyTemp=airFMSysAlarmMapMainModHighSupplyTemp, dm3StatusConvDesc=dm3StatusConvDesc, airIRG3IdentGroupSysOID=airIRG3IdentGroupSysOID, airIRmPmDrycooler3WinterStartTempC=airIRmPmDrycooler3WinterStartTempC, airIRRP500UnitStatusCoolDemand=airIRRP500UnitStatusCoolDemand, accessPXConfig=accessPXConfig, airFMSysCoilFluidTempF=airFMSysCoilFluidTempF, airFMSysMinRemoteTempF=airFMSysMinRemoteTempF, battManString2BatteryDryout=battManString2BatteryDryout, upsParallelInputMaximumCurrent=upsParallelInputMaximumCurrent, trapIndex=trapIndex, airIRRP100UnitConfigOutputSource=airIRRP100UnitConfigOutputSource, upsAdvTestCalibrationDate=upsAdvTestCalibrationDate, symmetraUPS4kVA=symmetraUPS4kVA, dcHumidityAlarm=dcHumidityAlarm, airIRG3GroupSetpointsFanSpeedPreference=airIRG3GroupSetpointsFanSpeedPreference, dm3StatusBreakersTableSize=dm3StatusBreakersTableSize, dm3ConfigLVDTripThresh=dm3ConfigLVDTripThresh, masterSwitch=masterSwitch, xPDUOutputVoltageHighAlarmCleared=xPDUOutputVoltageHighAlarmCleared, airIRmPmPump3PressureSetpoint=airIRmPmPump3PressureSetpoint, coolingUnitExtendedStringEntry=coolingUnitExtendedStringEntry, emsStatusOutputRelayCount=emsStatusOutputRelayCount, airIRmPmFan1Runtime=airIRmPmFan1Runtime, upsDiagPMManufactureDate=upsDiagPMManufactureDate, galaxy5500UPS20KVA=galaxy5500UPS20KVA, xATSGeneratorServiceNextServiceDate=xATSGeneratorServiceNextServiceDate, xPDUSystemOutputTotalApparentPower=xPDUSystemOutputTotalApparentPower, upsAdvConfigGreenMode=upsAdvConfigGreenMode, airIRG2RDType2=airIRG2RDType2, airIRG3RDURunHoursPowerSupply1=airIRG3RDURunHoursPowerSupply1, sPDUOutletConfigMSPallOutletIndex=sPDUOutletConfigMSPallOutletIndex, airIRmPmMaxLimitSupplyAirTemperatureF=airIRmPmMaxLimitSupplyAirTemperatureF, memModulesConfigModuleName=memModulesConfigModuleName, airIRRP100UnitStatusCompressorDriveControlCardTempMetric=airIRRP100UnitStatusCompressorDriveControlCardTempMetric, battManConfigNumberofStrings=battManConfigNumberofStrings)
mibBuilder.exportSymbols("PowerNet-MIB", xATSSwitchSettingsSetToFactoryDefaults=xATSSwitchSettingsSetToFactoryDefaults, sPDUOutletConfigMSPmupsTable=sPDUOutletConfigMSPmupsTable, airIRmPmAuxiliaryAlarm7=airIRmPmAuxiliaryAlarm7, mtrapargsTimeTicks02=mtrapargsTimeTicks02, airIRmPmDrycooler4SummerStartTemp=airIRmPmDrycooler4SummerStartTemp, xATSGeneratorVeryLowOilPressure=xATSGeneratorVeryLowOilPressure, airIRmPmPump3Speed=airIRmPmPump3Speed, airIRRP100=airIRRP100, airIRG3RDUStatusPumpOutletTempUS=airIRG3RDUStatusPumpOutletTempUS, cpsResolverOrder=cpsResolverOrder, xATSGeneratorServiceResetRecord=xATSGeneratorServiceResetRecord, upsSyncCtrlGroup=upsSyncCtrlGroup, cpsAP930xConf=cpsAP930xConf, upsHasNoValidFirmware=upsHasNoValidFirmware, xPDUSystemOutputTotalPowerFactor=xPDUSystemOutputTotalPowerFactor, airIRRP100UnitStatusCoolDemand=airIRRP100UnitStatusCoolDemand, xPDUBypassVoltageLowAlarmCleared=xPDUBypassVoltageLowAlarmCleared, eps7000UPSWithSSC=eps7000UPSWithSSC, airIRmPmNumberOfHotGasReheat=airIRmPmNumberOfHotGasReheat, matrixUPS=matrixUPS, airIRG2GroupStatusCoolOutput=airIRG2GroupStatusCoolOutput, atsCalibrationPowerSupply=atsCalibrationPowerSupply, airFMSysAlarmMapExpMod1Table=airFMSysAlarmMapExpMod1Table, memInputsStatusEntry=memInputsStatusEntry, rPDULoadDevice=rPDULoadDevice, batteryOverTemperatureCleared=batteryOverTemperatureCleared, galaxy300UPS10kVA33=galaxy300UPS10kVA33, airFMGroupCfgShutdownSmoke=airFMGroupCfgShutdownSmoke, emsSensorStatus=emsSensorStatus, atsNumOutputPhases=atsNumOutputPhases, experimental=experimental, airIRG3RDUStatusCondenserOutletTempUS=airIRG3RDUStatusCondenserOutletTempUS, airFMGroupFailoverModHumFail=airFMGroupFailoverModHumFail, xPDUBranchBreakerLocation=xPDUBranchBreakerLocation, airFMSysPrimaryControlSensor=airFMSysPrimaryControlSensor, atsOutputBankMaxLoad=atsOutputBankMaxLoad, airIRmPmPump4LinearRangeF=airIRmPmPump4LinearRangeF, atsInputMinPower=atsInputMinPower, xATSGeneratorHighACVEvent=xATSGeneratorHighACVEvent, airIRRP500UnitConfigSecondaryPowerFeedCapability=airIRRP500UnitConfigSecondaryPowerFeedCapability, hardwareFailureBypass=hardwareFailureBypass, upsHighPrecInputFrequency=upsHighPrecInputFrequency, rPDU2OutletSwitchedConfigRebootDuration=rPDU2OutletSwitchedConfigRebootDuration, airFMSysOutputNormalState=airFMSysOutputNormalState, battManString1ResponseTestCurrentBenchmarkTable=battManString1ResponseTestCurrentBenchmarkTable, airIRRP500UnitIdentName=airIRRP500UnitIdentName, xPDUBypassInput=xPDUBypassInput, xPDUInputContactTable=xPDUInputContactTable, rARUFanStatusSelectedFanLevel=rARUFanStatusSelectedFanLevel, airIRSCGroupStatusMinReturnAirTempUS=airIRSCGroupStatusMinReturnAirTempUS, memOutletName=memOutletName, upsDiagBatteryType=upsDiagBatteryType, airFMSysSteamHotGasReheatDmd=airFMSysSteamHotGasReheatDmd, battManConfigMinAmbientTempF=battManConfigMinAmbientTempF, airFMModFilterDiffPresPa=airFMModFilterDiffPresPa, airFMModServIntervals=airFMModServIntervals, xATSSystemOutputTableSize=xATSSystemOutputTableSize, airFMModReturnTempC=airFMModReturnTempC, atsOutputBankPercentPower=atsOutputBankPercentPower, airFMSysAvgRemoteTempC=airFMSysAvgRemoteTempC, apcEnvMinTempThresholdViolationCleared=apcEnvMinTempThresholdViolationCleared, battManStringCalibTable=battManStringCalibTable, emConfigProbeLowTempThreshold=emConfigProbeLowTempThreshold, atsLineVoltageCalibrationFactor=atsLineVoltageCalibrationFactor, upsAdvInputPeakCurrent=upsAdvInputPeakCurrent, dcmim2StatusSysLoadCurrent=dcmim2StatusSysLoadCurrent, xATSGeneratorVeryLowFuelLevelAlarmCleared=xATSGeneratorVeryLowFuelLevelAlarmCleared, upsDiagSubSysPowerFactorCorrectionSerialNum=upsDiagSubSysPowerFactorCorrectionSerialNum, memSensorsTempLongIncRateThreshValue=memSensorsTempLongIncRateThreshValue, accessPXStatusRearDoor=accessPXStatusRearDoor, airFMEventCode=airFMEventCode, aruExhaustTemperatureAlarmCleared=aruExhaustTemperatureAlarmCleared, isxcErrorAlarmCleared=isxcErrorAlarmCleared, atsConfigLineVRMS=atsConfigLineVRMS, upsParallelOutputCurrent=upsParallelOutputCurrent, rPDUIdentFirmwareRev=rPDUIdentFirmwareRev, iemStatusProbeMaxHumidViolation=iemStatusProbeMaxHumidViolation, xATSIdent=xATSIdent, iemStatusContactsTable=iemStatusContactsTable, upsPhaseOutputPowerFactor=upsPhaseOutputPowerFactor, airIRG3RDUStatusPump1Speed=airIRG3RDUStatusPump1Speed, apcAnalogInputMaxThresholdViolation=apcAnalogInputMaxThresholdViolation, dm3ConfigDistribution=dm3ConfigDistribution, currentStatus=currentStatus, airIRG3CMStatusExpansionValvePosition=airIRG3CMStatusExpansionValvePosition, atsConfigBankNearOverLoadThreshold=atsConfigBankNearOverLoadThreshold, dm3StatusSysConvAvailable=dm3StatusSysConvAvailable, emStatus=emStatus, AirIRmAlarmState=AirIRmAlarmState, dm3ConfigSysHighTempThresh=dm3ConfigSysHighTempThresh, airIRG3Ident=airIRG3Ident, upsAdvConfigAlarmTimer=upsAdvConfigAlarmTimer, airIRSCUnitStatusInputState=airIRSCUnitStatusInputState, airIRmPmEheating1ManOpRunning=airIRmPmEheating1ManOpRunning, xPDUOutputCurrentHighAlarm=xPDUOutputCurrentHighAlarm, upsAdvConfigLCDLockOut=upsAdvConfigLCDLockOut, airIRG2IdentLocation=airIRG2IdentLocation, airIRmPmWinterModeHysteresis=airIRmPmWinterModeHysteresis, rPDU2DeviceConfigLowLoadPowerThreshold=rPDU2DeviceConfigLowLoadPowerThreshold, airFMSysAlarmMapSys=airFMSysAlarmMapSys, upsAdvConfigDipSwitchTable=upsAdvConfigDipSwitchTable, emConfigProbeMinTempThreshold=emConfigProbeMinTempThreshold, airIRSCUnitThresholdsRackInletHighTempUS=airIRSCUnitThresholdsRackInletHighTempUS, galaxyVMUPS160kVA=galaxyVMUPS160kVA, xATSGeneratorOutputPhaseTable=xATSGeneratorOutputPhaseTable, mfiletransferStatus=mfiletransferStatus, emConfigContactsNumContacts=emConfigContactsNumContacts, memInputsStatusTable=memInputsStatusTable, airIRRP500UnitStatusAirFlowMetric=airIRRP500UnitStatusAirFlowMetric, isxModularTransformerOverheating=isxModularTransformerOverheating, sPDUMasterStatusVMName=sPDUMasterStatusVMName, dcmim2StatusBattFloatVolt=dcmim2StatusBattFloatVolt, xATSSource2Index=xATSSource2Index, coolingUnitExtendedStringTable=coolingUnitExtendedStringTable, isxModularDistSubFeedInfoAlarmMinEnable=isxModularDistSubFeedInfoAlarmMinEnable, rPDU2Phase=rPDU2Phase, rPDU2PhaseConfigNumber=rPDU2PhaseConfigNumber, dm3ConfigBattFloatVolt=dm3ConfigBattFloatVolt, airIRmPmDrycooler3Runtime=airIRmPmDrycooler3Runtime, memSensorsHumidityHighThresh=memSensorsHumidityHighThresh, atsInputPhaseIndex=atsInputPhaseIndex, memInputAnalogMaxThresh=memInputAnalogMaxThresh, xATSGeneratorFuelSystemEstimatedRunTime=xATSGeneratorFuelSystemEstimatedRunTime, airIRmPmSupplyAirTemperatureTooHigh=airIRmPmSupplyAirTemperatureTooHigh, mtrapargsString06=mtrapargsString06, memInputLocation=memInputLocation, xATSTestFailed=xATSTestFailed, airIRRP100UnitStatusFilterDPMetric=airIRRP100UnitStatusFilterDPMetric, cpsSerialPortSockIdle=cpsSerialPortSockIdle, coolingUnitConfigurationStringTable=coolingUnitConfigurationStringTable, smartRelayFaultCleared=smartRelayFaultCleared, sPDUOutletCtlName=sPDUOutletCtlName, battManIdentHardwareRev=battManIdentHardwareRev, airIRRP500GroupStatus=airIRRP500GroupStatus, airIRmPmBusAddress=airIRmPmBusAddress, xATSSwitch=xATSSwitch, dm3ConfigConverter=dm3ConfigConverter, sPDUOutletControlVMIndex=sPDUOutletControlVMIndex, rPDU2SensorDiscreteConfigEntry=rPDU2SensorDiscreteConfigEntry, aruFanFail=aruFanFail, symmetraPx500kVA=symmetraPx500kVA, cpsCardStatusTable=cpsCardStatusTable, cpsSerialPortDCDCtrl=cpsSerialPortDCDCtrl, airIRRCGroupConfigMaxFanSpeed=airIRRCGroupConfigMaxFanSpeed, atsOutputBankPercentLoad=atsOutputBankPercentLoad, xATSGeneratorSettingsVoltageAdjust=xATSGeneratorSettingsVoltageAdjust, uioSensorStatusEntry=uioSensorStatusEntry, iemConfigRelayNormalState=iemConfigRelayNormalState, upsPhaseOutputMaxPower=upsPhaseOutputMaxPower, xPDUBypassVoltageHighAlarmCleared=xPDUBypassVoltageHighAlarmCleared, isxModularDistSysPowerKwhPhaseUsage=isxModularDistSysPowerKwhPhaseUsage, rPDU2BankPropertiesEntry=rPDU2BankPropertiesEntry, measureUps=measureUps, envMgtSystem=envMgtSystem, apcOutputRelayStateAbnormal=apcOutputRelayStateAbnormal, airFMModServIntBlwrCtrl2Reset=airFMModServIntBlwrCtrl2Reset, cpsSerialSsh=cpsSerialSsh, airFMGroupSysStatus=airFMGroupSysStatus, airIRmPmDrycooler1WinterStartTempF=airIRmPmDrycooler1WinterStartTempF, airIRRP500UnitIdentLocation=airIRRP500UnitIdentLocation, airFMSysAlarmMapSysEconIsol=airFMSysAlarmMapSysEconIsol, xPDUSystemBreakerTable=xPDUSystemBreakerTable, cpsSerialPortAutoOutput=cpsSerialPortAutoOutput, emsOutletControlEntry=emsOutletControlEntry, airFMSysCoilFluidActivDeadbandC=airFMSysCoilFluidActivDeadbandC, atsIdentSerialNumber=atsIdentSerialNumber, airIRmPmMyZone=airIRmPmMyZone, xATSDoorOpenAlarm=xATSDoorOpenAlarm, dm3StatusSysTempSanity=dm3StatusSysTempSanity, rARUFanStatusFanRunhourCounter=rARUFanStatusFanRunhourCounter, coolingUnitExtended=coolingUnitExtended, smartUPS2200=smartUPS2200, airIRmPmCmp2ManOperationState=airIRmPmCmp2ManOperationState, uioSensorStatusViolationStatus=uioSensorStatusViolationStatus, airIRSCUnitRunHoursFanPowerSupplyLeft=airIRSCUnitRunHoursFanPowerSupplyLeft, emsProbeStatusProbeLowHumidityThresh=emsProbeStatusProbeLowHumidityThresh, airFMModRHHeater=airFMModRHHeater, airIRmPmPump2ManOpEnable=airIRmPmPump2ManOpEnable, battManString2ResponseTestChangeTable=battManString2ResponseTestChangeTable, galaxy5000UPS130KVA=galaxy5000UPS130KVA, airIRG3GroupStatusAvgReturnTempUS=airIRG3GroupStatusAvgReturnTempUS, airIRRCGroupSetpointsSupplyAirUS=airIRRCGroupSetpointsSupplyAirUS, rPDU2GroupEnergyReset=rPDU2GroupEnergyReset, accessPXStatusRearDoorMaxOpenTime=accessPXStatusRearDoorMaxOpenTime, emsInputContactConfig=emsInputContactConfig, sPDUOutletConfigMSPmupsIndex=sPDUOutletConfigMSPmupsIndex, rPDUOutletControlOutletPhase=rPDUOutletControlOutletPhase, airIRRP500GroupConfigActiveFlowControllerLampTest=airIRRP500GroupConfigActiveFlowControllerLampTest, upsParallelInputPhaseTable=upsParallelInputPhaseTable, apcBeaconDisconnected=apcBeaconDisconnected, integrated=integrated, airIRRP500UnitServiceIntervalFansAlarm=airIRRP500UnitServiceIntervalFansAlarm, emsSensorControlSensorIndex=emsSensorControlSensorIndex, rPDU2DeviceConfigColdstartDelay=rPDU2DeviceConfigColdstartDelay, galaxyVMUPS200kVA=galaxyVMUPS200kVA, airFMModBlwr2Current=airFMModBlwr2Current, upsPhaseInputPhaseTable=upsPhaseInputPhaseTable, dm3ConfigBattLowVoltThresh=dm3ConfigBattLowVoltThresh, airIRmPmPump1PressureSetpoint=airIRmPmPump1PressureSetpoint, matrixUPS5000=matrixUPS5000, airIRmPmDrycooler3HysteresisF=airIRmPmDrycooler3HysteresisF, airIRmPmEheating3ManOpRunning=airIRmPmEheating3ManOpRunning, apcOutletStateNormal=apcOutletStateNormal, galaxy300UPS30kVA33=galaxy300UPS30kVA33, upsHighPrecBatteryPackTableSize=upsHighPrecBatteryPackTableSize, xATSOutputRelayNumber=xATSOutputRelayNumber, uioOutputRelay=uioOutputRelay, upsDiagSubSysSystemPowerSupplyTable=upsDiagSubSysSystemPowerSupplyTable, airIRmPmPWWHeatingHysteresis=airIRmPmPWWHeatingHysteresis, upsAdvConfigNumExternalBatteries=upsAdvConfigNumExternalBatteries, upsParallelTotalOutputApparentPower=upsParallelTotalOutputApparentPower, products=products, battManConfigSuspendCellVoltage=battManConfigSuspendCellVoltage, dm3ConfigSysDescriptionText=dm3ConfigSysDescriptionText, airIRmPmSensor9Defect=airIRmPmSensor9Defect, airFMModBlwr2AccTime=airFMModBlwr2AccTime, airIRG3AlarmsEntry=airIRG3AlarmsEntry, xPDUMainInput=xPDUMainInput, airIRG2GroupSetptsCoolSetpointMetric=airIRG2GroupSetptsCoolSetpointMetric, airIRRP500UnitStatusRackInletTemperature2US=airIRRP500UnitStatusRackInletTemperature2US, isxcCriticalAlarm=isxcCriticalAlarm, airIRmPmSeqStop=airIRmPmSeqStop, pduInputTransformerOverTemperatureCleared=pduInputTransformerOverTemperatureCleared, dm3ConfigBattDischargeThresh=dm3ConfigBattDischargeThresh, airIRG2RDT2ServiceIntervalsAirFilterAlarm=airIRG2RDT2ServiceIntervalsAirFilterAlarm, rARUFanStatusAruIndex=rARUFanStatusAruIndex, airIRmPmRuntimeDehumidification=airIRmPmRuntimeDehumidification, airFMSysAlarmMapMainModAnyAlarm=airFMSysAlarmMapMainModAnyAlarm, rPDU2SensorTempHumidityConfigTempHighThreshF=rPDU2SensorTempHumidityConfigTempHighThreshF, atsConfigBankTableSize=atsConfigBankTableSize, sPDUMasterControlMSPEntry=sPDUMasterControlMSPEntry, airIRSCUnitRunHoursCondenserFan3=airIRSCUnitRunHoursCondenserFan3, sPDUMasterStatusVMOutletCount=sPDUMasterStatusVMOutletCount, airIRRP500GroupStatusAirFlowUS=airIRRP500GroupStatusAirFlowUS, iemStatusProbeName=iemStatusProbeName, airIRG2RDT2RunHoursFanPSPosition=airIRG2RDT2RunHoursFanPSPosition, cpsSerialPortPppFoption=cpsSerialPortPppFoption, airFMModSuctPresPSI=airFMModSuctPresPSI, universalInputOutput=universalInputOutput, xATSSwitchTimersStatus=xATSSwitchTimersStatus, airIRRP500UnitStatusCoolOutput=airIRRP500UnitStatusCoolOutput, memOutputConfigEntry=memOutputConfigEntry, upsDiagIMFirmwareRev=upsDiagIMFirmwareRev, sPDUMasterControlVMIndex=sPDUMasterControlVMIndex, airIRmPmDrycooler1ManOpRunning=airIRmPmDrycooler1ManOpRunning, xATSSwitchBlockMapName=xATSSwitchBlockMapName, atsOutputPhase=atsOutputPhase, airIRRP100GroupStatusMinRackInletTempUS=airIRRP100GroupStatusMinRackInletTempUS, mtrapargsInteger04=mtrapargsInteger04, dm3StatusConvIndex=dm3StatusConvIndex, airIRmPmSensor16Failure=airIRmPmSensor16Failure, xPDUOutputVoltageHighAlarm=xPDUOutputVoltageHighAlarm, dm3ConfigInputRelays=dm3ConfigInputRelays, cooling=cooling)
mibBuilder.exportSymbols("PowerNet-MIB", isxModularDistModuleOutputTable=isxModularDistModuleOutputTable, battManUnitCalibTableSize=battManUnitCalibTableSize, dm3ConfigBattLowTempThresh=dm3ConfigBattLowTempThresh, rPDUIdentDeviceLinetoNeutralVoltage=rPDUIdentDeviceLinetoNeutralVoltage, xATSSwitchStatisticsName=xATSSwitchStatisticsName, upsAdvConfigSensitivity=upsAdvConfigSensitivity, airIRmPmPhaseFailure=airIRmPmPhaseFailure, airFMSysAlarmMapExpMod2BlwrCntl2Fail=airFMSysAlarmMapExpMod2BlwrCntl2Fail, airFMIdentModuleIndex=airFMIdentModuleIndex, upsOutletGroupConfigLoadShedControlAutoRestart=upsOutletGroupConfigLoadShedControlAutoRestart, xPDUBranchBreakerTableIndex=xPDUBranchBreakerTableIndex, upsPhaseResetValues=upsPhaseResetValues, airFMSysDehumEssFunction=airFMSysDehumEssFunction, upsDiagSubSysXRCommunicationCardEntry=upsDiagSubSysXRCommunicationCardEntry, cpsCardConfFunc=cpsCardConfFunc, mconfigClock=mconfigClock, memSensorsStatusSysTempUnits=memSensorsStatusSysTempUnits, airIRmPmGECWvalveGEOffTempC=airIRmPmGECWvalveGEOffTempC, cpsSerialPortModemChat=cpsSerialPortModemChat, apcDoorLocked=apcDoorLocked, emsOutputRelayStatusOutputRelayNormalState=emsOutputRelayStatusOutputRelayNormalState, airFMModCoilDiffPresPa=airFMModCoilDiffPresPa, dm3ConfigOutRlyEntry=dm3ConfigOutRlyEntry, battManString1ResponseTestCurrentBenchmarkIndex=battManString1ResponseTestCurrentBenchmarkIndex, airIRmPmGECWvalveStartTemperatureF=airIRmPmGECWvalveStartTemperatureF, upsDiagSwitchGear=upsDiagSwitchGear, airIRmPmUnitEvaporationTemperature2C=airIRmPmUnitEvaporationTemperature2C, battManString1BatteryLowestVoltage=battManString1BatteryLowestVoltage, xATSGeneratorGenericEventCleared=xATSGeneratorGenericEventCleared, airIRmPmDehumidificMaxWaterTempC=airIRmPmDehumidificMaxWaterTempC, battManSystemAmbientTempC=battManSystemAmbientTempC, userModified=userModified, rPDUOutletConfigEntry=rPDUOutletConfigEntry, airFMSysDXDehumDmd=airFMSysDXDehumDmd, galaxy9000UPS=galaxy9000UPS, airFMIdentName=airFMIdentName, airIRRP500UnitStatusActivePowerSource=airIRRP500UnitStatusActivePowerSource, airIRRP500UnitServiceIntervalCondensatePump=airIRRP500UnitServiceIntervalCondensatePump, upsBasicIdentName=upsBasicIdentName, airFMSysAlarmMapSysAnyAlarm=airFMSysAlarmMapSysAnyAlarm, airFMSysAlarmMapInput14=airFMSysAlarmMapInput14, mfiletransferConfigFTPServerAddress=mfiletransferConfigFTPServerAddress, airIRmPmGvalveManOpOpeningGrade=airIRmPmGvalveManOpOpeningGrade, airIRRCUnitIdentManufactureDate=airIRRCUnitIdentManufactureDate, battManStringVoltage=battManStringVoltage, atsOverload=atsOverload, dm3ConfigSysLowTempThresh=dm3ConfigSysLowTempThresh, atsOutputBankMinPercentPower=atsOutputBankMinPercentPower, battManStringEntry=battManStringEntry, rPDU2OutletMeteredConfigNearOverloadCurrentThreshold=rPDU2OutletMeteredConfigNearOverloadCurrentThreshold, sPDUMasterState=sPDUMasterState, xATSTestingSimulatePowerFail=xATSTestingSimulatePowerFail, dcmim2StatusAlarmsIndex=dcmim2StatusAlarmsIndex, coolingUnitAboutDescription=coolingUnitAboutDescription, rARUFanStatusEntry=rARUFanStatusEntry, dm3StatusRectIndex=dm3StatusRectIndex, dcmim2StatusBattTestCapacity=dcmim2StatusBattTestCapacity, emsSensorStatusEntry=emsSensorStatusEntry, xPDUInputContacts=xPDUInputContacts, mfiletransfer=mfiletransfer, rPDUBankPhaseNearOverload=rPDUBankPhaseNearOverload, airFMModServIntResetEntry=airFMModServIntResetEntry, dm3ConfigBreakersAlarm=dm3ConfigBreakersAlarm, cpsSerialPortName=cpsSerialPortName, airIRmPmPump2PressureSetpoint=airIRmPmPump2PressureSetpoint, airIRmPmPump1StartTemperatureK=airIRmPmPump1StartTemperatureK, xPDUBranchCurrentHighAlarm=xPDUBranchCurrentHighAlarm, airFMSysAlarmMapOutput16=airFMSysAlarmMapOutput16, rPDU2BankConfigOverloadCurrentThreshold=rPDU2BankConfigOverloadCurrentThreshold, atsRMSOverVoltageCleared=atsRMSOverVoltageCleared, rPDU2DeviceControlName=rPDU2DeviceControlName, airIRmPmMyZoneRoomHumidity=airIRmPmMyZoneRoomHumidity, sPDUIdentFirmwareRevVM=sPDUIdentFirmwareRevVM, upsPhaseOutputPhaseIndex=upsPhaseOutputPhaseIndex, rPDU2BankConfigNumber=rPDU2BankConfigNumber, emsProbeStatusProbeAlarmStatus=emsProbeStatusProbeAlarmStatus, xATSTestCanceled=xATSTestCanceled, xATSIdentFirmwareAppOSRev=xATSIdentFirmwareAppOSRev, aruDeviceConfigChange=aruDeviceConfigChange, mUpsContactTable=mUpsContactTable, airFMSysAlarmMapExpMod2TableSize=airFMSysAlarmMapExpMod2TableSize, airIRRP100UnitStatusSupplyAirTempUS=airIRRP100UnitStatusSupplyAirTempUS, airIRG2Ident=airIRG2Ident, dcmim2Status=dcmim2Status, upsPhaseInputPhaseIndex=upsPhaseInputPhaseIndex, airIRG2GroupSetptsCoolDeadbandMetric=airIRG2GroupSetptsCoolDeadbandMetric, setPulseOnTXD=setPulseOnTXD, airFMModWaterDetector=airFMModWaterDetector, rpduWarningCondition=rpduWarningCondition, rPDUOutletNearOverloadCleared=rPDUOutletNearOverloadCleared, memInputAnalogCalibrationPoint1=memInputAnalogCalibrationPoint1, airIRmPmDrycooler3ManOpEnable=airIRmPmDrycooler3ManOpEnable, airIRmPmPump2ControlCycle=airIRmPmPump2ControlCycle, atsStatusFrontPanel=atsStatusFrontPanel, rPDULoadStatusPhaseNumber=rPDULoadStatusPhaseNumber, atsCalibrationOutputEntry=atsCalibrationOutputEntry, airIRRP500GroupSetpointsDehumidifyDeadband=airIRRP500GroupSetpointsDehumidifyDeadband, cpsAP930xSys=cpsAP930xSys, upsEPOActiveCleared=upsEPOActiveCleared, upsAdvOutputStatisticsTable=upsAdvOutputStatisticsTable, apcEnvMaxHumidityThresholdViolation=apcEnvMaxHumidityThresholdViolation, sPDUIdentDateOfManufacture=sPDUIdentDateOfManufacture, xATSSystemOutputApparentPower=xATSSystemOutputApparentPower, vaRating=vaRating, airIRRP100UnitConfigReheatEnable=airIRRP100UnitConfigReheatEnable, isxModularDistModules=isxModularDistModules, airIRmPmPump3ControlCycle=airIRmPmPump3ControlCycle, airIRmPmPump4Hysteresis=airIRmPmPump4Hysteresis, apcLocalDisplayConfigAlarmBeeper=apcLocalDisplayConfigAlarmBeeper, emsProbeConfigProbeSTIncTempVariance=emsProbeConfigProbeSTIncTempVariance, mconfigTFTPServerIP=mconfigTFTPServerIP, airIRmPmPump3StartTemperatureF=airIRmPmPump3StartTemperatureF, upsBasicOutputACwiringConfiguration=upsBasicOutputACwiringConfiguration, rARUSensorsStatusTableSize=rARUSensorsStatusTableSize, upsBasicOutputStatus=upsBasicOutputStatus, airIRmPmUnitHumidity=airIRmPmUnitHumidity, airFMAlarmDate=airFMAlarmDate, airIRRCGroupStatusCoolDemand=airIRRCGroupStatusCoolDemand, xATSTestingSchedule=xATSTestingSchedule, xPDUInternalCommErrorCleared=xPDUInternalCommErrorCleared, xATSGeneratorFuelTankRuptureAlarmCleared=xATSGeneratorFuelTankRuptureAlarmCleared, dm3ConfigBattHighTempAlarm=dm3ConfigBattHighTempAlarm, upsSCGMembershipGroupNumber=upsSCGMembershipGroupNumber, upsAdvTestDiagnosticsResults=upsAdvTestDiagnosticsResults, battManConfigMinAmbientTempC=battManConfigMinAmbientTempC, sPDUOutletConfigMSPgsPowerOnDelay=sPDUOutletConfigMSPgsPowerOnDelay, sPDUIdentDateOfManufactureMSP=sPDUIdentDateOfManufactureMSP, cpsSerialPortDTRdelay=cpsSerialPortDTRdelay, airIRmPmMyZoneNumber=airIRmPmMyZoneNumber, upsCriticalCondition=upsCriticalCondition, dm3StatusLVDEntry=dm3StatusLVDEntry, airIRG3CMRunHoursFan1=airIRG3CMRunHoursFan1, emsStatusEMSName=emsStatusEMSName, rPDUOutletConfigIndex=rPDUOutletConfigIndex, upsHighPrecBatteryCartridgeIndex=upsHighPrecBatteryCartridgeIndex, airFMSysHumidify=airFMSysHumidify, emStatusProbeMaxTempViolation=emStatusProbeMaxTempViolation, communicationLost=communicationLost, upsParallelOutputLoad=upsParallelOutputLoad, coolingUnitStatusDiscreteValueAsInteger=coolingUnitStatusDiscreteValueAsInteger, airIRRP500GroupSetpointsFanSpeedPreference=airIRRP500GroupSetpointsFanSpeedPreference, emsProbeConfigEntry=emsProbeConfigEntry, xATSGeneratorServiceDueAlarm=xATSGeneratorServiceDueAlarm, battManInputContactNormalState=battManInputContactNormalState, atsIdentModelNumber=atsIdentModelNumber, iemStatusContactsNumContacts=iemStatusContactsNumContacts, isxModularTotalOutputCurrentHighThresholdViolation=isxModularTotalOutputCurrentHighThresholdViolation, emConfigProbesNumProbes=emConfigProbesNumProbes, airIRG2RDType1=airIRG2RDType1, mspDeviceConfigChange=mspDeviceConfigChange, rPDULoadPhaseConfigLowLoadThreshold=rPDULoadPhaseConfigLowLoadThreshold, airFMSysAlarmMapOutputEntry=airFMSysAlarmMapOutputEntry, rPDU2OutletSwitchedPropertiesNumber=rPDU2OutletSwitchedPropertiesNumber, emsStatus=emsStatus, emsProbeConfigProbeMaxTempThresh=emsProbeConfigProbeMaxTempThresh, airIRmAlarmsDescription=airIRmAlarmsDescription, airFMGroupFailoverSysSmokeAlarm=airFMGroupFailoverSysSmokeAlarm, memInputAnalogCalibrationPoint5Value=memInputAnalogCalibrationPoint5Value, airFMSysCoolDeadbandC=airFMSysCoolDeadbandC, airFMModReturnHum=airFMModReturnHum, rPDUOutletConfigRebootDuration=rPDUOutletConfigRebootDuration, upsPhaseInputMinPower=upsPhaseInputMinPower, airIRmPmDrycooler2SummerStartTempC=airIRmPmDrycooler2SummerStartTempC, emsProbeConfig=emsProbeConfig, airIRmPmPump3LinearRange=airIRmPmPump3LinearRange, dm3StatusConvDevType=dm3StatusConvDevType, airIRG2RDT2RunHoursEvapFanIndex=airIRG2RDT2RunHoursEvapFanIndex, cpsInfoSerialPortEntry=cpsInfoSerialPortEntry, rPDU2Device=rPDU2Device, atsControllerRestart=atsControllerRestart, upsHighPrecBatteryCurrentTableIndex=upsHighPrecBatteryCurrentTableIndex, rARUSensorsTempLongDecRateThreshTime=rARUSensorsTempLongDecRateThreshTime, upsAdvBatteryNumOfBadBattPacks=upsAdvBatteryNumOfBadBattPacks, airIRG3RDUServiceIntervalsEntry=airIRG3RDUServiceIntervalsEntry, isxModularDistModuleOutputAlarmHighEnable=isxModularDistModuleOutputAlarmHighEnable, iemConfigProbeMinHumidEnable=iemConfigProbeMinHumidEnable, sPDUIdentHardwareRevMSP=sPDUIdentHardwareRevMSP, airIRG3CMStatusRackInletTempUS=airIRG3CMStatusRackInletTempUS, airFMGroupLoadShareDehumRequests=airFMGroupLoadShareDehumRequests, rPDU2OutletSwitchedControlNumber=rPDU2OutletSwitchedControlNumber, airIRmPmCompressor2Alarm=airIRmPmCompressor2Alarm, rPDU2SensorDiscreteStatusCurrentState=rPDU2SensorDiscreteStatusCurrentState, atsConfigPhaseTableSize=atsConfigPhaseTableSize, airIRRCGroupSetpointsSupplyAirMetric=airIRRCGroupSetpointsSupplyAirMetric, isxModularPduIdent=isxModularPduIdent, airIRmPmCmp2ManOperationActive=airIRmPmCmp2ManOperationActive, airFMStatusSystemRemoteAvgTempF=airFMStatusSystemRemoteAvgTempF, xATSGeneratorLowOilLevelAlarm=xATSGeneratorLowOilLevelAlarm, rPDU2SensorTempHumidityStatusTempC=rPDU2SensorTempHumidityStatusTempC, sPDUIdent=sPDUIdent, sPDUMasterControlVMTable=sPDUMasterControlVMTable, AirIRmControlState=AirIRmControlState, isxModularDistSysOutputVoltageThresholdLow=isxModularDistSysOutputVoltageThresholdLow, dcmim2ConfigSysHighTempTrip=dcmim2ConfigSysHighTempTrip, airIRSCUnitStatusSuctionPressureMetric=airIRSCUnitStatusSuctionPressureMetric, airIRmPmHumidifier2LinearRange=airIRmPmHumidifier2LinearRange, xATSSystemOutputPhaseCurrent=xATSSystemOutputPhaseCurrent, airIRRP100GroupStatusAirFlowUS=airIRRP100GroupStatusAirFlowUS, upsHighPrecBatteryPackTemperature=upsHighPrecBatteryPackTemperature, mtrapargsInteger=mtrapargsInteger, memSensorsStatusEntry=memSensorsStatusEntry, upsHighPrecBatteryPackCartridgeHealth=upsHighPrecBatteryPackCartridgeHealth, accessPXConfigRear=accessPXConfigRear, battManBatteryVoltageZeroCalib=battManBatteryVoltageZeroCalib, envSTDecTempRateViolation=envSTDecTempRateViolation, rPDUBankPhaseLowLoad=rPDUBankPhaseLowLoad, smwCriticalConditionCleared=smwCriticalConditionCleared, rPDU2DevicePropertiesNumSwitchedOutlets=rPDU2DevicePropertiesNumSwitchedOutlets, sPDUOutletStatusVMCommandPending=sPDUOutletStatusVMCommandPending, emsAlarmDeviceControlEntry=emsAlarmDeviceControlEntry, rPDUStatusOutletEntry=rPDUStatusOutletEntry, sPDUOutletStatusVMOutletIndex=sPDUOutletStatusVMOutletIndex, upsDiagSubSysNetworkComCardHardwareRev=upsDiagSubSysNetworkComCardHardwareRev, powerNetSubAgent=powerNetSubAgent, accessPXConfigFront=accessPXConfigFront, isxModularDistributionModuleInserted=isxModularDistributionModuleInserted, airFMModBlwr1CapLife=airFMModBlwr1CapLife, iemStatusContactNumber=iemStatusContactNumber, isxModularDistSysCurrentThresholdMax=isxModularDistSysCurrentThresholdMax, smartUPS1250=smartUPS1250, cpsEthDhcpc=cpsEthDhcpc, memInputNormalState=memInputNormalState, airIRG3RDUID=airIRG3RDUID, emsProbeStatusTable=emsProbeStatusTable, sPDUOutletConfigVM=sPDUOutletConfigVM, coolingUnitExtendedAnalogTable=coolingUnitExtendedAnalogTable, memSensorsTempMinThresh=memSensorsTempMinThresh, emsAlarmDeviceControlTable=emsAlarmDeviceControlTable, upsDiagPMStatus=upsDiagPMStatus, rPDU2OutletMeteredConfigTable=rPDU2OutletMeteredConfigTable, airFMSysAlarmMapMainModAirBlckIntOpen=airFMSysAlarmMapMainModAirBlckIntOpen, dm3StatusFusesEntry=dm3StatusFusesEntry, isxModularBreakerOpenAlarmCleared=isxModularBreakerOpenAlarmCleared, airIRmPmEheating1HysteresisK=airIRmPmEheating1HysteresisK, rPDU2SensorTempHumidityConfigTempMaxThreshF=rPDU2SensorTempHumidityConfigTempMaxThreshF, upsAdvConfigBattCabAmpHour=upsAdvConfigBattCabAmpHour, upsDiagSubSysExternalPowerFrameBoardFrameIndex=upsDiagSubSysExternalPowerFrameBoardFrameIndex, memBeaconConfigName=memBeaconConfigName, airIRmIdentHardwareRevision=airIRmIdentHardwareRevision, isxModularDistModuleBreakerRating=isxModularDistModuleBreakerRating, memModulesStatusFirmwareRev=memModulesStatusFirmwareRev, xATSGeneratorLowCoolantTempAlarmCleared=xATSGeneratorLowCoolantTempAlarmCleared, airIRRP500UnitStatusLeavingFluidTemperatureUS=airIRRP500UnitStatusLeavingFluidTemperatureUS, xPDUTransformerTempAlarmCleared=xPDUTransformerTempAlarmCleared, upsOverloadCleared=upsOverloadCleared, mconfigBOOTPEnabled=mconfigBOOTPEnabled, airIRG3RDU=airIRG3RDU, xATSGeneratorServiceTotalkWhMaintenance=xATSGeneratorServiceTotalkWhMaintenance, rPDUOutletLowLoadCleared=rPDUOutletLowLoadCleared, airFMSysAlarmMapSysOutputIndex=airFMSysAlarmMapSysOutputIndex, apcLogicPowerSupplyFaultCleared=apcLogicPowerSupplyFaultCleared, airPASetpointTempC=airPASetpointTempC, dm3StatusAlarmsEntry=dm3StatusAlarmsEntry, airFMModCapacityCtrl=airFMModCapacityCtrl)
mibBuilder.exportSymbols("PowerNet-MIB", xATSTesting=xATSTesting, isxModularDistributionModuleRemoved=isxModularDistributionModuleRemoved, apcInternalCommunicationFaultCleared=apcInternalCommunicationFaultCleared, atsConfigLineVRMSNarrowLimit=atsConfigLineVRMSNarrowLimit, airIRRP500UnitStatusLeavingFluidTemperatureMetric=airIRRP500UnitStatusLeavingFluidTemperatureMetric, airIRmPmEheating3Type=airIRmPmEheating3Type, airFMModBlwr2FanPower=airFMModBlwr2FanPower, airIRRP100UnitIdentModelNumber=airIRRP100UnitIdentModelNumber, dcmim2Config=dcmim2Config, msvmCommunicationEstablished=msvmCommunicationEstablished, airFMModCondFluidVlvPos=airFMModCondFluidVlvPos, airIRRP500UnitThresholdsSupplyHumidityLow=airIRRP500UnitThresholdsSupplyHumidityLow, humidityThresholdViolationCleared1=humidityThresholdViolationCleared1, upsPhaseOutputMaxPercentLoad=upsPhaseOutputMaxPercentLoad, rPDUStatusBankTableSize=rPDUStatusBankTableSize, isxModularPduAlarmStatus=isxModularPduAlarmStatus, sPDUMasterConfigVMIndex=sPDUMasterConfigVMIndex, emConfigProbeTempHysteresis=emConfigProbeTempHysteresis, upsDipSwitchChanged=upsDipSwitchChanged, battManString2ResponseTestCurrentEntry=battManString2ResponseTestCurrentEntry, upsDiagSubFeedBreakerTableSize=upsDiagSubFeedBreakerTableSize, airIRmPmSensor21Failure=airIRmPmSensor21Failure, accessPXConfigBeaconName=accessPXConfigBeaconName, upsDiagSubSysInverterEntry=upsDiagSubSysInverterEntry, rPDULoadBankConfigIndex=rPDULoadBankConfigIndex, airIRG2RDT2StatusSupplyAirTempUS=airIRG2RDT2StatusSupplyAirTempUS, isxModularDistSysOutputVoltageAlarmHighEnable=isxModularDistSysOutputVoltageAlarmHighEnable, xATSDoorOpenAlarmCleared=xATSDoorOpenAlarmCleared, sPDUOutletControlVMName=sPDUOutletControlVMName, airCriticalConditionCleared=airCriticalConditionCleared, airIRRP100UnitStatusDischargePressureMetric=airIRRP100UnitStatusDischargePressureMetric, dm3ConfigRectStandbyAlarm=dm3ConfigRectStandbyAlarm, airFMModRHComp2Reset=airFMModRHComp2Reset, airFMSysAlarmMapOutput11=airFMSysAlarmMapOutput11, airIRG3RDUThresholdsEntry=airIRG3RDUThresholdsEntry, airIRmPmDehumidificStartHumidity=airIRmPmDehumidificStartHumidity, upsAdvConfigUPSFail=upsAdvConfigUPSFail, airIRmPmHumidifier1Failure=airIRmPmHumidifier1Failure, mconfigNumTrapReceivers=mconfigNumTrapReceivers, sPDUIdentSerialNumber=sPDUIdentSerialNumber, battManString2ResponseTestCurrentData=battManString2ResponseTestCurrentData, airFMStatusModuleOutputCapacity=airFMStatusModuleOutputCapacity, xPDUSystemBreakerTableSize=xPDUSystemBreakerTableSize, apcAnalogInputMaxThresholdViolationCleared=apcAnalogInputMaxThresholdViolationCleared, sPDUOutletControlVM=sPDUOutletControlVM, mtrapargsOctetString06=mtrapargsOctetString06, upsHighPrecBatteryPackFirmwareRevision=upsHighPrecBatteryPackFirmwareRevision, airIRG3RDUConfigPowerSource=airIRG3RDUConfigPowerSource, xATSGeneratorShutdown=xATSGeneratorShutdown, airIRmPmPump3Hysteresis=airIRmPmPump3Hysteresis, airIRRP100UnitStatusContainmtDPMetric=airIRRP100UnitStatusContainmtDPMetric, cpsSerialLocalLogins=cpsSerialLocalLogins, cpsCardIdentIndex=cpsCardIdentIndex, xATSSwitchTimersAbort=xATSSwitchTimersAbort, sPDUOutletStatusVMOutletState=sPDUOutletStatusVMOutletState, airIRmPmSetpointTemperatureNight=airIRmPmSetpointTemperatureNight, upsAdvInputBypassNominalVoltage=upsAdvInputBypassNominalVoltage, airIRG3RDUStatusReceiverLiquidLevel=airIRG3RDUStatusReceiverLiquidLevel, airIRRP100UnitServiceIntervalHumidifier=airIRRP100UnitServiceIntervalHumidifier, airFMModHeaterType=airFMModHeaterType, airFMSysTempCtrlMethod=airFMSysTempCtrlMethod, upsAdvBatteryExternalSKU=upsAdvBatteryExternalSKU, memSensorsConfigTable=memSensorsConfigTable, airIRmPmPump1ManOpRunning=airIRmPmPump1ManOpRunning, upsParallelInputPhaseTableIndex=upsParallelInputPhaseTableIndex, memModulesConfigTableSize=memModulesConfigTableSize, emConfigProbeMinHumidThreshold=emConfigProbeMinHumidThreshold, rPDUStatusPhaseEntry=rPDUStatusPhaseEntry, xATSGeneratorLowOilPressureCleared=xATSGeneratorLowOilPressureCleared, upsDiagnosticComBus=upsDiagnosticComBus, sPDUOutletControlEntry=sPDUOutletControlEntry, dm3ConfigSystem=dm3ConfigSystem, xATSGeneratorIdentVoltageConfiguration=xATSGeneratorIdentVoltageConfiguration, airIRmPmSwVersion=airIRmPmSwVersion, sPDUIdentHardwareRevVM=sPDUIdentHardwareRevVM, airFMModElectricHeaterType=airFMModElectricHeaterType, airFMSysDehumPIDResetRateI=airFMSysDehumPIDResetRateI, upsSCGStatusTable=upsSCGStatusTable, airIRRCUnitStatusFilterDPMetric=airIRRCUnitStatusFilterDPMetric, airIRG3GroupSetpointsAirFlowControl=airIRG3GroupSetpointsAirFlowControl, xPDUBranchBreakerUnderCurrentThreshold=xPDUBranchBreakerUnderCurrentThreshold, airIRSCUnitStatusFilterDPMetric=airIRSCUnitStatusFilterDPMetric, envLowTempThresholdViolationCleared=envLowTempThresholdViolationCleared, smartUPS5000DSP=smartUPS5000DSP, airIRmPmLouver3ManOpPosition=airIRmPmLouver3ManOpPosition, sPDUOutletControlMSPOutletCommand=sPDUOutletControlMSPOutletCommand, airIRRCUnitIdentModelNumber=airIRRCUnitIdentModelNumber, uioInputContactStatusCommStatus=uioInputContactStatusCommStatus, airIRmPmMyZoneSupplyTemperatureF=airIRmPmMyZoneSupplyTemperatureF, airIRmPmRuntimeCooling=airIRmPmRuntimeCooling, airIRmPmWaterTemperatureTooHigh=airIRmPmWaterTemperatureTooHigh, airFMGroupFailoverSysAnyMinorAlarm=airFMGroupFailoverSysAnyMinorAlarm, powerFramePositionID=powerFramePositionID, rPDU2IdentFirmwareRev=rPDU2IdentFirmwareRev, airIRmPmFan1Running=airIRmPmFan1Running, passwordChange=passwordChange, iemStatusRelaysTable=iemStatusRelaysTable, upsHighPrecBatteryTemperature=upsHighPrecBatteryTemperature, airIRmPmNumberOfLouvers=airIRmPmNumberOfLouvers, airIRRP500UnitServiceIntervalHeater=airIRRP500UnitServiceIntervalHeater, airIRRP100GroupStatusDewPointTempMetric=airIRRP100GroupStatusDewPointTempMetric, airIRAlarmConditionsTable=airIRAlarmConditionsTable, dm3IdentSysDescriptionEntry=dm3IdentSysDescriptionEntry, airIRRP100GroupConfigMaxFanSpeed=airIRRP100GroupConfigMaxFanSpeed, airIRG3GroupStatusCoolDemand=airIRG3GroupStatusCoolDemand, dm3ConfigConvLowVoltThresh=dm3ConfigConvLowVoltThresh, isxModularDistribution=isxModularDistribution, sPDUOutletConfigVMPowerOnTime=sPDUOutletConfigVMPowerOnTime, dm3StatusRectifier=dm3StatusRectifier, airIRmPmGECWvalveStartTemperature=airIRmPmGECWvalveStartTemperature, airFMModHardwareRev=airFMModHardwareRev, memModulesStatusSerialNumber=memModulesStatusSerialNumber, airIRmPmFan1Failure=airIRmPmFan1Failure, airIRRCUnitStatus=airIRRCUnitStatus, upsDiagSubSysXRCommunicationCardSerialNum=upsDiagSubSysXRCommunicationCardSerialNum, upsHighPrecTotalDCCurrentEntry=upsHighPrecTotalDCCurrentEntry, airIRmPmEheating2HysteresisK=airIRmPmEheating2HysteresisK, airFMModWaterConductivity=airFMModWaterConductivity, upsPhaseNumInputPhases=upsPhaseNumInputPhases, airFMGroupFailoverModMaintRequired=airFMGroupFailoverModMaintRequired, smartUPS8000=smartUPS8000, atsRMSOverFrequency=atsRMSOverFrequency, rPDUDeviceConfigChange=rPDUDeviceConfigChange, emStatusProbeCurrentHumid=emStatusProbeCurrentHumid, rPDUPowerSupply=rPDUPowerSupply, airPASeries=airPASeries, cpsSerialPortDBmode=cpsSerialPortDBmode, airIRmPmDrycooler3SummerStartTempC=airIRmPmDrycooler3SummerStartTempC, galaxyVMUPS60kVA=galaxyVMUPS60kVA, sPDUOutletControlTable=sPDUOutletControlTable, airIRmPmSetpointTemperatureNightF=airIRmPmSetpointTemperatureNightF, upsHighPrecBatteryActualVoltagePolarity=upsHighPrecBatteryActualVoltagePolarity, airIRRP100UnitStatusAirFlowUS=airIRRP100UnitStatusAirFlowUS, emsStatusSensorCount=emsStatusSensorCount, airFMSysAlarmMapSysFireDet=airFMSysAlarmMapSysFireDet, upsAdvBatteryCurrentIndex=upsAdvBatteryCurrentIndex, airIRmPmHotgasHeatRunning=airIRmPmHotgasHeatRunning, isxModularDistSysVoltageAlarmStatus=isxModularDistSysVoltageAlarmStatus, emStatusProbeMinHumidViolation=emStatusProbeMinHumidViolation, upsDiagIMHardwareRev=upsDiagIMHardwareRev, dm3StatusSystem=dm3StatusSystem, airIRG2RDT2StatusInputState=airIRG2RDT2StatusInputState, apcDoorUnlocked=apcDoorUnlocked, rPDUOutletConfigTable=rPDUOutletConfigTable, atsControlResetATS=atsControlResetATS, airFMSysCoilFluidVlvType=airFMSysCoilFluidVlvType, airIRmPmAuxAlarm3=airIRmPmAuxAlarm3, rPDUPowerSupply1Ok=rPDUPowerSupply1Ok, airIRmPmLouver1ManOpEnable=airIRmPmLouver1ManOpEnable, airFMSysAlarmMapExpMod1HighFltrDP=airFMSysAlarmMapExpMod1HighFltrDP, atsHardwareStatusFail=atsHardwareStatusFail, xATSGeneratorOutputBreakerOpenCleared=xATSGeneratorOutputBreakerOpenCleared, xATSGeneratorFuelSystemType=xATSGeneratorFuelSystemType, airIRRP100UnitStatusHumidifierCurrent=airIRRP100UnitStatusHumidifierCurrent, battManStringChargerLowVoltageAlarm=battManStringChargerLowVoltageAlarm, airIRRP100UnitConfigOutputNormalState=airIRRP100UnitConfigOutputNormalState, airFMSysAlarmMapExpMod1BlwrCntl1Fail=airFMSysAlarmMapExpMod1BlwrCntl1Fail, atsInputPower=atsInputPower, upsAdvOutputStatisticsIndex=upsAdvOutputStatisticsIndex, isxModularDistSubFeedInfoEntry=isxModularDistSubFeedInfoEntry, mtrapargsTimeTicks=mtrapargsTimeTicks, iemStatusProbeMinTempViolation=iemStatusProbeMinTempViolation, airIRRP100UnitStatusCompressorDriveSpeed=airIRRP100UnitStatusCompressorDriveSpeed, xATSSource2VoltageLtoN=xATSSource2VoltageLtoN, rPDU2Group=rPDU2Group, accessPXIdentSerialNumber=accessPXIdentSerialNumber, returnFromLowBattery=returnFromLowBattery, airIRSCUnitServiceIntervalsAirFilter=airIRSCUnitServiceIntervalsAirFilter, rPDUIdentDeviceNumOutlets=rPDUIdentDeviceNumOutlets, cpsSerialNFS=cpsSerialNFS, airIRG3GroupStatusAvgSupplyTempMetric=airIRG3GroupStatusAvgSupplyTempMetric, airIRG3RDURunHoursPump1=airIRG3RDURunHoursPump1, rARUPower=rARUPower, airIRG3RDUServiceIntervalsTable=airIRG3RDUServiceIntervalsTable, airFMModBlwr2ChokeTempF=airFMModBlwr2ChokeTempF, airIRSCUnitStatusEvaporatorFanSpeed=airIRSCUnitStatusEvaporatorFanSpeed, airIRmPmEheating1StartTemperature=airIRmPmEheating1StartTemperature, airFMStatusModuleSupplyTempF=airFMStatusModuleSupplyTempF, memOutputStatusOutputLocation=memOutputStatusOutputLocation, upsDiagIMEntry=upsDiagIMEntry, rPDULoadDevOutletNumber=rPDULoadDevOutletNumber, airIRG3IdentManufactureDate=airIRG3IdentManufactureDate, galaxy9000FreqConverter=galaxy9000FreqConverter, dcmim2ConfigBattMaxRecharge=dcmim2ConfigBattMaxRecharge, upsOutletGroupStatusTableSize=upsOutletGroupStatusTableSize, baseFanFailure=baseFanFailure, xATSOutputCurrentLowAlarmCleared=xATSOutputCurrentLowAlarmCleared, upsOutletGroupControl=upsOutletGroupControl, upsAdvConfigLowTransferVolt=upsAdvConfigLowTransferVolt, rPDULoadPhaseConfigOverloadThreshold=rPDULoadPhaseConfigOverloadThreshold, airFMSysRunHours=airFMSysRunHours, powerNetSoftwareTable=powerNetSoftwareTable, atsConfigPhaseLowLoadThreshold=atsConfigPhaseLowLoadThreshold, apcDoorClosedImproperly=apcDoorClosedImproperly, switchgearBreakerStatus=switchgearBreakerStatus, emConfigContactNumber=emConfigContactNumber, emsProbeConfigProbeDeltaTemp=emsProbeConfigProbeDeltaTemp, airIRG3GroupSetpointsSupplyAirSetpointUS=airIRG3GroupSetpointsSupplyAirSetpointUS, upsParallelInputPhaseIndex=upsParallelInputPhaseIndex, atsOutputFrequency=atsOutputFrequency, airIRSCGroupStatusMaxRackInletTempUS=airIRSCGroupStatusMaxRackInletTempUS, airIRRP100UnitRunHoursFan1=airIRRP100UnitRunHoursFan1, emsProbeStatusProbeCommStatus=emsProbeStatusProbeCommStatus, xATSOutputLoadPoweredByGeneratorAlarmCleared=xATSOutputLoadPoweredByGeneratorAlarmCleared, airIRmPmDrycooler1WinterStartTempC=airIRmPmDrycooler1WinterStartTempC, apcmgmt=apcmgmt, airIRmPmDehumidificManOpEnable=airIRmPmDehumidificManOpEnable, airFMSysAlarmMapExpMod1LowAirFlow=airFMSysAlarmMapExpMod1LowAirFlow, dm3StatusLVDHwFault=dm3StatusLVDHwFault, atsCommunicationLost=atsCommunicationLost, upsAdvOutputNeutralCurrent=upsAdvOutputNeutralCurrent, upsAdvIdentSkuNumber=upsAdvIdentSkuNumber, memOutletConfigOutletNumber=memOutletConfigOutletNumber, airIRSCGroupSetptsCoolDeadbandUS=airIRSCGroupSetptsCoolDeadbandUS, uioInputContactStatusContactID=uioInputContactStatusContactID, dcCurrentLimitAlarm=dcCurrentLimitAlarm, airIRmPmSensor12Defect=airIRmPmSensor12Defect, battManString1ResponseTestCurrentTableSize=battManString1ResponseTestCurrentTableSize, airFMGroupSysRoles=airFMGroupSysRoles, airIRG3RDUStatusByPassValvePosition=airIRG3RDUStatusByPassValvePosition, pduCircuitPanelInputUndervoltage=pduCircuitPanelInputUndervoltage, emConfig=emConfig, airIRRP100GroupStatus=airIRRP100GroupStatus, battManString1BatteryLowCapacity=battManString1BatteryLowCapacity, apcAnalogInputHighThresholdViolationCleared=apcAnalogInputHighThresholdViolationCleared, mUpsEnvironAmbientTemperature=mUpsEnvironAmbientTemperature, airIRmPmPump1StartTemperatureF=airIRmPmPump1StartTemperatureF, upsPhaseOutputMaxLoad=upsPhaseOutputMaxLoad, airFMSysLowCoilFluidTempC=airFMSysLowCoilFluidTempC, xATSInputContactName=xATSInputContactName, upsAdvOutputCrestFactor=upsAdvOutputCrestFactor, airIRSCUnitStatusRackInletTempUS=airIRSCUnitStatusRackInletTempUS, airFMModBlwr2RatedCurrent=airFMModBlwr2RatedCurrent, airIRRP100UnitStatusRackInletTemperature2US=airIRRP100UnitStatusRackInletTemperature2US, airIRSCUnitStatusSuperheatTempMetric=airIRSCUnitStatusSuperheatTempMetric, airIRmPmPump1LinearRange=airIRmPmPump1LinearRange, airIRRP500UnitStatusLeakSensor=airIRRP500UnitStatusLeakSensor, airIRRCGroupSetpoints=airIRRCGroupSetpoints, rPDU2DeviceTableSize=rPDU2DeviceTableSize, apc=apc, airIRmPmDrycooler2SummerStartTemp=airIRmPmDrycooler2SummerStartTemp, galaxy300UPS15kVA33=galaxy300UPS15kVA33, airIRG3GroupStatusCoolOutput=airIRG3GroupStatusCoolOutput, airIRG3CMRunHoursFan5=airIRG3CMRunHoursFan5, airIRG3CMConfigEntry=airIRG3CMConfigEntry, coolingUnitConfigurationStringDescription=coolingUnitConfigurationStringDescription, airIRG3RDUStatusLeadPump=airIRG3RDUStatusLeadPump, upsOutletGroupConfigLoadShedControlSkipOffDelay=upsOutletGroupConfigLoadShedControlSkipOffDelay, memSensorsTempLongIncRateThreshTime=memSensorsTempLongIncRateThreshTime, airIRG2RDT2RunHoursCondensatePump=airIRG2RDT2RunHoursCondensatePump, airIRRCGroupConfigCoolResetRateI=airIRRCGroupConfigCoolResetRateI, airPAModelNumber=airPAModelNumber, coolingUnitConfigurationDiscreteValueAsString=coolingUnitConfigurationDiscreteValueAsString, accessPXConfigCardFormat=accessPXConfigCardFormat)
mibBuilder.exportSymbols("PowerNet-MIB", airIRG3RDUStatusStopOnLeakDetect=airIRG3RDUStatusStopOnLeakDetect, airFMSysCompRotPeriod=airFMSysCompRotPeriod, upsAdvBatteryFullCapacity=upsAdvBatteryFullCapacity, upsAdvConfigVoutReporting=upsAdvConfigVoutReporting, rPDU2BankStatusEntry=rPDU2BankStatusEntry, upsDiagBatteryManufactureDate=upsDiagBatteryManufactureDate, airIRSC100Series=airIRSC100Series, airFMModBlwr1ElOvTimeConst=airFMModBlwr1ElOvTimeConst, xPDUIdentFirmwareControllerRev=xPDUIdentFirmwareControllerRev, upsDiagSubSysSystemPowerSupplyFirmwareRev=upsDiagSubSysSystemPowerSupplyFirmwareRev, airIRmPmUnitTemperatureScale=airIRmPmUnitTemperatureScale, uioOutputRelayStatusAlarmStatus=uioOutputRelayStatusAlarmStatus, gracefulShutdown=gracefulShutdown, emsProbeConnected=emsProbeConnected, upsPfcFault=upsPfcFault, rPDUIdentDeviceRating=rPDUIdentDeviceRating, sPDUOutletStatusMSPOutletIndex=sPDUOutletStatusMSPOutletIndex, upsIntegratedATSSourceStatus=upsIntegratedATSSourceStatus, airIRSCUnitIdentModelNumber=airIRSCUnitIdentModelNumber, apcEnvSTIncTempRateViolationCleared=apcEnvSTIncTempRateViolationCleared, rPDUPowerSupply1Status=rPDUPowerSupply1Status, rPDUOutletConfigPowerOffTime=rPDUOutletConfigPowerOffTime, upsHighPrecBatteryCapacity=upsHighPrecBatteryCapacity, airIRmPmUnitTemperatureC=airIRmPmUnitTemperatureC, apcLocalDisplayIdentOptions=apcLocalDisplayIdentOptions, rPDULoadDevBankNumber=rPDULoadDevBankNumber, rPDUOutletStatusOutletState=rPDUOutletStatusOutletState, memInputAnalogMinThresh=memInputAnalogMinThresh, airIRRP500UnitConfigOutputSource=airIRRP500UnitConfigOutputSource, emStatusContactName=emStatusContactName, isxModularDistModuleOutputModIndex=isxModularDistModuleOutputModIndex, sPDUOutletPowerOnTime=sPDUOutletPowerOnTime, xATSGeneratorEStop=xATSGeneratorEStop, airIRmPmEheating4ManOpRunning=airIRmPmEheating4ManOpRunning, airFMSysAlarmMapOutput4=airFMSysAlarmMapOutput4, emsProbeStatusProbeMaxTempThresh=emsProbeStatusProbeMaxTempThresh, memBeaconAction=memBeaconAction, rARUStatusAruTempOvrdSetpoint=rARUStatusAruTempOvrdSetpoint, airWarningCondition=airWarningCondition, airIRmPmPWWHeatingStartTempK=airIRmPmPWWHeatingStartTempK, sPDUOutletStatusVMTable=sPDUOutletStatusVMTable, xATSSwitchSettingsLowVoltageTransferPoint=xATSSwitchSettingsLowVoltageTransferPoint, rPDUIdentDevicePowerFactor=rPDUIdentDevicePowerFactor, airIRRDU=airIRRDU, upsDiagSubSysPowerFactorCorrectionHardwareRev=upsDiagSubSysPowerFactorCorrectionHardwareRev, airIRG2IdentName=airIRG2IdentName, airFMGroupFailoverModCoolFail=airFMGroupFailoverModCoolFail, dm3StatusConvFwVer=dm3StatusConvFwVer, airIRmPmGECWvalveLinearRangeF=airIRmPmGECWvalveLinearRangeF, airIRRP100UnitStatusRackInletTemperature1US=airIRRP100UnitStatusRackInletTemperature1US, airIRmPmEheating3StartTemperature=airIRmPmEheating3StartTemperature, msvmNearOverload=msvmNearOverload, cpsSerialPortAccSrv1=cpsSerialPortAccSrv1, xPDUSystemBreakerTableIndex=xPDUSystemBreakerTableIndex, upsDiagnosticsFailed=upsDiagnosticsFailed, rPDU2DeviceStatusPowerSupply1Status=rPDU2DeviceStatusPowerSupply1Status, airIRRP500GroupStatusMaxRackInletTempMetric=airIRRP500GroupStatusMaxRackInletTempMetric, xATSGeneratorOverspeedCleared=xATSGeneratorOverspeedCleared, airIRRP500UnitStatusRackInletTemperature1Metric=airIRRP500UnitStatusRackInletTemperature1Metric, airIRRP100GroupStatusCoolDemand=airIRRP100GroupStatusCoolDemand, airIRG3RDUConfigRefrigerantLeakDetectorEnabled=airIRG3RDUConfigRefrigerantLeakDetectorEnabled, rPDU2OutletMeteredConfigIndex=rPDU2OutletMeteredConfigIndex, emsProbeConfigProbeSTIncTempTime=emsProbeConfigProbeSTIncTempTime, airFMModBlwr1AccTime=airFMModBlwr1AccTime, airFMModBlower2=airFMModBlower2, airIRmPmDrycooler2Failure=airIRmPmDrycooler2Failure, upsBatteryFrameLayoutEntry=upsBatteryFrameLayoutEntry, airFMSysAlarmMapExpMod1MaintReq=airFMSysAlarmMapExpMod1MaintReq, airIRmPmUnitEvaporationTemperature2=airIRmPmUnitEvaporationTemperature2, rPDU2OutletMetered=rPDU2OutletMetered, battManConfigMaxAmbientTempF=battManConfigMaxAmbientTempF, rPDU2DeviceControlCommand=rPDU2DeviceControlCommand, isxcErrorAlarm=isxcErrorAlarm, cpsCardConfIndex=cpsCardConfIndex, contactFault=contactFault, rARUIdentAruIndex=rARUIdentAruIndex, isxModularDistInfoTable=isxModularDistInfoTable, dm3StatusConverter=dm3StatusConverter, rPDU2OutletMeteredConfigModule=rPDU2OutletMeteredConfigModule, dm3StatusConvDiagPass=dm3StatusConvDiagPass, airIRSCGroupStatusAirFlowMetric=airIRSCGroupStatusAirFlowMetric, isxModularDistSysCurrentAlarmLowEnable=isxModularDistSysCurrentAlarmLowEnable, upsOutletGroupConfigLoadShedRuntimeRemaining=upsOutletGroupConfigLoadShedRuntimeRemaining, airIRRP100UnitRunHoursCompressor=airIRRP100UnitRunHoursCompressor, airFMSysAlarmMapOutputIndex=airFMSysAlarmMapOutputIndex, airFMGroupSysRunHours=airFMGroupSysRunHours, airIRSCUnitSetptsCoolSetpointUS=airIRSCUnitSetptsCoolSetpointUS, dm3StatusRectDiagPass=dm3StatusRectDiagPass, apcUserScheduleViolationCleared=apcUserScheduleViolationCleared, airFMModPropModuleIndex=airFMModPropModuleIndex, airFMModServIntComp2Reset=airFMModServIntComp2Reset, noBatteries=noBatteries, airIRmPmEheating4StartTemperature=airIRmPmEheating4StartTemperature, airFMSysDemands=airFMSysDemands, upsDiagSubSysIntBypSwitchSerialNum=upsDiagSubSysIntBypSwitchSerialNum, apcHardwareStateNormal=apcHardwareStateNormal, airIRRP100UnitConfigUnitRoleOverride=airIRRP100UnitConfigUnitRoleOverride, airIRSCGroupConfig=airIRSCGroupConfig, airFMModStatusTable=airFMModStatusTable, airFMModServIntBlwrCtrl2=airFMModServIntBlwrCtrl2, rsCommunicationLost=rsCommunicationLost, airFMSysDehumCapacity=airFMSysDehumCapacity, coolingUnitAboutTableIndex=coolingUnitAboutTableIndex, airIRG3GroupConfigRuntimeBalancingEnable=airIRG3GroupConfigRuntimeBalancingEnable, dm3ConfigConvFailComm=dm3ConfigConvFailComm, emsOutletStatusOutletState=emsOutletStatusOutletState, upsAdvInputBypassPeakCurrent=upsAdvInputBypassPeakCurrent, xPDUEpoArmed=xPDUEpoArmed, rARU=rARU, xPDUUPSInputVoltagePhaseTable=xPDUUPSInputVoltagePhaseTable, airIRRCUnitRunHoursFan8=airIRRCUnitRunHoursFan8, mUpsEnvironAmbientTemperature2=mUpsEnvironAmbientTemperature2, upsBasicOutputPhase=upsBasicOutputPhase, dm3StatusAlarmsTable=dm3StatusAlarmsTable, rPDULoadDevMaxPhaseLoad=rPDULoadDevMaxPhaseLoad, airIRSCUnitStatusSupplyAirTempMetric=airIRSCUnitStatusSupplyAirTempMetric, battManAlarm=battManAlarm, atsConfigBank=atsConfigBank, rPDU2OutletMeteredStatusEntry=rPDU2OutletMeteredStatusEntry, smartUPS250=smartUPS250, memSensorsTempShortDecRateThreshValue=memSensorsTempShortDecRateThreshValue, memOutletConfigModuleNumber=memOutletConfigModuleNumber, upsInternalOverTemperature=upsInternalOverTemperature, upsDiagSubSysNetworkComCardEntry=upsDiagSubSysNetworkComCardEntry, airFMModNomCoilDiffPresPa=airFMModNomCoilDiffPresPa, airIRmPmEheating1ManOpEnable=airIRmPmEheating1ManOpEnable, emsProbeConfigProbeLTIncTempVariance=emsProbeConfigProbeLTIncTempVariance, airIRmPmDehumidificRunning=airIRmPmDehumidificRunning, airIRRCUnitThresholdsReturnAirHighTempUS=airIRRCUnitThresholdsReturnAirHighTempUS, mconfig=mconfig, rARUStatusSysTempUnits=rARUStatusSysTempUnits, airIRG3GroupStatusMinReturnAirTempMetric=airIRG3GroupStatusMinReturnAirTempMetric, airIRmPmDrycooler4WinterStartTempF=airIRmPmDrycooler4WinterStartTempF, airIRRCGroupConfigNumberOfActiveFlowControllers=airIRRCGroupConfigNumberOfActiveFlowControllers, airIRmPmMaxLimitReturnAirTemperature=airIRmPmMaxLimitReturnAirTemperature, upsOverload=upsOverload, airIRRP100UnitStatusReturnAirTempUS=airIRRP100UnitStatusReturnAirTempUS, airFMModOutputCapacity=airFMModOutputCapacity, serialPort1=serialPort1, airIRRP500UnitStatusFilterDPMetric=airIRRP500UnitStatusFilterDPMetric, airIRmPmCmp1ManOperationActive=airIRmPmCmp1ManOperationActive, battManString2OhmicValueTable=battManString2OhmicValueTable, rPDULoadDevNumPhases=rPDULoadDevNumPhases, memInputName=memInputName, dm3StatusOutRlyIndex=dm3StatusOutRlyIndex, airFMSysAlarmMapInput7=airFMSysAlarmMapInput7, airIRmPmWinterModeHysteresisK=airIRmPmWinterModeHysteresisK, airFMSysInputAlarmAction=airFMSysInputAlarmAction, rPDU2OutletMeteredStatusModule=rPDU2OutletMeteredStatusModule, memModulesConfigTable=memModulesConfigTable, dm3StatusOEMconvGain=dm3StatusOEMconvGain, sPDUOutletStatusVMIndex=sPDUOutletStatusVMIndex, dm3StatusFusesTableSize=dm3StatusFusesTableSize, dm3StatusConvFanFail=dm3StatusConvFanFail, upsOutletGroupStatusIndex=upsOutletGroupStatusIndex, atsOutputMinCurrent=atsOutputMinCurrent, upsDiagSubSysPowerFactorCorrectionFirmwareRev=upsDiagSubSysPowerFactorCorrectionFirmwareRev, apCPSSave=apCPSSave, airIRmPmHumidifier2Hysteresis=airIRmPmHumidifier2Hysteresis, airIRmPmFan1Alarm=airIRmPmFan1Alarm, airIRG2GroupConfigFanSpeedControl=airIRG2GroupConfigFanSpeedControl, abnormalConditionCleared=abnormalConditionCleared, airIRG3CMStatusVaporTempUS=airIRG3CMStatusVaporTempUS, airIRmPmEheating3HysteresisF=airIRmPmEheating3HysteresisF, battManConfigApplication=battManConfigApplication, upsPowerFrameLayoutEntry=upsPowerFrameLayoutEntry, sPDUMasterConfigVM=sPDUMasterConfigVM, airIRRP100UnitStatusSupplyAirTempMetric=airIRRP100UnitStatusSupplyAirTempMetric, airIRG3CMConfigStartupDelay=airIRG3CMConfigStartupDelay, airFMSysCoolEssFunction=airFMSysCoolEssFunction, airIRmPmPump1Running=airIRmPmPump1Running, airIRRP100UnitRunHoursHumidifier=airIRRP100UnitRunHoursHumidifier, sPDUIdentVMEntry=sPDUIdentVMEntry, dm3ConfigSysDescriptionTableSize=dm3ConfigSysDescriptionTableSize, dm3IdentSysDescriptionTableSize=dm3IdentSysDescriptionTableSize, airFMModServIntResetTableSize=airFMModServIntResetTableSize, upsAdvInputStatisticsTable=upsAdvInputStatisticsTable, airFMModBlwr2DecTime=airFMModBlwr2DecTime, cpsSerialPortSSHbreak=cpsSerialPortSSHbreak, emsInputContactStatusEntry=emsInputContactStatusEntry, rPDU2IdentName=rPDU2IdentName, xATSSwitchSettingsClearLatchedAlarms=xATSSwitchSettingsClearLatchedAlarms, galaxyVMUPS100kVA=galaxyVMUPS100kVA, upsDiagSwitchGearBreakerTableSize=upsDiagSwitchGearBreakerTableSize, rPDUStatusOutletTable=rPDUStatusOutletTable, airIRmPmReheat2Failure=airIRmPmReheat2Failure, airIRRP500UnitStatusRackInletTemperature3US=airIRRP500UnitStatusRackInletTemperature3US, envMaxTempThresholdViolationCleared=envMaxTempThresholdViolationCleared, cpsSerialPortDBtime=cpsSerialPortDBtime, airIRG3IdentFirmwareRevision=airIRG3IdentFirmwareRevision, rintelligenceModuleInserted=rintelligenceModuleInserted, airFMSysHighCoilFluidTempC=airFMSysHighCoilFluidTempC, upsOutletGroupConfigOutletType=upsOutletGroupConfigOutletType, airIRG2RC=airIRG2RC, dm3StatusSysRectAvailable=dm3StatusSysRectAvailable, airFMSysDXCoolingDmd=airFMSysDXCoolingDmd, cpsSerialPortBreakInterval=cpsSerialPortBreakInterval, airIRmPmHumidifier2Running=airIRmPmHumidifier2Running, upsPhaseOutputCurrent=upsPhaseOutputCurrent, airIRmPmPWWHeatingManOpEnable=airIRmPmPWWHeatingManOpEnable, sPDUOutletConfigMSPmupsZone4=sPDUOutletConfigMSPmupsZone4, rPDU2PhaseConfigIndex=rPDU2PhaseConfigIndex, upsOutletGroupConfigIndex=upsOutletGroupConfigIndex, airIRG3GroupStatusTotalAirFlowMetric=airIRG3GroupStatusTotalAirFlowMetric, smwWarningConditionCleared=smwWarningConditionCleared, atsOutputMinPercentLoad=atsOutputMinPercentLoad, atsInputCurrent=atsInputCurrent, dm3ConfigOutRlyIndex=dm3ConfigOutRlyIndex, atsStatusResetValues=atsStatusResetValues, airIRmPmReturnAirTemperatureC=airIRmPmReturnAirTemperatureC, xATSGenCommLost=xATSGenCommLost, rPDUIdentDeviceNumPhases=rPDUIdentDeviceNumPhases, upsBypassRelayFault=upsBypassRelayFault, cpsSerialPortStopBits=cpsSerialPortStopBits, isxModularDistInfoMeterHardwareRev=isxModularDistInfoMeterHardwareRev, airFMModBlwr1Poles=airFMModBlwr1Poles, atsStatusResetMaxMinValues=atsStatusResetMaxMinValues, airFMModModelNumber=airFMModModelNumber, upsPhaseOutputPercentLoad=upsPhaseOutputPercentLoad, airFMStatusSystemRemoteLowTempF=airFMStatusSystemRemoteLowTempF, smartUPS7500=smartUPS7500, rPDUStatusOutletTableSize=rPDUStatusOutletTableSize, sPDUOutletConfigMSPmupsZone2=sPDUOutletConfigMSPmupsZone2, sPDUMasterConfigMSPManualButton=sPDUMasterConfigMSPManualButton, memBeacons=memBeacons, xATSGeneratorLowCoolantLevelAlarm=xATSGeneratorLowCoolantLevelAlarm, iemStatusRelayName=iemStatusRelayName, symmetraPx100kVA=symmetraPx100kVA, airIRG2GroupStatusAirFlowUS=airIRG2GroupStatusAirFlowUS, battManString1BatteryOpenFuseOrConnection=battManString1BatteryOpenFuseOrConnection, memSensorsStatusSensorName=memSensorsStatusSensorName, airIRRCUnitRunHoursAirFilter=airIRRCUnitRunHoursAirFilter, uioInputContactStatusAlarmStatus=uioInputContactStatusAlarmStatus, airIRRP100UnitConfigSecondaryPowerFeedCapability=airIRRP100UnitConfigSecondaryPowerFeedCapability, emStatusProbeHighTempViolation=emStatusProbeHighTempViolation, dcmim2ConfigBattFloatVolt=dcmim2ConfigBattFloatVolt, battManString1ResponseTestCurrentBenchmarkData=battManString1ResponseTestCurrentBenchmarkData, cpsCardIdentMan=cpsCardIdentMan, sPDUOutletStatusMSPOutletCtrlMode=sPDUOutletStatusMSPOutletCtrlMode, xATSSwitchSettingsAllowClosedTransfer=xATSSwitchSettingsAllowClosedTransfer, coolingUnitExtendedDiscreteTable=coolingUnitExtendedDiscreteTable, battManString1BatteryEntry=battManString1BatteryEntry, isxModularPduIdentMonitorCardFirmwareAppRev=isxModularPduIdentMonitorCardFirmwareAppRev, rPDU2OutletSwitchedConfigIndex=rPDU2OutletSwitchedConfigIndex, upsPhaseOutputLoad=upsPhaseOutputLoad, mem=mem, rPDU2SensorDiscreteConfigAbnormalSeverity=rPDU2SensorDiscreteConfigAbnormalSeverity, atsIdentFirmwareDate=atsIdentFirmwareDate, apcEnvLTIncTempRateViolationCleared=apcEnvLTIncTempRateViolationCleared, airIRG2RDT2ConfigIdleOnLeakDetect=airIRG2RDT2ConfigIdleOnLeakDetect, airFMSysCoolPIDGainP=airFMSysCoolPIDGainP, bmBatManMaintenanceAlarm=bmBatManMaintenanceAlarm, dcmim2ConfigSysLowTempReset=dcmim2ConfigSysLowTempReset, iemConfigRelayFaultCondition=iemConfigRelayFaultCondition)
mibBuilder.exportSymbols("PowerNet-MIB", airIRSCUnitConfigCapacityControlType=airIRSCUnitConfigCapacityControlType, rPDU2DeviceControlEntry=rPDU2DeviceControlEntry, airFMSysAlarmMapExpMod2HumFail=airFMSysAlarmMapExpMod2HumFail, battManUnitCalibTable=battManUnitCalibTable, airIRRCGroupStatusCoolOutput=airIRRCGroupStatusCoolOutput, airPASerialNumber=airPASerialNumber, xPDUSystemOutputVoltageLtoL=xPDUSystemOutputVoltageLtoL, isxModularMaxCurrentThresholdViolationCleared=isxModularMaxCurrentThresholdViolationCleared, memOutputConfigTableSize=memOutputConfigTableSize, emIdentFirmwareRevision=emIdentFirmwareRevision, airIRSCUnitThresholdsReturnAirHighTempMetric=airIRSCUnitThresholdsReturnAirHighTempMetric, dcmim2ConfigBattCapacityTestPercent=dcmim2ConfigBattCapacityTestPercent, airIRRP500GroupConfigMaxFanSpeed=airIRRP500GroupConfigMaxFanSpeed, airIRmPmNumberOfHumidifiers=airIRmPmNumberOfHumidifiers, atsLostRedundancy=atsLostRedundancy, airIRRCUnitServiceIntervals=airIRRCUnitServiceIntervals, airIRmPmOutsideAirTemperatureC=airIRmPmOutsideAirTemperatureC, airFMSysAlarmMapExpMod2HighSupplyTemp=airFMSysAlarmMapExpMod2HighSupplyTemp, atsInputMinCurrent=atsInputMinCurrent, iemConfigContactNormalState=iemConfigContactNormalState, dm3StatusOutputRelays=dm3StatusOutputRelays, communicationEstablished=communicationEstablished, airFMSysAlarmMapSystemOffline=airFMSysAlarmMapSystemOffline, rPDUIdentDevicePowerVA=rPDUIdentDevicePowerVA, airIRG3AlarmsDescription=airIRG3AlarmsDescription, upsAdvBatteryActualVoltageEntry=upsAdvBatteryActualVoltageEntry, rPDU2DeviceStatusPeakPowerTimestamp=rPDU2DeviceStatusPeakPowerTimestamp, cpsCardStatusIndex=cpsCardStatusIndex, rPDUOutletOverload=rPDUOutletOverload, xATSGeneratorServiceRunHoursThreshold=xATSGeneratorServiceRunHoursThreshold, airIRRP500UnitStatusRackInletTemperature2Metric=airIRRP500UnitStatusRackInletTemperature2Metric, dcMultRectFailAlarm=dcMultRectFailAlarm, airFMSysCoilCfg=airFMSysCoilCfg, atsCalibrationNumInputPhases=atsCalibrationNumInputPhases, airPARemoteHumidity=airPARemoteHumidity, iemStatusProbeCurrentHumid=iemStatusProbeCurrentHumid, airFMSysEconIsolVlvCloseDelay=airFMSysEconIsolVlvCloseDelay, xATSInputContactCurrentState=xATSInputContactCurrentState, upsIdent=upsIdent, emStatusContactNumber=emStatusContactNumber, rPDULoadPhaseConfigTable=rPDULoadPhaseConfigTable, bmBatManEnvironmentAlarm=bmBatManEnvironmentAlarm, cpsSerialGroupIndex=cpsSerialGroupIndex, upsDiagSubSysInverterManufactureDate=upsDiagSubSysInverterManufactureDate, airIRmPmLouver2ManOpEnable=airIRmPmLouver2ManOpEnable, accControl=accControl, envLTIncTempRateViolation=envLTIncTempRateViolation, coolingUnitExtendedAnalog=coolingUnitExtendedAnalog, xATSGeneratorIdentAlternatorFrequency=xATSGeneratorIdentAlternatorFrequency, xATSInputContactNumber=xATSInputContactNumber, mUpsContact=mUpsContact, dcOutputRelayOff=dcOutputRelayOff, airIRRP100UnitStatusCompressorDriveControlCardTempUS=airIRRP100UnitStatusCompressorDriveControlCardTempUS, isxModularPdu=isxModularPdu, galaxy7000UPS250kVA=galaxy7000UPS250kVA, cpsSerialInclude=cpsSerialInclude, memInputsStatusCurrentAnalogValue=memInputsStatusCurrentAnalogValue, airIRRP100GroupStatusReheatOutput=airIRRP100GroupStatusReheatOutput, xATSGeneratorVeryLowOilPressureCleared=xATSGeneratorVeryLowOilPressureCleared, airFMAlarmType=airFMAlarmType, airIRRP100GroupConfigRuntimeBalancingEnable=airIRRP100GroupConfigRuntimeBalancingEnable, airIRmPmPWWHeatingRunning=airIRmPmPWWHeatingRunning, isxModularDistSysOutputVoltageNominalLineToNeutral=isxModularDistSysOutputVoltageNominalLineToNeutral, xATSGeneratorBatteryChargerCleared=xATSGeneratorBatteryChargerCleared, rPDUOutletControlOutletCommand=rPDUOutletControlOutletCommand, airFMModBlwr1HeatsinkTempF=airFMModBlwr1HeatsinkTempF, accessPXConfigBeaconLocation=accessPXConfigBeaconLocation, coolingUnitStatusAnalogTableIndex=coolingUnitStatusAnalogTableIndex, airIRmPmDrycooler2Hysteresis=airIRmPmDrycooler2Hysteresis, upsBasicIdent=upsBasicIdent, upsDiagBatteryIndex=upsDiagBatteryIndex, dm3ConfigRect1ofNAlarm=dm3ConfigRect1ofNAlarm, airIRmPmSupplyAirHumidity=airIRmPmSupplyAirHumidity, airFMSysRemoteSensorData=airFMSysRemoteSensorData, apcDcBusOverVoltage=apcDcBusOverVoltage, isxModularPduDeviceTransformerPresent=isxModularPduDeviceTransformerPresent, airFMModServIntBlwr1Reset=airFMModServIntBlwr1Reset, airFMModServIntResetModuleIndex=airFMModServIntResetModuleIndex, isxModularDistModuleOutputCableLength=isxModularDistModuleOutputCableLength, upsDiagSubSysNetworkComCardTable=upsDiagSubSysNetworkComCardTable, airIRG3CMConfigStopOnCoolFail=airIRG3CMConfigStopOnCoolFail, airIRRCUnitStatusFilterDPUS=airIRRCUnitStatusFilterDPUS, uioInputContactStatusPortID=uioInputContactStatusPortID, atsConfigPreferredSource=atsConfigPreferredSource, isxModularDistModuleOutputThresholdMin=isxModularDistModuleOutputThresholdMin, xATSTestingStatusProfileUnloadedTime=xATSTestingStatusProfileUnloadedTime, memSensorsConfigModuleNumber=memSensorsConfigModuleNumber, isxModularDistSysCurrentThresholdMin=isxModularDistSysCurrentThresholdMin, rPDU2SensorTempHumidityConfigModule=rPDU2SensorTempHumidityConfigModule, iemLowHumidThresholdViolationCleared=iemLowHumidThresholdViolationCleared, xATSIdentProductName=xATSIdentProductName, xPDUSystemOutputOverCurrentNeutralThreshold=xPDUSystemOutputOverCurrentNeutralThreshold, airFMSysDehumState=airFMSysDehumState, xATSS1BadPhaseRotationCleared=xATSS1BadPhaseRotationCleared, airIRmPmFan3ManOpSpeed=airIRmPmFan3ManOpSpeed, airIRRP100UnitStatusRackInletTemperature3US=airIRRP100UnitStatusRackInletTemperature3US, dm3StatusConvCurrent=dm3StatusConvCurrent, battManConfigOhmicTestWaitTime=battManConfigOhmicTestWaitTime, emsIdentSerialNumber=emsIdentSerialNumber, apcEnvLowTempThresholdViolationCleared=apcEnvLowTempThresholdViolationCleared, cpsCardConfTable=cpsCardConfTable, dm3ConfigRectHwVoltAlarm=dm3ConfigRectHwVoltAlarm, upsAdvConfigBypassPhaseLockRequired=upsAdvConfigBypassPhaseLockRequired, upsDiagSubSysSystemPowerSupplyHardwareRev=upsDiagSubSysSystemPowerSupplyHardwareRev, airIRmPmMinLimitSupplyAirTemperature=airIRmPmMinLimitSupplyAirTemperature, airFMSysDehumidify=airFMSysDehumidify, airIRmPmCommon2=airIRmPmCommon2, xPDUDeviceMainInputBreakerRating=xPDUDeviceMainInputBreakerRating, airIRG3RDUStatusOnReadyStandby=airIRG3RDUStatusOnReadyStandby, coolingUnitConfigurationStringAccess=coolingUnitConfigurationStringAccess, upsDiagSubSysDisplayInterfaceCardEntry=upsDiagSubSysDisplayInterfaceCardEntry, upsDiagnosticBatteries=upsDiagnosticBatteries, msvmDeviceConfigChange=msvmDeviceConfigChange, airIRmPmSuctionValve2=airIRmPmSuctionValve2, airIRRP100GroupSetpointsDehumidifyDeadband=airIRRP100GroupSetpointsDehumidifyDeadband, airFMModServIntBlwr2=airFMModServIntBlwr2, isxModularSubfeedMinCurrentThresholdViolationCleared=isxModularSubfeedMinCurrentThresholdViolationCleared, airIRmPmMinLimitSupplyAirHumidity=airIRmPmMinLimitSupplyAirHumidity, xATSSystemOutputPower=xATSSystemOutputPower, airIRG3CMThresholdsTable=airIRG3CMThresholdsTable, rARUConfigEntry=rARUConfigEntry, airFMSysAlarmMapOutput6=airFMSysAlarmMapOutput6, upsDiagTransformerStatus=upsDiagTransformerStatus, dcOutputRelayOn=dcOutputRelayOn, dcHumidityAlarmCleared=dcHumidityAlarmCleared, rPDU2PhaseToPhaseStatusIndex=rPDU2PhaseToPhaseStatusIndex, apcLocalDisplayIdentSerialNumber=apcLocalDisplayIdentSerialNumber, airIRG3GroupStatusMinRackInletTempUS=airIRG3GroupStatusMinRackInletTempUS, uioInputContact=uioInputContact, isxcInformationalAlarm=isxcInformationalAlarm, dm3ConfigRectLowVoltAlarm=dm3ConfigRectLowVoltAlarm, airIRmPmPump4MaxAdjust=airIRmPmPump4MaxAdjust, coolingUnitExtendedDiscreteDescription=coolingUnitExtendedDiscreteDescription, xPDUMainInputOverVoltThreshold=xPDUMainInputOverVoltThreshold, apcLocalDisplayConfigContrast=apcLocalDisplayConfigContrast, memSensorsLocation=memSensorsLocation, airIRRP100Unit=airIRRP100Unit, rPDUStatusPhaseTable=rPDUStatusPhaseTable, battManString1BatteryCalibIndex=battManString1BatteryCalibIndex, battManConfigMaxPilotTempC=battManConfigMaxPilotTempC, airIRGen3=airIRGen3, cpsSerialPortSpeed=cpsSerialPortSpeed, upsInverterFaultCleared=upsInverterFaultCleared, airFMModServIntComp1=airFMModServIntComp1, emsOutletStateAbnormal=emsOutletStateAbnormal, apcRelockTimeoutCleared=apcRelockTimeoutCleared, airIRRP500UnitStatusReheatOutput=airIRRP500UnitStatusReheatOutput, airIRRCUnitStatusOutputState=airIRRCUnitStatusOutputState, rPDUOverload=rPDUOverload, upsSCGMultiCastIP=upsSCGMultiCastIP, airIRSCGroupStatusMinRackInletTempUS=airIRSCGroupStatusMinRackInletTempUS, dm3ConfigConvDiagAlarm=dm3ConfigConvDiagAlarm, coolingUnitConfigurationAnalog=coolingUnitConfigurationAnalog, atsRMSUnderVoltage=atsRMSUnderVoltage, airIRmPmReturnAirTemperatureTooLow=airIRmPmReturnAirTemperatureTooLow, xATSS1BadPhaseBalanceCleared=xATSS1BadPhaseBalanceCleared, apcKeyOverrideUnlocked=apcKeyOverrideUnlocked, airIRmPmDrycooler1Running=airIRmPmDrycooler1Running, atsStatusPlus12VPowerSupply=atsStatusPlus12VPowerSupply, xATSGeneratorOutputPhaseCurrent=xATSGeneratorOutputPhaseCurrent, airIRSCUnitStatusSupplyAirTempUS=airIRSCUnitStatusSupplyAirTempUS, xATSGeneratorHighCoolantTempAlarmCleared=xATSGeneratorHighCoolantTempAlarmCleared, airIRSCUnitSetptsCoolDeadbandMetric=airIRSCUnitSetptsCoolDeadbandMetric, airIRG2RDT2StatusHotGasBypassValvePos=airIRG2RDT2StatusHotGasBypassValvePos, dm3StatusInRlyStatus=dm3StatusInRlyStatus, airIRRP100GroupStatusMaxRackInletTempMetric=airIRRP100GroupStatusMaxRackInletTempMetric, isxModularDistSysPowerTable=isxModularDistSysPowerTable, upsAdvInputLineVoltage=upsAdvInputLineVoltage, dm3ConfigConvHighVoltThresh=dm3ConfigConvHighVoltThresh, emsOutletControlOutletCommand=emsOutletControlOutletCommand, rPDU2DeviceConfigOutletsEnergyReset=rPDU2DeviceConfigOutletsEnergyReset, airIRmPmSupplyAirTemperatureC=airIRmPmSupplyAirTemperatureC, sPDUOutletConfigMSPall=sPDUOutletConfigMSPall, atsStatusDeviceStatus=atsStatusDeviceStatus, coolingUnitConfigurationStringTableSize=coolingUnitConfigurationStringTableSize, airIRmPmNumberOfExternalAlarmInputs=airIRmPmNumberOfExternalAlarmInputs, memInputsStatusAlarmStatus=memInputsStatusAlarmStatus, upsDiagTransformer=upsDiagTransformer, emStatusCommStatus=emStatusCommStatus, apcAnalogInputLowThresholdViolationCleared=apcAnalogInputLowThresholdViolationCleared, sPDUOutletControlMSPName=sPDUOutletControlMSPName, airIRSCUnitStatusCondOutletTempUS=airIRSCUnitStatusCondOutletTempUS, xATSSwitchTimersRemainingTime=xATSSwitchTimersRemainingTime, airIRmPmCommon1=airIRmPmCommon1, smwInformationalCondition=smwInformationalCondition, rARUFanStatusFanOperatingStatus=rARUFanStatusFanOperatingStatus, memBeaconStatusBeaconLocation=memBeaconStatusBeaconLocation, airIRRP100UnitServiceIntervals=airIRRP100UnitServiceIntervals, airIRmPmCmp1HysteresisWinterK=airIRmPmCmp1HysteresisWinterK, airFMSysAlarmMapMainModLowAirFlow=airFMSysAlarmMapMainModLowAirFlow, emsSensorFaultCleared=emsSensorFaultCleared, rPDUCancelPendingCommand=rPDUCancelPendingCommand, airFMModRHEntry=airFMModRHEntry, iemConfigProbeMaxTempThreshold=iemConfigProbeMaxTempThreshold, airFMSysAlarmMapMainModHighFltrDP=airFMSysAlarmMapMainModHighFltrDP, xPDUOutputVoltageLowAlarmCleared=xPDUOutputVoltageLowAlarmCleared, xATSGeneratorLowFuelLevelAlarm=xATSGeneratorLowFuelLevelAlarm, rPDULoadBankConfigTable=rPDULoadBankConfigTable, dm3ConfigFusesTable=dm3ConfigFusesTable, emStatusContactsNumContacts=emStatusContactsNumContacts, airIRmPmNumberOfDehumidifiers=airIRmPmNumberOfDehumidifiers, xATSSource1Index=xATSSource1Index, airIRmPmSupplyAirTemperatureTooLow=airIRmPmSupplyAirTemperatureTooLow, emsAlarmDeviceControl=emsAlarmDeviceControl, airFMGroupFailoverModAirBlockInterlockOpen=airFMGroupFailoverModAirBlockInterlockOpen, upsBypassRelayFaultCleared=upsBypassRelayFaultCleared, upsAdvBatteryCapacity=upsAdvBatteryCapacity, airIRmPmMinLimitReturnAirTemperatureF=airIRmPmMinLimitReturnAirTemperatureF, airIRRP100UnitStatusOutputState=airIRRP100UnitStatusOutputState, airFMGroupSysIPAddress=airFMGroupSysIPAddress, atsCalibrationPowerSupplyVoltages=atsCalibrationPowerSupplyVoltages, memModulesStatusTable=memModulesStatusTable, airFMSysAvgReturnTempC=airFMSysAvgReturnTempC, emsOutletControlOutletIndex=emsOutletControlOutletIndex, airFMModSupplyHum=airFMModSupplyHum, accessPXConfigCardReaderEnableDisableAction=accessPXConfigCardReaderEnableDisableAction, upsOutletGroupConfigPowerOnDelay=upsOutletGroupConfigPowerOnDelay, upsOutletGroupConfigLoadShedControlInOverload=upsOutletGroupConfigLoadShedControlInOverload, emsIdent=emsIdent, rPDUIdentName=rPDUIdentName, rARUStatusAruMasterControl=rARUStatusAruMasterControl, battManString2ResponseTestChangeTableSize=battManString2ResponseTestChangeTableSize, dm3StatusRectCurrent=dm3StatusRectCurrent, rPDU2BankConfigIndex=rPDU2BankConfigIndex, airIRG3GroupSetpointsCoolSetpointMetric=airIRG3GroupSetpointsCoolSetpointMetric, airIRRCGroupStatusMinRackInletTempMetric=airIRRCGroupStatusMinRackInletTempMetric, memSensorsConfigEntry=memSensorsConfigEntry, airIRRP500GroupSetpointsActiveFlowControlBias=airIRRP500GroupSetpointsActiveFlowControlBias, dm3ConfigSysDescriptionEntry=dm3ConfigSysDescriptionEntry, airFMSysAlarmMapOutput14=airFMSysAlarmMapOutput14, dcTemperatureAlarm=dcTemperatureAlarm, isxModularDistModuleOutputCordIndex=isxModularDistModuleOutputCordIndex, airIRG3CMStatusDeviceIndex=airIRG3CMStatusDeviceIndex, airIRRP500GroupStatusDehumidifyOutput=airIRRP500GroupStatusDehumidifyOutput, xPDUIdentModelNumber=xPDUIdentModelNumber, dm3StatusRectFail=dm3StatusRectFail, airIRRP500GroupConfigNumberofCoolingUnits=airIRRP500GroupConfigNumberofCoolingUnits, sPDUIdentMSPIndex=sPDUIdentMSPIndex, rPDU2SensorDiscreteStatusTable=rPDU2SensorDiscreteStatusTable, atsCalibrationOutput=atsCalibrationOutput, upsBasicConfigNumDevices=upsBasicConfigNumDevices, galaxy7000UPS400kVA=galaxy7000UPS400kVA, battManString1OhmicValueTable=battManString1OhmicValueTable, apcDoorOpened=apcDoorOpened, accessPXConfigFrontDoorMaxOpenTime=accessPXConfigFrontDoorMaxOpenTime, iemStatusProbesNumProbes=iemStatusProbesNumProbes, envHighHumidityThresholdViolation=envHighHumidityThresholdViolation, coolingUnitExtendedAnalogDescription=coolingUnitExtendedAnalogDescription, airIRmPmDehumidificMinWaterTempC=airIRmPmDehumidificMinWaterTempC, airIRRCUnitStatusLeavingFluidTemperatureUS=airIRRCUnitStatusLeavingFluidTemperatureUS, eps=eps, airFMModServIntComp1Reset=airFMModServIntComp1Reset, airIRRP100GroupConfigCoolResetRateI=airIRRP100GroupConfigCoolResetRateI, battManString2ResponseTestCurrentTableSize=battManString2ResponseTestCurrentTableSize)
mibBuilder.exportSymbols("PowerNet-MIB", xATSSwitchStatusEngineStartSignal=xATSSwitchStatusEngineStartSignal, rPDU2PhaseStatusApparentPower=rPDU2PhaseStatusApparentPower, battManUnitStatusTableSize=battManUnitStatusTableSize, xPDUIdentFirmwareAppRev=xPDUIdentFirmwareAppRev, upsPhaseOutputVoltage=upsPhaseOutputVoltage, coolingUnitAbout=coolingUnitAbout, airIRG2GroupConfigLoadAssistEnable=airIRG2GroupConfigLoadAssistEnable, airIRRP100UnitStatusReturnHumidity=airIRRP100UnitStatusReturnHumidity, conPortServAP930x=conPortServAP930x, xATSSwitchSettingsHighVoltageTransferPoint=xATSSwitchSettingsHighVoltageTransferPoint, xATSSwitchStatusOperationalMode=xATSSwitchStatusOperationalMode, emConfigProbeHighHumidEnable=emConfigProbeHighHumidEnable, airIRRCUnitIdentName=airIRRCUnitIdentName, rPDU2PhaseStatusModule=rPDU2PhaseStatusModule, upsHighPrecOutput=upsHighPrecOutput, airIRG3GroupConfigCoolResetRateI=airIRG3GroupConfigCoolResetRateI, apCPSPower=apCPSPower, xPDUBranchBreakerMaxCurrentThreshold=xPDUBranchBreakerMaxCurrentThreshold, xPDUOutputRelayNormalState=xPDUOutputRelayNormalState, airIRRP100UnitServiceIntervalCondensatePump=airIRRP100UnitServiceIntervalCondensatePump, airFMModIdentTable=airFMModIdentTable, airIRmPmDehumidificHysteresis=airIRmPmDehumidificHysteresis, airIRmPmRemoteStop=airIRmPmRemoteStop, airIRRP500UnitConfigCoolCapacity=airIRRP500UnitConfigCoolCapacity, loadBalancerStatus=loadBalancerStatus, airFMSysLowSplyTempC=airFMSysLowSplyTempC, xPDUSystemOutputOverVoltThreshold=xPDUSystemOutputOverVoltThreshold, bmsWarningConditionCleared=bmsWarningConditionCleared, dcmim2StatusSysUpTime=dcmim2StatusSysUpTime, upsDiagSubSysIntBypSwitchManufactureDate=upsDiagSubSysIntBypSwitchManufactureDate, airFMModSuctPresKPa=airFMModSuctPresKPa, sPDUOutletRebootDuration=sPDUOutletRebootDuration, rARUSensorsTemperature=rARUSensorsTemperature, upsAdvBatteryInternalSKU=upsAdvBatteryInternalSKU, symmetraUPS=symmetraUPS, bmsWarningCondition=bmsWarningCondition, pduUPSInputVoltageRestored=pduUPSInputVoltageRestored, dm3StatusLVD=dm3StatusLVD, airIRmPmEEV1TemperatureSensorError=airIRmPmEEV1TemperatureSensorError, airIRmIdentSysOID=airIRmIdentSysOID, emsProbeConfigProbeLTDecTempVariance=emsProbeConfigProbeLTDecTempVariance, airIRG2RDT2StatusFluidValvePos=airIRG2RDT2StatusFluidValvePos, airIRG3GroupStatusAirFlowUS=airIRG3GroupStatusAirFlowUS, airIRmPmSensor10Failure=airIRmPmSensor10Failure, AirIRmStopState=AirIRmStopState, dcmim2ControlRunCapacityBatteryTest=dcmim2ControlRunCapacityBatteryTest, airFMModBlwr1RatedHorsePower=airFMModBlwr1RatedHorsePower, cpsSerialPortParity=cpsSerialPortParity, apcEnvMinHumidityThresholdViolationCleared=apcEnvMinHumidityThresholdViolationCleared, pduContactFaultCleared=pduContactFaultCleared, battMan=battMan, dm3StatusSysRemoteAccess=dm3StatusSysRemoteAccess, mtrapargsString02=mtrapargsString02, battManString2BatteryCellShorted=battManString2BatteryCellShorted, upsDiagComBusInternalRIMStatus=upsDiagComBusInternalRIMStatus, airFMSysAirFltr=airFMSysAirFltr, memModulesConfigModuleNumber=memModulesConfigModuleNumber, emsStatusProbeCount=emsStatusProbeCount, airFMSysHumCtrlMethod=airFMSysHumCtrlMethod, iemRelayFaultCleared=iemRelayFaultCleared, airIRmPmHumidifier1Running=airIRmPmHumidifier1Running, rARUSensorsTempLongDecRateThreshValue=rARUSensorsTempLongDecRateThreshValue, airFMSysInputName=airFMSysInputName, upsDiagSubSysPowerFactorCorrectionStatus=upsDiagSubSysPowerFactorCorrectionStatus, airIRmPmPump2LinearRange=airIRmPmPump2LinearRange, cpsAP930xInfo=cpsAP930xInfo, airIRmPmReheat3Failure=airIRmPmReheat3Failure, sPDUIdentModelNumberMSP=sPDUIdentModelNumberMSP, airIRG2GroupStatusMaxReturnAirTempMetric=airIRG2GroupStatusMaxReturnAirTempMetric, rPDU2DeviceControlModule=rPDU2DeviceControlModule, aruFanPoorPerformanceAlarm=aruFanPoorPerformanceAlarm, memBeaconStatusBeaconName=memBeaconStatusBeaconName, airIRSCUnitConfigOutputNormalState=airIRSCUnitConfigOutputNormalState, airIRmPmUnitTemperature=airIRmPmUnitTemperature, airFMSysAlarmMapMainModOutputIndex=airFMSysAlarmMapMainModOutputIndex, airFMSysHighSplyTempF=airFMSysHighSplyTempF, apcDeviceConnected=apcDeviceConnected, smwWarningCondition=smwWarningCondition, airFMSysAlarmMapSystemOn=airFMSysAlarmMapSystemOn, airIRRCGroupStatusMinRackInletTempUS=airIRRCGroupStatusMinRackInletTempUS, airIRRP500UnitStatusReturnHumidity=airIRRP500UnitStatusReturnHumidity, airIRG2RDT2ConfigInputNormalState=airIRG2RDT2ConfigInputNormalState, upsPfcInputRelayFailure=upsPfcInputRelayFailure, dcmim2ConfigSystem=dcmim2ConfigSystem, airIRRP100UnitRunHoursCondensatePump=airIRRP100UnitRunHoursCondensatePump, galaxy300UPS20kVA33=galaxy300UPS20kVA33, xATSTestingResultsLastResult=xATSTestingResultsLastResult, airIRmPmSensor6Defect=airIRmPmSensor6Defect, subfeedBreakerRating=subfeedBreakerRating, gutorSDC=gutorSDC, airIRG3GroupStatusTable=airIRG3GroupStatusTable, atsConfigPhaseOverLoadThreshold=atsConfigPhaseOverLoadThreshold, airIRG3RDUConfigStopOnLeakDetect=airIRG3RDUConfigStopOnLeakDetect, airIRRP500UnitRunHoursHeater2=airIRRP500UnitRunHoursHeater2, sPDUOutletName=sPDUOutletName, airIRRP500GroupStatusMinRackInletTempMetric=airIRRP500GroupStatusMinRackInletTempMetric, airIRG3GroupStatusAvgAirFlowUS=airIRG3GroupStatusAvgAirFlowUS, airIRmPmDrycooler4ManOpRunning=airIRmPmDrycooler4ManOpRunning, memOutletStatusTable=memOutletStatusTable, airIRRCUnitRunHoursFanPowerSupplyRight=airIRRCUnitRunHoursFanPowerSupplyRight, rPDUCommunicationLost=rPDUCommunicationLost, apCPSPw2=apCPSPw2, airFMGroupSysIndex=airFMGroupSysIndex, airFMGroupLoadShareReheatThreshC=airFMGroupLoadShareReheatThreshC, upsDiagBatteryTableSize=upsDiagBatteryTableSize, rPDUOutletConfigMonitoredIndex=rPDUOutletConfigMonitoredIndex, airFMModBlwr2ElOvMode=airFMModBlwr2ElOvMode, airIRSCGroup=airIRSCGroup, airFMSysAlarmMapMainModTable=airFMSysAlarmMapMainModTable, cpsCardStatusEntry=cpsCardStatusEntry, airFMSysSetup=airFMSysSetup, xPDUDeviceServiceType=xPDUDeviceServiceType, rPDU2SensorTempHumidityConfigNumber=rPDU2SensorTempHumidityConfigNumber, upsParallelOutputActivePowerTable=upsParallelOutputActivePowerTable, dm3StatusConvTable=dm3StatusConvTable, airIRmPmFilter1Clogged=airIRmPmFilter1Clogged, airIRmPmMinLimitWaterTemperature=airIRmPmMinLimitWaterTemperature, atsPowerSupplyVoltageCalibrationFactor=atsPowerSupplyVoltageCalibrationFactor, airIRmPmEheating1HysteresisF=airIRmPmEheating1HysteresisF, xPDUSystemBreakerEntry=xPDUSystemBreakerEntry, airFMStatusSystemRemoteAvgTempC=airFMStatusSystemRemoteAvgTempC, airFMSysAlarmMapMainModCoolFail=airFMSysAlarmMapMainModCoolFail, mtrapargsString=mtrapargsString, airIRRCGroupSetpointsFanSpeedControl=airIRRCGroupSetpointsFanSpeedControl, userAdded=userAdded, rPDU2OutletMeteredStatusPeakPowerStartTime=rPDU2OutletMeteredStatusPeakPowerStartTime, iemStatusRelaysNumRelays=iemStatusRelaysNumRelays, airIRRP500UnitThresholdsReturnAirHighTempMetric=airIRRP500UnitThresholdsReturnAirHighTempMetric, airIRRP500GroupStatusHumidifyOutput=airIRRP500GroupStatusHumidifyOutput, battManString1BatteryCalibTable=battManString1BatteryCalibTable, airFMModBlwr2Poles=airFMModBlwr2Poles, battManResetLowestDischargeVoltages=battManResetLowestDischargeVoltages, dm3StatusAlarms=dm3StatusAlarms, airIRmPmFan3ManOpRunning=airIRmPmFan3ManOpRunning, powerNetSoftwareSystem=powerNetSoftwareSystem, upsDiagSubFeedPhaseIndex=upsDiagSubFeedPhaseIndex, rPDU2SensorTempHumidityStatusTempF=rPDU2SensorTempHumidityStatusTempF, airIRG3RDUStatusCondenserInletTempUS=airIRG3RDUStatusCondenserInletTempUS, xATSSystemOutputUnderCurrentThreshold=xATSSystemOutputUnderCurrentThreshold, mupsCommunicationLost=mupsCommunicationLost, xATSGeneratorVeryLowCoolantLevelAlarmCleared=xATSGeneratorVeryLowCoolantLevelAlarmCleared, xATSGeneratorSettingsCrankCycleEnable=xATSGeneratorSettingsCrankCycleEnable, xATSGeneratorOutputTableSize=xATSGeneratorOutputTableSize, pduCircuitPanelInputUndervoltageCleared=pduCircuitPanelInputUndervoltageCleared, upsPhaseInputFrequency=upsPhaseInputFrequency, isxModularDistModuleOutputEntry=isxModularDistModuleOutputEntry, airIRRCUnitConfigOutputSource=airIRRCUnitConfigOutputSource, airIRmPmUnitCondensationPressure2=airIRmPmUnitCondensationPressure2, airIRG3RDUStatusPumpChangeOverInterval=airIRG3RDUStatusPumpChangeOverInterval, memSensorsStatusTableSize=memSensorsStatusTableSize, upsAdvInput=upsAdvInput, cpsCardConfPower=cpsCardConfPower, upsDiagSubSysInverterSerialNum=upsDiagSubSysInverterSerialNum, airIRSCUnitRunHoursEvaporatorFan1=airIRSCUnitRunHoursEvaporatorFan1, airIRRP500UnitThresholdsRackInletHighTempUS=airIRRP500UnitThresholdsRackInletHighTempUS, rPDULoadBankConfigLowLoadThreshold=rPDULoadBankConfigLowLoadThreshold, dm3StatusSysConvType=dm3StatusSysConvType, upsHighPrecOutputFrequency=upsHighPrecOutputFrequency, sPDUOutletConfigMSPmupsOutletName=sPDUOutletConfigMSPmupsOutletName, upsAdvConfigLowBatteryRunTime=upsAdvConfigLowBatteryRunTime, airIRmPmHumidifier1=airIRmPmHumidifier1, airIRmPmEheating4=airIRmPmEheating4, iemStatusContactStatus=iemStatusContactStatus, rPDU2SensorTempHumidityConfigIndex=rPDU2SensorTempHumidityConfigIndex, isxModularTotalOutputCurrentLowThresholdViolation=isxModularTotalOutputCurrentLowThresholdViolation, apcUpsConfigFieldOID=apcUpsConfigFieldOID, xATSGeneratorOutputFrequency=xATSGeneratorOutputFrequency, rPDULoadBankConfigAlarm=rPDULoadBankConfigAlarm, dm3ConfigConvAlarms=dm3ConfigConvAlarms, upsAdvConfigDipSwitchEntry=upsAdvConfigDipSwitchEntry, isxModularDistSysVoltageLtoL=isxModularDistSysVoltageLtoL, upsAdvInputMaxLineVoltage=upsAdvInputMaxLineVoltage, airIRmPmPump1LinearRangeK=airIRmPmPump1LinearRangeK, rPDULoadPhaseConfigNearOverloadThreshold=rPDULoadPhaseConfigNearOverloadThreshold, airFMSysDXActualCoolDehum=airFMSysDXActualCoolDehum, airIRG3CMRunHoursTable=airIRG3CMRunHoursTable, galaxy5500UPS60KVA=galaxy5500UPS60KVA, xATSGeneratorAdvStatusBatteryVoltage=xATSGeneratorAdvStatusBatteryVoltage, generalDeviceEvent=generalDeviceEvent, airIRSCGroupConfigNumberofCoolingUnits=airIRSCGroupConfigNumberofCoolingUnits, xATSSystemOutput=xATSSystemOutput, airIRRP500UnitConfigHumidifyEnable=airIRRP500UnitConfigHumidifyEnable, airFMSysAlarmMapSysTable=airFMSysAlarmMapSysTable, airIRG2RDT2StatusCoolOutput=airIRG2RDT2StatusCoolOutput, xPDUTransformTempStatus=xPDUTransformTempStatus, cpsAP930x=cpsAP930x, symmetraPx160kVA=symmetraPx160kVA, deviceIndex=deviceIndex, airIRSCUnitStatusAirFlowUS=airIRSCUnitStatusAirFlowUS, isxModularDistSubFeedLoadingPower=isxModularDistSubFeedLoadingPower, software=software, emsAlarmDeviceStatusEntry=emsAlarmDeviceStatusEntry, airIRmPmUnitEvaporationTemperature2F=airIRmPmUnitEvaporationTemperature2F, xATSGeneratorLowRunTimeAlarm=xATSGeneratorLowRunTimeAlarm, xATSGeneratorVeryHighCoolantTempAlarm=xATSGeneratorVeryHighCoolantTempAlarm, airFMGroupSysRolesTable=airFMGroupSysRolesTable, dm3StatusBattery=dm3StatusBattery, airIRmPmLouver2Position=airIRmPmLouver2Position, serverStatus=serverStatus, upsAdvInputTotalActivePower=upsAdvInputTotalActivePower, airIRSCUnitConfig=airIRSCUnitConfig, dm3StatusLVDIndex=dm3StatusLVDIndex, isxModularDistModuleInfoModelNumber=isxModularDistModuleInfoModelNumber, airIRRP100UnitIdentLocation=airIRRP100UnitIdentLocation, rPDU2SensorTempHumidityConfigTempMaxThreshC=rPDU2SensorTempHumidityConfigTempMaxThreshC, airIRRP500GroupConfigAltitudeUS=airIRRP500GroupConfigAltitudeUS, airIRmPmPump3ControlFactor=airIRmPmPump3ControlFactor, battManStringTableSize=battManStringTableSize, airFMSysEconIsolVlvOpenDelay=airFMSysEconIsolVlvOpenDelay, airIRSCUnitStatusCompressor=airIRSCUnitStatusCompressor, upsBasicSystemInverterStatus=upsBasicSystemInverterStatus, uioSensorStatusSensorName=uioSensorStatusSensorName, isxModularDistSubFeedInfoBreakerRating=isxModularDistSubFeedInfoBreakerRating, xATSGeneratorSettingsFrequencyAdjust=xATSGeneratorSettingsFrequencyAdjust, airIRSCGroupSetptsSupplyAirSetpointUS=airIRSCGroupSetptsSupplyAirSetpointUS, airIRmPmGlobalZoneData=airIRmPmGlobalZoneData, rARUStatusAruTempOvrdEnableDisable=rARUStatusAruTempOvrdEnableDisable, isxModularSubfeedLowCurrentThresholdViolationCleared=isxModularSubfeedLowCurrentThresholdViolationCleared, dm3ConfigSysRemoteAccess=dm3ConfigSysRemoteAccess, atsOutputBankPower=atsOutputBankPower, airFMSysAlarmMapExpMod1LowSupplyTemp=airFMSysAlarmMapExpMod1LowSupplyTemp, ceInformationalCondition=ceInformationalCondition, airFMModBlwr1ChokeTempF=airFMModBlwr1ChokeTempF, emsOutputRelayControlOutputRelayName=emsOutputRelayControlOutputRelayName, rPDU2PhaseToPhaseStatusVoltage2to3=rPDU2PhaseToPhaseStatusVoltage2to3, apcOutputShortCircuitCleared=apcOutputShortCircuitCleared, airFMModCondPump=airFMModCondPump, upsAdvConfigPassword=upsAdvConfigPassword, airIRmPmLocalUPS=airIRmPmLocalUPS, rPDU2OutletSwitchedPropertiesModule=rPDU2OutletSwitchedPropertiesModule, rPDULoadDevBankTable=rPDULoadDevBankTable, smartUPS3Phase15kVA=smartUPS3Phase15kVA, sPDUOutletConfigMSPannun=sPDUOutletConfigMSPannun, upsAdvOutputApparentPower=upsAdvOutputApparentPower, xATSSource2Rotation=xATSSource2Rotation, battManString1BatteryIndex=battManString1BatteryIndex, upsPhaseOutputMaxPercentPower=upsPhaseOutputMaxPercentPower, upsParallelInputCurrent=upsParallelInputCurrent, apcBeaconConnected=apcBeaconConnected, airIRRP100UnitServiceIntervalCondensatePumpAlarm=airIRRP100UnitServiceIntervalCondensatePumpAlarm, airIRmPmSensor3Defect=airIRmPmSensor3Defect, rPDUOutletConfigMonitoredLowLoadThreshold=rPDUOutletConfigMonitoredLowLoadThreshold, sPDUIdentVMTable=sPDUIdentVMTable, airIRSCGroupStatusMaxReturnAirTempMetric=airIRSCGroupStatusMaxReturnAirTempMetric, sPDUOutletConfigMSPgsOutletCtrlMode=sPDUOutletConfigMSPgsOutletCtrlMode, dm3StatusFusesStatus=dm3StatusFusesStatus, rPDU2PhaseToPhase=rPDU2PhaseToPhase, airFMStatus=airFMStatus, battManString2BatteryInterTierOhmicValue=battManString2BatteryInterTierOhmicValue, upsHasNoValidFirmwareCleared=upsHasNoValidFirmwareCleared, airIRmPmSensor6Failure=airIRmPmSensor6Failure, upsInformationalCondition=upsInformationalCondition, xATSSystemOutputAlarmDelayThreshold=xATSSystemOutputAlarmDelayThreshold, upsDiagSubSysExternalSwitchGearSerialNum=upsDiagSubSysExternalSwitchGearSerialNum)
mibBuilder.exportSymbols("PowerNet-MIB", coolingUnitStatusAnalog=coolingUnitStatusAnalog, airFMStatusModuleTableSize=airFMStatusModuleTableSize, upsDiagIMSlaveFirmwareRev=upsDiagIMSlaveFirmwareRev, iemConfigProbeHighTempThreshold=iemConfigProbeHighTempThreshold, xATSGeneratorLowOilPressure=xATSGeneratorLowOilPressure, dcmim2StatusAlarmsText=dcmim2StatusAlarmsText, xPDUOutputRelaysNumRelays=xPDUOutputRelaysNumRelays, airFMSysHumEssFunction=airFMSysHumEssFunction, airIRSCGroupConfigCapacityControlType=airIRSCGroupConfigCapacityControlType, chargerFailure=chargerFailure, isxModularSubfeedMaxCurrentThresholdViolation=isxModularSubfeedMaxCurrentThresholdViolation, rPDU2PhaseToPhaseStatusVoltage1to2=rPDU2PhaseToPhaseStatusVoltage1to2, xATSSwitchStatisticsValue=xATSSwitchStatisticsValue, airIRG3CMServiceIntervalsTable=airIRG3CMServiceIntervalsTable, isxModularOutputVoltageHighThresholdViolationCleared=isxModularOutputVoltageHighThresholdViolationCleared, battManInputContactIndex=battManInputContactIndex, airIRmPmDehumidificMaxWaterTemp=airIRmPmDehumidificMaxWaterTemp, airIRRP100UnitStatusAirFlowMetric=airIRRP100UnitStatusAirFlowMetric, xPDUBypassInputVoltageLtoL=xPDUBypassInputVoltageLtoL, upsBatteryOverVoltage=upsBatteryOverVoltage, airFMModBlwr2CapLife=airFMModBlwr2CapLife, airIRG3CMStatusRackInletTempMetric=airIRG3CMStatusRackInletTempMetric, ais5000UPS20kVA=ais5000UPS20kVA, dm3StatusBreakersTable=dm3StatusBreakersTable, rintelligenceModuleRemoved=rintelligenceModuleRemoved, xATSSource1=xATSSource1, airIRmPmSensor11Defect=airIRmPmSensor11Defect, airFMModFirmwareRev=airFMModFirmwareRev, airIRRCUnitStatusRackInletTempMetric=airIRRCUnitStatusRackInletTempMetric, dm3ConfigBattMaxRecharge=dm3ConfigBattMaxRecharge, rPDU2OutletMeteredStatusPeakPowerTimestamp=rPDU2OutletMeteredStatusPeakPowerTimestamp, upsOutletGroupControlOutletType=upsOutletGroupControlOutletType, airFMSysAlarmMapMainMod=airFMSysAlarmMapMainMod, sPDUMasterControlVMTableSize=sPDUMasterControlVMTableSize, rPDUOutletControlEntry=rPDUOutletControlEntry, airIRRP100UnitConfig=airIRRP100UnitConfig, airFMAlarmConditionsIndex=airFMAlarmConditionsIndex, upsDiagSubSysExternalSwitchGearStatus=upsDiagSubSysExternalSwitchGearStatus, apcAdConverterFaultCleared=apcAdConverterFaultCleared, rPDU2PhaseStatusPeakCurrent=rPDU2PhaseStatusPeakCurrent, dm3StatusBattTempSanity=dm3StatusBattTempSanity, uioSensorStatusSensorID=uioSensorStatusSensorID, battManSystemStatus=battManSystemStatus, dm3StatusRectPhyAddr=dm3StatusRectPhyAddr, airFMModRHBlwr1=airFMModRHBlwr1, airIRmPmUnitOverloadSwitch=airIRmPmUnitOverloadSwitch, upsAdvState=upsAdvState, upsDiagSubSysDCCircuitBreakerTableSize=upsDiagSubSysDCCircuitBreakerTableSize, airIRmPmNumberOfFans=airIRmPmNumberOfFans, upsIntegratedATSSourceTable=upsIntegratedATSSourceTable, apcDeviceDisconnected=apcDeviceDisconnected, upsDiagSubSysNetworkComCardIndex=upsDiagSubSysNetworkComCardIndex, airIRRCUnitIdentSerialNumber=airIRRCUnitIdentSerialNumber, powerNetSoftwareSystemDescription=powerNetSoftwareSystemDescription, sPDUIdentSerialNumberVM=sPDUIdentSerialNumberVM, envAlinkCommunicationEstablished=envAlinkCommunicationEstablished, upsFirmwareUpdateStarted=upsFirmwareUpdateStarted, dm3StatusSysRectVoltage=dm3StatusSysRectVoltage, airIRmPmHumidifier1Type=airIRmPmHumidifier1Type, airFMModBlwr1ActFreq=airFMModBlwr1ActFreq, memInputAnalogCalibrationPoint2=memInputAnalogCalibrationPoint2, airIRG2GroupSetptsSupplyAirSetpointUS=airIRG2GroupSetptsSupplyAirSetpointUS, airFMSysAlarmMapOutput10=airFMSysAlarmMapOutput10, xATSGeneratorStatus=xATSGeneratorStatus, ais5000UPS40kVA=ais5000UPS40kVA, xPDUBranchBreakerOverCurrentThreshold=xPDUBranchBreakerOverCurrentThreshold, mUpsContactEntry=mUpsContactEntry, airIRG3GroupStatusMaxReturnAirTempUS=airIRG3GroupStatusMaxReturnAirTempUS, iemConfigRelayNumber=iemConfigRelayNumber, emConfigContactNormalState=emConfigContactNormalState, xPDUBranchBreakerCurrent=xPDUBranchBreakerCurrent, serialPort=serialPort, battManConfigMinCellVoltage=battManConfigMinCellVoltage, apcInformationalDiscreteInputContactStateAbnormal=apcInformationalDiscreteInputContactStateAbnormal, airPAReturnTempF=airPAReturnTempF, airIRmPmCmp2StartTempWinter=airIRmPmCmp2StartTempWinter, airIRSCUnitStatusAirFlowMetric=airIRSCUnitStatusAirFlowMetric, dm3ConfigRectFailAlarm=dm3ConfigRectFailAlarm, isxModularDistInfoTableSize=isxModularDistInfoTableSize, dm3ConfigLVDEnable=dm3ConfigLVDEnable, dm3ConfigBattLowTempAlarm=dm3ConfigBattLowTempAlarm, rARUFanStatusTable=rARUFanStatusTable, dm3ConfigConvCurrLimitAlarm=dm3ConfigConvCurrLimitAlarm, memOutletStatusOutletName=memOutletStatusOutletName, memBeaconConfigTable=memBeaconConfigTable, xATSSwitchSettingsMaxSyncTime=xATSSwitchSettingsMaxSyncTime, rPDUOutletDevMonitoredOutlets=rPDUOutletDevMonitoredOutlets, xATSGeneratorSettingsCrankTime=xATSGeneratorSettingsCrankTime, dcmim2ConfigLVDReset=dcmim2ConfigLVDReset, airIRG2GroupStatusAirFlowMetric=airIRG2GroupStatusAirFlowMetric, airIRmPmOutsideAirHumidity=airIRmPmOutsideAirHumidity, apcAnalogInputMinThresholdViolationCleared=apcAnalogInputMinThresholdViolationCleared, battManString2BatteryOpenFuseOrConnection=battManString2BatteryOpenFuseOrConnection, airIRmPmSetpointTemperatureDay=airIRmPmSetpointTemperatureDay, airIRRP500GroupStatusMinRackInletTempUS=airIRRP500GroupStatusMinRackInletTempUS, airFMModBlwr1ElOvMode=airFMModBlwr1ElOvMode, iemHighTempThresholdViolation=iemHighTempThresholdViolation, rPDU2SensorDiscreteConfigModule=rPDU2SensorDiscreteConfigModule, airFMSysAlarmMapExpMod2MaintReq=airFMSysAlarmMapExpMod2MaintReq, isxModularDistModuleBreakerTable=isxModularDistModuleBreakerTable, iemStatusProbeMinHumidViolation=iemStatusProbeMinHumidViolation, airIRmPmUnitCondensationTemperature2=airIRmPmUnitCondensationTemperature2, airIRG2RDT2StatusSupplyAirTempMetric=airIRG2RDT2StatusSupplyAirTempMetric, upsBatteryTempSensorFault=upsBatteryTempSensorFault, airIRmPmSensor19Defect=airIRmPmSensor19Defect, cpsSerialPortRemoteIP=cpsSerialPortRemoteIP, memInputsStatusTableSize=memInputsStatusTableSize, atsInputTableIndex=atsInputTableIndex, emsSensorControlSensorCommand=emsSensorControlSensorCommand, battManConfigMaxPilotTempF=battManConfigMaxPilotTempF, upsDiagSubSysChargerIndex=upsDiagSubSysChargerIndex, apcEnvHighTempThresholdViolation=apcEnvHighTempThresholdViolation, airIRRP500UnitThresholdsSupplyAirHighTempMetric=airIRRP500UnitThresholdsSupplyAirHighTempMetric, airIRmPmEheating3Hysteresis=airIRmPmEheating3Hysteresis, emsOutputRelayConfigOutputRelayIndex=emsOutputRelayConfigOutputRelayIndex, dm3ConfigLVDOpenAlarm=dm3ConfigLVDOpenAlarm, rPDUIdentDeviceOutletLayout=rPDUIdentDeviceOutletLayout, airIRmPmGECWvalveLinearRangeK=airIRmPmGECWvalveLinearRangeK, airIRRP100UnitConfigHumidifierControl=airIRRP100UnitConfigHumidifierControl, dm3StatusRectPresent=dm3StatusRectPresent, rPDUPhaseConfigChange=rPDUPhaseConfigChange, sPDUOutletConfigMSPmupsZone3=sPDUOutletConfigMSPmupsZone3, coolingUnitConfigurationString=coolingUnitConfigurationString, airFMGroupLoadShareCoolThreshC=airFMGroupLoadShareCoolThreshC, upsAdvBatteryCurrentTableIndex=upsAdvBatteryCurrentTableIndex, dm3StatusConvState=dm3StatusConvState, xATSSwitchStatusSelectedSource=xATSSwitchStatusSelectedSource, airIRSCUnitStatusOutputState=airIRSCUnitStatusOutputState, sPDUMasterControlSwitch=sPDUMasterControlSwitch, galaxy300UPS40kVA33=galaxy300UPS40kVA33, rPDUStatusOutletState=rPDUStatusOutletState, apcRegisteredUserConfigChange=apcRegisteredUserConfigChange, airIRRP100UnitServiceIntervalHumidifierAlarm=airIRRP100UnitServiceIntervalHumidifierAlarm, pduContactFault=pduContactFault, battManString2BatteryVoltage=battManString2BatteryVoltage, sPDUIdentMSP=sPDUIdentMSP, rsCommunicationEstablished=rsCommunicationEstablished, upsParallelOutputTotalPercentLoad=upsParallelOutputTotalPercentLoad, xATSOutputFrequencyAlarmCleared=xATSOutputFrequencyAlarmCleared, memOutputConfigOutputNumber=memOutputConfigOutputNumber, battManString2BatteryTable=battManString2BatteryTable, xPDUInputContactCurrentState=xPDUInputContactCurrentState, sPDUIdentFirmwareRevMSP=sPDUIdentFirmwareRevMSP, cpsInfoSerialPortSigRI=cpsInfoSerialPortSigRI, upsAdvInputActivePower=upsAdvInputActivePower, airFMSysReheatDeadbandC=airFMSysReheatDeadbandC, dm3StatusSysRectCurrent=dm3StatusSysRectCurrent, dcmim2ConfigLVDState=dcmim2ConfigLVDState, atsInputMaxCurrent=atsInputMaxCurrent, battManString1ResponseTestChangeData=battManString1ResponseTestChangeData, upsDiagSubSysBattMonitorHardwareRev=upsDiagSubSysBattMonitorHardwareRev, airFMSysDehumSetpoint=airFMSysDehumSetpoint, airIRSCUnitStatusReturnAirTempMetric=airIRSCUnitStatusReturnAirTempMetric, airIRmPmSensor2Failure=airIRmPmSensor2Failure, cpsCardStatusFunc=cpsCardStatusFunc, iemStatusRelaysEntry=iemStatusRelaysEntry, emsProbeStatusProbeName=emsProbeStatusProbeName, airFMModHumActualOutput=airFMModHumActualOutput, upsBackfeedRelayFaultCleared=upsBackfeedRelayFaultCleared, rPDU2DeviceStatusEnergyStartTime=rPDU2DeviceStatusEnergyStartTime, airIRSCUnitIdentFirmwareRevision=airIRSCUnitIdentFirmwareRevision, sPDUOutletControlVMEntry=sPDUOutletControlVMEntry, battManProbeRange=battManProbeRange, upsAdvBatteryActualVoltageTableIndex=upsAdvBatteryActualVoltageTableIndex, pduCommunicationEstablished=pduCommunicationEstablished, coolingUnitConfigurationDiscreteValueAsInteger=coolingUnitConfigurationDiscreteValueAsInteger, upsAdvBatteryNumOfBattPacks=upsAdvBatteryNumOfBattPacks, upsAdvConfig=upsAdvConfig, airIRG2RDT2Status=airIRG2RDT2Status, rARUSensorsConfigTable=rARUSensorsConfigTable, battManString2BatteryLowCapacity=battManString2BatteryLowCapacity, emsProbeConfigProbeLTDecTempTime=emsProbeConfigProbeLTDecTempTime, isxModularDistModuleBreakerPhysicalGroup=isxModularDistModuleBreakerPhysicalGroup, airIRRCGroupConfigPctGlycol=airIRRCGroupConfigPctGlycol, xATSGeneratorLowACVEvent=xATSGeneratorLowACVEvent, rPDUOutletConfigMonitoredNumber=rPDUOutletConfigMonitoredNumber, airIRRP500UnitIdentHardwareRevision=airIRRP500UnitIdentHardwareRevision, xATSGeneratorSettings=xATSGeneratorSettings, airIRG3GroupConfigCoolDerivativeD=airIRG3GroupConfigCoolDerivativeD, uioSensor=uioSensor, dm3ConfigConvConfigAlarm=dm3ConfigConvConfigAlarm, airFMSysAlarmMapInput12=airFMSysAlarmMapInput12, uioInputContactStatusTable=uioInputContactStatusTable, upsDiagSubSysInverterIndex=upsDiagSubSysInverterIndex, airIRmPmPump2Failure=airIRmPmPump2Failure, rPDU2PhaseConfigNearOverloadCurrentThreshold=rPDU2PhaseConfigNearOverloadCurrentThreshold, emsOutletStatusTable=emsOutletStatusTable, atsNumInputPhases=atsNumInputPhases, apcInternalCommunicationFault=apcInternalCommunicationFault, upsParallelOutputPhaseTableIndex=upsParallelOutputPhaseTableIndex, upsAdvConfigAllowedSetTable=upsAdvConfigAllowedSetTable, airIRmPmGvalvePreOpeningGrade=airIRmPmGvalvePreOpeningGrade, cpsSerialPortTty=cpsSerialPortTty, galaxy5500UPS30KVA=galaxy5500UPS30KVA, airIRG2RDT2StatusFilterDPUS=airIRG2RDT2StatusFilterDPUS, airIRG2RDT2StatusAirFlowMetric=airIRG2RDT2StatusAirFlowMetric, airPACondenserFan=airPACondenserFan, airIRG3CMThresholdsReturnAirTempHighUS=airIRG3CMThresholdsReturnAirTempHighUS, xPDUIdent=xPDUIdent, airFMGroupFailoverSysSecondarySensorFail=airFMGroupFailoverSysSecondarySensorFail, rPDU2DeviceConfigDeviceEnergyReset=rPDU2DeviceConfigDeviceEnergyReset, battManString1ResponseTestCurrentIndex=battManString1ResponseTestCurrentIndex, airIRRP500UnitConfigUnitRoleOverride=airIRRP500UnitConfigUnitRoleOverride, aruFanPoorPerformanceAlarmCleared=aruFanPoorPerformanceAlarmCleared, cpsSerialPortLogUtmp=cpsSerialPortLogUtmp, isxModularDistSysPower=isxModularDistSysPower, cpsCardConfPort1=cpsCardConfPort1, dm3ConfigBattHighTempThresh=dm3ConfigBattHighTempThresh, airIRmPmFilter2Clogged=airIRmPmFilter2Clogged, gutorWEW=gutorWEW, xATSTestingStatusProfileLoadedTime=xATSTestingStatusProfileLoadedTime, airFMSysAlarmMapExpMod1WaterDetected=airFMSysAlarmMapExpMod1WaterDetected, xPDUUPSInputVoltagePhaseIndex=xPDUUPSInputVoltagePhaseIndex, memSensorsConfigSensorNumber=memSensorsConfigSensorNumber, airIRG3RDURunHoursDeviceIndex=airIRG3RDURunHoursDeviceIndex, apCPSDevId=apCPSDevId, airIRG2IdentUnitSysOID=airIRG2IdentUnitSysOID, atsCalibrationNumOutputs=atsCalibrationNumOutputs, airIRRP100GroupConfigAltitudeMetric=airIRRP100GroupConfigAltitudeMetric, iemConfigContactsNumContacts=iemConfigContactsNumContacts, airFMModBlwr2Table=airFMModBlwr2Table, airFMAlarmConditionsTable=airFMAlarmConditionsTable, memSensorsTemperature=memSensorsTemperature, rPDULoadDevNumBanks=rPDULoadDevNumBanks, rPDU2SensorTempHumidityStatusRelativeHumidity=rPDU2SensorTempHumidityStatusRelativeHumidity, upsAdvConfigMainsSetting=upsAdvConfigMainsSetting, upsDiagSubSysPowerFactorCorrectionEntry=upsDiagSubSysPowerFactorCorrectionEntry, upsPhaseOutputMinCurrent=upsPhaseOutputMinCurrent, airIRG3GroupConfigEntry=airIRG3GroupConfigEntry, xPDUSystemOutputApparentPower=xPDUSystemOutputApparentPower, airFMGroupLoadShareCoolRequests=airFMGroupLoadShareCoolRequests, xATSRemoteStartContactMismatch=xATSRemoteStartContactMismatch, memSensorsName=memSensorsName, emsAlarmDeviceStatusDeviceState=emsAlarmDeviceStatusDeviceState, upsIntegratedATSSourceName=upsIntegratedATSSourceName, iemConfigProbeMaxTempEnable=iemConfigProbeMaxTempEnable, upsAdvOutputStatisticsEntry=upsAdvOutputStatisticsEntry, rPDU2DeviceConfigIndex=rPDU2DeviceConfigIndex, humidityThresholdViolation1=humidityThresholdViolation1, airIRG3GroupTableSize=airIRG3GroupTableSize, atsOutputBankMinPower=atsOutputBankMinPower, upsOutletGroupConfigName=upsOutletGroupConfigName, emStatusProbeHighHumidViolation=emStatusProbeHighHumidViolation, battManString1OhmicValueIndex=battManString1OhmicValueIndex, airIRRP100GroupConfigReheatDerivativeD=airIRRP100GroupConfigReheatDerivativeD, atsSourceStatusOk=atsSourceStatusOk, dm3StatusInputRelays=dm3StatusInputRelays, xATSSource1VoltageLtoL=xATSSource1VoltageLtoL, dcMultRectFailAlarmCleared=dcMultRectFailAlarmCleared, xPDUEpoTestMode=xPDUEpoTestMode, airFMSysCompMinOffTime=airFMSysCompMinOffTime, airIRmPmHumidifier2Alarm20us=airIRmPmHumidifier2Alarm20us, airFMGroupSysRolesEntry=airFMGroupSysRolesEntry, xATSSwitchStatus=xATSSwitchStatus)
mibBuilder.exportSymbols("PowerNet-MIB", galaxy5000UPS100KVA=galaxy5000UPS100KVA, cpsSerialPortBanner=cpsSerialPortBanner, rARUConfigAruRemoteSetpoint=rARUConfigAruRemoteSetpoint, eps6000SSC=eps6000SSC, upsAdvConfigRatedOutputVoltage=upsAdvConfigRatedOutputVoltage, xATSGeneratorStatusRemoteStart=xATSGeneratorStatusRemoteStart, atsOutputMaxCurrent=atsOutputMaxCurrent, iemLowTempThresholdViolation=iemLowTempThresholdViolation, accessPX=accessPX, mUpsEnviron=mUpsEnviron, smartUPS3Phase=smartUPS3Phase, airFMGroupLoadShareCoolThreshF=airFMGroupLoadShareCoolThreshF, xPDUInputContactStateNormal=xPDUInputContactStateNormal, airIRRP100UnitStatusHumidifierWaterConductivity=airIRRP100UnitStatusHumidifierWaterConductivity, mtrapargsOctetString02=mtrapargsOctetString02, xATSIdentDateOfManufacture=xATSIdentDateOfManufacture, rARUFanStatusFanIndex=rARUFanStatusFanIndex, rPDU2DeviceStatusCommandPending=rPDU2DeviceStatusCommandPending, airFMModBlwr2HeatsinkTempF=airFMModBlwr2HeatsinkTempF, airIRRP500UnitThresholdsSupplyAirHighTempUS=airIRRP500UnitThresholdsSupplyAirHighTempUS, rPDULowLoad=rPDULowLoad, memBeaconConfigEntry=memBeaconConfigEntry, xPDUBypassInputVoltagePhaseEntry=xPDUBypassInputVoltagePhaseEntry, msvmOutletOff=msvmOutletOff, pduCircuitPanelInputUndercurrent=pduCircuitPanelInputUndercurrent, switchgearBreakerName=switchgearBreakerName, apcUpsConfigFieldValueRange=apcUpsConfigFieldValueRange, airIRmPmWinterModeStartTempC=airIRmPmWinterModeStartTempC, airIRmPmPump4LinearRange=airIRmPmPump4LinearRange, cpsSerialGroupName=cpsSerialGroupName, battManUnitRelayStuck=battManUnitRelayStuck, upsAdvConfigLowerBypassVoltTolerance=upsAdvConfigLowerBypassVoltTolerance, emsOutputRelayStatusOutputRelayName=emsOutputRelayStatusOutputRelayName, atsOutputTableIndex=atsOutputTableIndex, rPDU2SensorTempHumidityTableSize=rPDU2SensorTempHumidityTableSize, airIRmPmAuxiliaryAlarm4=airIRmPmAuxiliaryAlarm4, emsStatusAlarmDeviceCount=emsStatusAlarmDeviceCount, galaxyVMUPS130kVA=galaxyVMUPS130kVA, iemStatusProbeLowTempViolation=iemStatusProbeLowTempViolation, xATSOutputVoltageHighAlarm=xATSOutputVoltageHighAlarm, airIRRCGroupConfigAltitudeMetric=airIRRCGroupConfigAltitudeMetric, airIRRP500UnitServiceIntervalCondensatePumpAlarm=airIRRP500UnitServiceIntervalCondensatePumpAlarm, airIRmPmEheating4Runtime=airIRmPmEheating4Runtime, airIRRP500UnitServiceIntervalAirFilterAlarm=airIRRP500UnitServiceIntervalAirFilterAlarm, rPDUStatusBankNumber=rPDUStatusBankNumber, emStatusProbesNumProbes=emStatusProbesNumProbes, xPDUMainInputVoltagePhaseTable=xPDUMainInputVoltagePhaseTable, airIRSCGroupStatus=airIRSCGroupStatus, atsLowLoadCleared=atsLowLoadCleared, airIRmPmEheating1Hysteresis=airIRmPmEheating1Hysteresis, battManBatteryVoltageSpanCalib=battManBatteryVoltageSpanCalib, coolingUnitConfigurationAnalogMaximum=coolingUnitConfigurationAnalogMaximum, galaxy5500UPS50KVA=galaxy5500UPS50KVA, airIRmPmDrycooler4SummerStartTempC=airIRmPmDrycooler4SummerStartTempC, temperatureThresholdViolationCleared1=temperatureThresholdViolationCleared1, airIRRCUnitStatusCoolOutput=airIRRCUnitStatusCoolOutput, memOutputStatusTableSize=memOutputStatusTableSize, isxModularDistSubFeedInfoLocation=isxModularDistSubFeedInfoLocation, airIRmPmFan2ManOpRunning=airIRmPmFan2ManOpRunning, airIRG3CMRunHoursDeviceIndex=airIRG3CMRunHoursDeviceIndex, sPDUOutletPending=sPDUOutletPending, sPDUOutletConfigMSPannunAlarmActionDly=sPDUOutletConfigMSPannunAlarmActionDly, airIRG2RDT2ConfigUnitType=airIRG2RDT2ConfigUnitType, upsDiagSubSysExternalSwitchGearHardwareRev=upsDiagSubSysExternalSwitchGearHardwareRev, airFMModServIntBlwr2Reset=airFMModServIntBlwr2Reset, atsInputName=atsInputName, rPDUOutletStatusOutletPhase=rPDUOutletStatusOutletPhase, airIRmPmNumberOfSensors=airIRmPmNumberOfSensors, memInputsStatusInputName=memInputsStatusInputName, emsOutletStatusOutletIndex=emsOutletStatusOutletIndex, xATSS1BadPhaseBalance=xATSS1BadPhaseBalance, airIRmPmPump2MaxAdjust=airIRmPmPump2MaxAdjust, dm3ConfigConvFailMin=dm3ConfigConvFailMin, mtrapargsGauge02=mtrapargsGauge02, smartAvrReducingOff=smartAvrReducingOff, airFMModCoolModuleIndex=airFMModCoolModuleIndex, upsAdvConfigMinReturnRuntime=upsAdvConfigMinReturnRuntime, bmBatManMaintenanceAlarmCleared=bmBatManMaintenanceAlarmCleared, airIRG2RDT2StatusFilterDPMetric=airIRG2RDT2StatusFilterDPMetric, airPAOperatingMode=airPAOperatingMode, airIRSCUnitConfigOutputSource=airIRSCUnitConfigOutputSource, airIRG3RDUSetpointsDeviceIndex=airIRG3RDUSetpointsDeviceIndex, airFMModRHBlwr2=airFMModRHBlwr2, rARUConfig=rARUConfig, sPDUMasterStatusVMCurrentLoad=sPDUMasterStatusVMCurrentLoad, rARUSensorsTempShortIncRateThreshValue=rARUSensorsTempShortIncRateThreshValue, airIRG2IdentSerialNumber=airIRG2IdentSerialNumber, airIRG2IdentHardwareRevision=airIRG2IdentHardwareRevision, upsFirmwareMismatch=upsFirmwareMismatch, emsInputContactStatusInputContactName=emsInputContactStatusInputContactName, dm3ConfigLowKneeTemp=dm3ConfigLowKneeTemp, airPAReturnTempC=airPAReturnTempC, upsAdvConfigHighTransferVolt=upsAdvConfigHighTransferVolt, airFMGroupFailoverModCondensatePumpFail=airFMGroupFailoverModCondensatePumpFail, cpsNameService=cpsNameService, rPDULoadDevMaxBankLoad=rPDULoadDevMaxBankLoad, battManStringDischarge5to10Seconds=battManStringDischarge5to10Seconds, sPDUMasterConfigReboot=sPDUMasterConfigReboot, isxModularDistSysVoltage=isxModularDistSysVoltage, airIRG3GroupSetpointsCoolDeadbandMetric=airIRG3GroupSetpointsCoolDeadbandMetric, xPDUBranchBreakers=xPDUBranchBreakers, sPDUOutletControlMSPOutletName=sPDUOutletControlMSPOutletName, rARUFanStatusFanRpmSpeed=rARUFanStatusFanRpmSpeed, airIRmPmEheating3HysteresisK=airIRmPmEheating3HysteresisK, atsOutputMaxPower=atsOutputMaxPower, xPDUOutputCurrentHighAlarmCleared=xPDUOutputCurrentHighAlarmCleared, upsAdvStateTotaltimeonbattery=upsAdvStateTotaltimeonbattery, rPDU2SensorDiscreteStatusNumber=rPDU2SensorDiscreteStatusNumber, emConfigProbeLocation=emConfigProbeLocation, airIRSCUnitThresholdsRackInletHighTempMetric=airIRSCUnitThresholdsRackInletHighTempMetric, airIRG3GroupStatusMaxRackInletTempMetric=airIRG3GroupStatusMaxRackInletTempMetric, upsParallelDiagSubSysBreakerIndex=upsParallelDiagSubSysBreakerIndex, airIRG3GroupStatusTotalAirFlowUS=airIRG3GroupStatusTotalAirFlowUS, nlStatus=nlStatus, mUpsEnvironRelativeHumidity=mUpsEnvironRelativeHumidity, sPDUOutletConfigMSPannunOutletName=sPDUOutletConfigMSPannunOutletName, airIRG2GroupConfigNumberofCoolingUnits=airIRG2GroupConfigNumberofCoolingUnits, isxModularPduStatus=isxModularPduStatus, emStatusProbeMinTempViolation=emStatusProbeMinTempViolation, rPDUPowerSupply2Status=rPDUPowerSupply2Status, airIRRCUnitIdentFirmwareRevision=airIRRCUnitIdentFirmwareRevision, upsParallelOutputApparentPowerTableIndex=upsParallelOutputApparentPowerTableIndex, sPDUMasterStatusMSP=sPDUMasterStatusMSP, airIRmPmDrycooler4Runtime=airIRmPmDrycooler4Runtime, gutorWDW=gutorWDW, moduleName=moduleName, upsAdvInputBypassNominalFrequency=upsAdvInputBypassNominalFrequency, accessPXStatusRearDoorLock=accessPXStatusRearDoorLock, airIRmPmPump4ControlFactor=airIRmPmPump4ControlFactor, atsStatusHardwareStatus=atsStatusHardwareStatus, rPDU2SensorDiscreteStatusCommStatus=rPDU2SensorDiscreteStatusCommStatus, atsConfigPhaseTableIndex=atsConfigPhaseTableIndex, rPDU2OutletMeteredStatusName=rPDU2OutletMeteredStatusName, airFMSysAlarmMapOutput13=airFMSysAlarmMapOutput13, pduAtypicalBypassMode=pduAtypicalBypassMode, emsBeaconOn=emsBeaconOn, airIRG2RDT2ConfigOutputNormalState=airIRG2RDT2ConfigOutputNormalState, airFMSysThresholds=airFMSysThresholds, isxModularDistSubFeedLoadingEntry=isxModularDistSubFeedLoadingEntry, airIRG3CMConfigRemoteOnStandby=airIRG3CMConfigRemoteOnStandby, xATSGeneratorSettingsStartDelay=xATSGeneratorSettingsStartDelay, battManConfigAutoAnnunciatorReset=battManConfigAutoAnnunciatorReset, emIdent=emIdent, airIRSCUnitConfigConfigurationType=airIRSCUnitConfigConfigurationType, airIRmPmEheating1StartTemperatureF=airIRmPmEheating1StartTemperatureF, dm3StatusConvID=dm3StatusConvID, airIRRP100UnitThresholdsSupplyAirHighTempMetric=airIRRP100UnitThresholdsSupplyAirHighTempMetric, airFMModManufactureDate=airFMModManufactureDate, rPDU2BankTableSize=rPDU2BankTableSize, upsOutletGroupStatusCommandPending=upsOutletGroupStatusCommandPending, memSensorsTempShortIncRateThreshTime=memSensorsTempShortIncRateThreshTime, memModules=memModules, airFMSysAlarmMapExpMod1CondPumpFail=airFMSysAlarmMapExpMod1CondPumpFail, airIRRP100GroupSetpointsSupplyAirMetric=airIRRP100GroupSetpointsSupplyAirMetric, atsConfigProductName=atsConfigProductName, memOutletStatusEntry=memOutletStatusEntry, airIRRP500UnitConfigDehumidifyEnable=airIRRP500UnitConfigDehumidifyEnable, symmetraPxDisplay=symmetraPxDisplay, airIRG3RDURunHoursTable=airIRG3RDURunHoursTable, airFMModStatusTableSize=airFMModStatusTableSize, upsAdvOutputRedundancy=upsAdvOutputRedundancy, isxModularDistSubFeedInfoBreakerAlarmEnable=isxModularDistSubFeedInfoBreakerAlarmEnable, logicPowerSuppliesIncreased=logicPowerSuppliesIncreased, coolingUnitAboutTable=coolingUnitAboutTable, airIRRP100UnitRunHours=airIRRP100UnitRunHours, airIRRP100Series=airIRRP100Series, dm3Ident=dm3Ident, airIRRP100UnitConfigHeatAssistEnable=airIRRP100UnitConfigHeatAssistEnable, cpsSerialPortDataSize=cpsSerialPortDataSize, airIRG3AlarmsTable=airIRG3AlarmsTable, airIRmPmCmp2HysteresisSummer=airIRmPmCmp2HysteresisSummer, xATSTestingScheduleTestWithLoadSelectMonth=xATSTestingScheduleTestWithLoadSelectMonth, upsDiagBatteryTable=upsDiagBatteryTable, upsPhaseInputPhaseTableIndex=upsPhaseInputPhaseTableIndex, airIRmPmPWWHeatingManOpRunning=airIRmPmPWWHeatingManOpRunning, emsProbeStatus=emsProbeStatus, airIRmPmGvalve=airIRmPmGvalve, upsBasicBatteryStatus=upsBasicBatteryStatus, battManString2OhmicValueEntry=battManString2OhmicValueEntry, xATSGeneratorServiceEngineStartsLifetime=xATSGeneratorServiceEngineStartsLifetime, upsInformationalConditionCleared=upsInformationalConditionCleared, cpsDNSdomain=cpsDNSdomain, airIRRP100UnitServiceIntervalHeaterAlarm=airIRRP100UnitServiceIntervalHeaterAlarm, dm3StatusSysSecurityLevel=dm3StatusSysSecurityLevel, xPDUBranchBreakerMinCurrentThreshold=xPDUBranchBreakerMinCurrentThreshold, rARUSensorsTempShortDecRateThreshValue=rARUSensorsTempShortDecRateThreshValue, airIRSCUnitConfigInputNormalState=airIRSCUnitConfigInputNormalState, airFMSysDischAirPtrn=airFMSysDischAirPtrn, emu2=emu2, isxModularDistModuleBreakerCableNum=isxModularDistModuleBreakerCableNum, pduCommunicationLost=pduCommunicationLost, apcBeaconOn=apcBeaconOn, upsTurnedOff=upsTurnedOff, battManString1BatteryChemHighVoltageAlarm=battManString1BatteryChemHighVoltageAlarm, isxModularDistSysOutputVoltageMonitoring=isxModularDistSysOutputVoltageMonitoring, rPDU2IdentLocation=rPDU2IdentLocation, airFMSysAlarmMapOutput15=airFMSysAlarmMapOutput15, airFMSysOutputTableSize=airFMSysOutputTableSize, cpsSerialPortNumber=cpsSerialPortNumber, bmBatManBatteryAlarmCleared=bmBatManBatteryAlarmCleared, airFMModBlwr2ActFreq=airFMModBlwr2ActFreq, memSensorsStatusTable=memSensorsStatusTable, memOutlets=memOutlets, coolingUnitExtendedStringValue=coolingUnitExtendedStringValue, apcDoorSenseConnected=apcDoorSenseConnected, upsParallelDiagSubSysBreakerName=upsParallelDiagSubSysBreakerName, xATSInternalCommErrorCleared=xATSInternalCommErrorCleared, xATSGeneratorShutdownCleared=xATSGeneratorShutdownCleared, atsStatusRedundancyState=atsStatusRedundancyState, airIRmPmHumidifier1Hysteresis=airIRmPmHumidifier1Hysteresis, airIRmPmSupplyAirHumidityTooHigh=airIRmPmSupplyAirHumidityTooHigh, airPABlowerSpeed=airPABlowerSpeed, airFMSysCoilFluidVlvAct=airFMSysCoilFluidVlvAct, upsParallelOutputActivePowerTableIndex=upsParallelOutputActivePowerTableIndex, cpsSerialTelnet=cpsSerialTelnet, upsBasicState=upsBasicState, isxModularDistributionCommLost=isxModularDistributionCommLost, eps8000SSC=eps8000SSC, airFMModComp1=airFMModComp1, airIRG3RDURunHoursRDUID=airIRG3RDURunHoursRDUID, upsParallelOutputPhaseTable=upsParallelOutputPhaseTable, isxModularOutputVoltageMinThresholdViolation=isxModularOutputVoltageMinThresholdViolation, airIRmPmPump3ManOpEnable=airIRmPmPump3ManOpEnable, emsProbeConfigProbeSTDecTempVariance=emsProbeConfigProbeSTDecTempVariance, iemStatusProbeLocation=iemStatusProbeLocation, dm3IdentSysDescriptionTable=dm3IdentSysDescriptionTable, airIRRP500UnitRunHoursFan1=airIRRP500UnitRunHoursFan1, isxModularCoolingFanAlarmCleared=isxModularCoolingFanAlarmCleared, dm3ConfigRectThresh=dm3ConfigRectThresh, airIRmPmHumidifier1ManOpValue=airIRmPmHumidifier1ManOpValue, airIRRP500GroupSetpoints=airIRRP500GroupSetpoints, airFMModBlwr1CtrlType=airFMModBlwr1CtrlType, isxModularLowCurrentThresholdViolation=isxModularLowCurrentThresholdViolation, airIRmPmGECWvalve=airIRmPmGECWvalve, airIRG2IdentModelNumber=airIRG2IdentModelNumber, airIRmPmSensor7Defect=airIRmPmSensor7Defect, atsCalibrationInputPhaseTable=atsCalibrationInputPhaseTable, dm3ConfigSysHardwareTempAlarm=dm3ConfigSysHardwareTempAlarm, battManString1BatteryTable=battManString1BatteryTable, airIRG3CMStatusEvaporatorTempUS=airIRG3CMStatusEvaporatorTempUS, xATSSystemOutputPhaseTable=xATSSystemOutputPhaseTable, airIRRCGroupConfigCoolGainP=airIRRCGroupConfigCoolGainP, airFMSysHeatRejection=airFMSysHeatRejection, xATSEngineStartAsserted=xATSEngineStartAsserted, xATSSwitchTimersTableSize=xATSSwitchTimersTableSize, airIRG3RDUTableSize=airIRG3RDUTableSize, airIRmPmHumidifier2Alarm5us=airIRmPmHumidifier2Alarm5us, sPDUMasterControlMSPName=sPDUMasterControlMSPName, sPDUOutletConfigMSPgsBattCapThresh=sPDUOutletConfigMSPgsBattCapThresh, upsAdvInputBypassTotalApparentPower=upsAdvInputBypassTotalApparentPower, sPDUOutletConfigMSPallTable=sPDUOutletConfigMSPallTable, upsParallelInputMaxVoltage=upsParallelInputMaxVoltage, airIRmPmUnitCondensationTemperature2F=airIRmPmUnitCondensationTemperature2F, dm3ConfigFusesName=dm3ConfigFusesName)
mibBuilder.exportSymbols("PowerNet-MIB", isxModularDistModuleBreakerPhaseIndex=isxModularDistModuleBreakerPhaseIndex, rPDU2PhaseStatusVoltage=rPDU2PhaseStatusVoltage, dm3StatusOEMconvOffset=dm3StatusOEMconvOffset, airIRRP500GroupConfigReheatDerivativeD=airIRRP500GroupConfigReheatDerivativeD, memSensorsTempLowThresh=memSensorsTempLowThresh, accessPXIdentProductNumber=accessPXIdentProductNumber, cpsEthIPaddr=cpsEthIPaddr, airIRRP100UnitStatusOperateMode=airIRRP100UnitStatusOperateMode, dm3Config=dm3Config, airIRSCUnitStatusReturnAirTempUS=airIRSCUnitStatusReturnAirTempUS, mtrapargsIpAddress=mtrapargsIpAddress, sideCarFramePositionID=sideCarFramePositionID, isxModularHighCurrentThresholdViolation=isxModularHighCurrentThresholdViolation, airFMIdentModuleModelNumber=airFMIdentModuleModelNumber, smartAvrReducing=smartAvrReducing, xATSInputContactEntry=xATSInputContactEntry, airFMModBlwr2InverterTempF=airFMModBlwr2InverterTempF, airIRG2RDT2StatusOHEOutputState=airIRG2RDT2StatusOHEOutputState, emConfigProbeLowHumidThreshold=emConfigProbeLowHumidThreshold, airIRmPmEheating3ManOpEnable=airIRmPmEheating3ManOpEnable, airIRmPmAlarmBits=airIRmPmAlarmBits, memModulesStatusTableSize=memModulesStatusTableSize, coolingUnitStatusAnalogUnits=coolingUnitStatusAnalogUnits, isxModularDistSysOutputVoltageAlarmMaxEnable=isxModularDistSysOutputVoltageAlarmMaxEnable, airIRSCUnitConfigAltitudeMetric=airIRSCUnitConfigAltitudeMetric, airIRmPmDrycooler3SummerStartTemp=airIRmPmDrycooler3SummerStartTemp, airIRmPmMaxLimitWaterTemperature=airIRmPmMaxLimitWaterTemperature, airIRSCUnitConfigIdleOnLeakDetect=airIRSCUnitConfigIdleOnLeakDetect, airIRmPmPWWHeatingLinearRange=airIRmPmPWWHeatingLinearRange, apcEnvMinTempThresholdViolation=apcEnvMinTempThresholdViolation, dcBBCommunicationLost=dcBBCommunicationLost, xPDUEPOMode=xPDUEPOMode, upsAdvControlUpsOff=upsAdvControlUpsOff, airIRRP500UnitStatusMaximumRackInletTempUS=airIRRP500UnitStatusMaximumRackInletTempUS, isxModularDistModuleBreakerModIndex=isxModularDistModuleBreakerModIndex, xATSSystemOutputTotalPower=xATSSystemOutputTotalPower, atsIdentDateOfManufacture=atsIdentDateOfManufacture, isxModularDistModuleOutputName=isxModularDistModuleOutputName, airIRmPmSensor18Defect=airIRmPmSensor18Defect, atsCalibrationInputTableIndex=atsCalibrationInputTableIndex, dcmim2StatusRectPhyAddr=dcmim2StatusRectPhyAddr, xPDUMainInputVoltagePhaseEntry=xPDUMainInputVoltagePhaseEntry, sPDUMasterConfig=sPDUMasterConfig, airIRG3CMStatusEPRValvePosition=airIRG3CMStatusEPRValvePosition, serialPort2=serialPort2, upsDiagPMSerialNum=upsDiagPMSerialNum, upsPhaseOutputMaxCurrent=upsPhaseOutputMaxCurrent, memModulesStatusModuleLocation=memModulesStatusModuleLocation, airFMSysConfig=airFMSysConfig, upsAdvControlRebootShutdownUps=upsAdvControlRebootShutdownUps, coolingUnit=coolingUnit, airIRG3CMRunHoursFan3=airIRG3CMRunHoursFan3, isxcFailureAlarm=isxcFailureAlarm, battManString1ResponseTestChangeTable=battManString1ResponseTestChangeTable, upsSCGReturnBatteryCapacityOffset=upsSCGReturnBatteryCapacityOffset, airFMModBlwrFreqSetting=airFMModBlwrFreqSetting, upsDiagBatteryFrameIndex=upsDiagBatteryFrameIndex, sPDUMasterStatusMSPIndex=sPDUMasterStatusMSPIndex, atsRMSUnderVoltageCleared=atsRMSUnderVoltageCleared, rPDU2OutletMeteredStatusPeakPower=rPDU2OutletMeteredStatusPeakPower, xATSNotInAutomaticModeCleared=xATSNotInAutomaticModeCleared, airFMSysAlarmMapExpMod2LowAirFlow=airFMSysAlarmMapExpMod2LowAirFlow, upsDiagComBusExternalRIMStatus=upsDiagComBusExternalRIMStatus, airIRG2GroupConfigNumberofBackupUnits=airIRG2GroupConfigNumberofBackupUnits, airIRG3RDUStatusCondenserOutletPressureMetric=airIRG3RDUStatusCondenserOutletPressureMetric, airIRmPmEheating4HysteresisK=airIRmPmEheating4HysteresisK, isxModularMaxCurrentThresholdViolation=isxModularMaxCurrentThresholdViolation, airFMAlarmConditionsTableSize=airFMAlarmConditionsTableSize, airFMModReturnTempF=airFMModReturnTempF, atsCalibrationOutputTable=atsCalibrationOutputTable, airIRSCUnitStatusSuctionPressureUS=airIRSCUnitStatusSuctionPressureUS, memSensorsHumidityMinThresh=memSensorsHumidityMinThresh, atsIdentDeviceRating=atsIdentDeviceRating, airFMSysStatus=airFMSysStatus, airFMSysAlarmMapInputTable=airFMSysAlarmMapInputTable, upsDiagSubSysExternalSwitchGearFirmwareRev=upsDiagSubSysExternalSwitchGearFirmwareRev, coolingUnitConfigurationDiscreteEntry=coolingUnitConfigurationDiscreteEntry, airFMSysAvgReturnTempF=airFMSysAvgReturnTempF, memOutputName=memOutputName, upsAdvConfigChargerRate=upsAdvConfigChargerRate, memSensorsTempShortDecRateThreshTime=memSensorsTempShortDecRateThreshTime, upsDiagBatteryStatus=upsDiagBatteryStatus, isxModularDistSysCurrentMonitoring=isxModularDistSysCurrentMonitoring, badVoltage=badVoltage, upsHighPrecTotalDCCurrent=upsHighPrecTotalDCCurrent, envLowHumidityThresholdViolationCleared=envLowHumidityThresholdViolationCleared, airFMStatusModuleSupplyHum=airFMStatusModuleSupplyHum, envLTIncTempRateViolationCleared=envLTIncTempRateViolationCleared, airFMSysReheatState=airFMSysReheatState, rPDU2GroupTotalEnergy=rPDU2GroupTotalEnergy, rPDUOutletControlTable=rPDUOutletControlTable, airFMGroupFailoverSysHighEnvHum=airFMGroupFailoverSysHighEnvHum, airFMSysActualElectricReheat=airFMSysActualElectricReheat, apcInformationalDiscreteInputContactStateNormal=apcInformationalDiscreteInputContactStateNormal, airFMStatusSystemDehumidifyEnabled=airFMStatusSystemDehumidifyEnabled, apcTransformerDCImbalanceFault=apcTransformerDCImbalanceFault, airFMModHumTable=airFMModHumTable, upsDiagSubFeedBreakerEntry=upsDiagSubFeedBreakerEntry, sPDUIdentMSPEntry=sPDUIdentMSPEntry, airIRRP500UnitIdentModelNumber=airIRRP500UnitIdentModelNumber, symmetraUPS16kVA=symmetraUPS16kVA, dcBatteryBreakerAlarm=dcBatteryBreakerAlarm, emsAlarmDeviceControlDeviceName=emsAlarmDeviceControlDeviceName, emsOutputRelayStateAbnormal=emsOutputRelayStateAbnormal, upsDiagComBusInternalMIMStatus=upsDiagComBusInternalMIMStatus, memSensorsTempThreshHysteresis=memSensorsTempThreshHysteresis, rPDU2OutletMeteredPropertiesNumber=rPDU2OutletMeteredPropertiesNumber, airIRmPmHumidifier2ManOpRunning=airIRmPmHumidifier2ManOpRunning, isxModularDistSysPowerKwhUsage=isxModularDistSysPowerKwhUsage, xATSGeneratorGenericEvent=xATSGeneratorGenericEvent, xATSOutputVoltageLowAlarm=xATSOutputVoltageLowAlarm, airIRRP500UnitStatusAirFlowUS=airIRRP500UnitStatusAirFlowUS, airFMSysCompMinOnTime=airFMSysCompMinOnTime, iemStatusContactName=iemStatusContactName, rPDU2DeviceStatusEntry=rPDU2DeviceStatusEntry, xATSInputContactStateAbnormal=xATSInputContactStateAbnormal, airIRG2GroupConfigCapacityControlType=airIRG2GroupConfigCapacityControlType, masterSwitchMSP=masterSwitchMSP, upsDiagBatteryFrameTemperature=upsDiagBatteryFrameTemperature, emsBeaconConnected=emsBeaconConnected, mconfigClockTime=mconfigClockTime, emsIdentHardwareRev=emsIdentHardwareRev, mfiletransferConfigFTPServerUser=mfiletransferConfigFTPServerUser, airIRG3CM=airIRG3CM, rPDU2DeviceConfigDevicePeakPowerReset=rPDU2DeviceConfigDevicePeakPowerReset, airFMModBlwr2CtrlCoolFanLife=airFMModBlwr2CtrlCoolFanLife, airFMGroupSysPresentRole=airFMGroupSysPresentRole, sPDUOutletStatusVMOutletName=sPDUOutletStatusVMOutletName, apcLocalDisplayConfigKeyClick=apcLocalDisplayConfigKeyClick, airFMGroupSysRolesTableSize=airFMGroupSysRolesTableSize, rPDUOutletPhaseOverloadRestriction=rPDUOutletPhaseOverloadRestriction, isxModularTotalOutputCurrentMaxThresholdViolationCleared=isxModularTotalOutputCurrentMaxThresholdViolationCleared, masterswitchMSP=masterswitchMSP, cpsSerialPortPppMru=cpsSerialPortPppMru, xPDUCoolingFanAlarm=xPDUCoolingFanAlarm, airIRG2RDT2StatusSuperheatTempUS=airIRG2RDT2StatusSuperheatTempUS, emStatusProbeLowHumidViolation=emStatusProbeLowHumidViolation, isxModularDistSysCurrentRating=isxModularDistSysCurrentRating, airIRG2RDT2ThresholdsReturnAirHighTempMetric=airIRG2RDT2ThresholdsReturnAirHighTempMetric, airIRmPmFan2Type=airIRmPmFan2Type, rPDULoadStatusEntry=rPDULoadStatusEntry, databaseStatus=databaseStatus, airIRRP100UnitConfigCoolCapacity=airIRRP100UnitConfigCoolCapacity, airIRRCUnitStatusFluidValvePosition=airIRRCUnitStatusFluidValvePosition, xPDUDeviceFansPresent=xPDUDeviceFansPresent, airIRG2RDT2StatusCompressor=airIRG2RDT2StatusCompressor, rPDU2=rPDU2, coolingUnitConfigurationDiscreteTableIndex=coolingUnitConfigurationDiscreteTableIndex, airIRSCGroupConfigAltitudeMetric=airIRSCGroupConfigAltitudeMetric, bmBatManEnvironmentAlarmCleared=bmBatManEnvironmentAlarmCleared, uioSensorStatusTemperatureDegF=uioSensorStatusTemperatureDegF, xATSSystemOutputVoltageLtoN=xATSSystemOutputVoltageLtoN, airFMGroupLoadShareDehumThresh=airFMGroupLoadShareDehumThresh, isxModularDistSysCurrentTable=isxModularDistSysCurrentTable, sPDUOutletConfigMSPannunOutletCtrlMode=sPDUOutletConfigMSPannunOutletCtrlMode, airIRSCUnitServiceIntervalsAirFilterAlarm=airIRSCUnitServiceIntervalsAirFilterAlarm, xATSGeneratorServiceDueAlarmCleared=xATSGeneratorServiceDueAlarmCleared, upsDiagSubSysBattMonitorIndex=upsDiagSubSysBattMonitorIndex, rARUPowerStatusTable=rARUPowerStatusTable, airIRmPmSensor1Defect=airIRmPmSensor1Defect, iemConfigConfigRelaysNumRelays=iemConfigConfigRelaysNumRelays, airIRmPmFan3Failure=airIRmPmFan3Failure, xPDUSystemOutputPhaseEntry=xPDUSystemOutputPhaseEntry, airIRmPmFan3Alarm=airIRmPmFan3Alarm, airIRG3Group=airIRG3Group, battManConfigMaxRippleCurrent=battManConfigMaxRippleCurrent, airIRmPmDrycooler3=airIRmPmDrycooler3, airIRRCUnitStatusInputState=airIRRCUnitStatusInputState, isxModularDistSubFeedInfoTable=isxModularDistSubFeedInfoTable, airFMStatusModuleReturnHum=airFMStatusModuleReturnHum, upsPhaseOutputPhaseTable=upsPhaseOutputPhaseTable, emsOutputRelayConfigEntry=emsOutputRelayConfigEntry, rARUSensors=rARUSensors, upsIntegratedATSPreferredSource=upsIntegratedATSPreferredSource, airIRRP500UnitStatusFilterDPUS=airIRRP500UnitStatusFilterDPUS, airIRmPmSupplyAirTemperatureF=airIRmPmSupplyAirTemperatureF, upsDiagSubSysFrameTableSize=upsDiagSubSysFrameTableSize, airFMSysOutputStatus=airFMSysOutputStatus, cpsSerialPortSniffMsess=cpsSerialPortSniffMsess, airIRmPmCompressor2=airIRmPmCompressor2, airIRmPmCommonAlarm=airIRmPmCommonAlarm, rsConfigChange=rsConfigChange, environmentalMonitor=environmentalMonitor, dm3ConfigFusesEntry=dm3ConfigFusesEntry, airIRmPmAuxAlarm2=airIRmPmAuxAlarm2, isxModularDistSubFeedLoadingPhaseIndex=isxModularDistSubFeedLoadingPhaseIndex, atsOutputBankMaxPower=atsOutputBankMaxPower, airIRRP500UnitConfigIdleOnLeakDetect=airIRRP500UnitConfigIdleOnLeakDetect, xATSTestPassed=xATSTestPassed, emsProbeStatusProbeTemperature=emsProbeStatusProbeTemperature, lowBattery=lowBattery, airIRmPmDrycooler3Hysteresis=airIRmPmDrycooler3Hysteresis, emConfigContactsTable=emConfigContactsTable, airIRG2RDT2StatusReturnAirTempMetric=airIRG2RDT2StatusReturnAirTempMetric, AirIRmActivityState=AirIRmActivityState, dcRectifierFailAlarm=dcRectifierFailAlarm, galaxy7000UPS500kVA=galaxy7000UPS500kVA, accessPXIdent=accessPXIdent, xATSTestInitiated=xATSTestInitiated, sPDUOutletConfigMSPmups=sPDUOutletConfigMSPmups, accessPXStatusRearDoorAlarmStatus=accessPXStatusRearDoorAlarmStatus, atsOutputMaxLoad=atsOutputMaxLoad, airFMSysAlarmMapMainModTableSize=airFMSysAlarmMapMainModTableSize, airIRG2RDT2ServiceIntervalsAirFilter=airIRG2RDT2ServiceIntervalsAirFilter, dm3StatusAlarmsIndex=dm3StatusAlarmsIndex, isxModularPduFanStatus=isxModularPduFanStatus, airIRRP100GroupConfigReheatGainP=airIRRP100GroupConfigReheatGainP, xAPCControllerFirmwareUpdateTransferComplete=xAPCControllerFirmwareUpdateTransferComplete, dcFuseCBAlarmCleared=dcFuseCBAlarmCleared, xPDUIdentHardwareRev=xPDUIdentHardwareRev, airIRG3CMRunHoursEntry=airIRG3CMRunHoursEntry, airIRSCUnitRunHoursCondensatePump=airIRSCUnitRunHoursCondensatePump, airIRmPmCompressor1Alarm=airIRmPmCompressor1Alarm, memInputsConfigEntry=memInputsConfigEntry, airIRG3GroupStatusMinRackInletTempMetric=airIRG3GroupStatusMinRackInletTempMetric, environmental=environmental, upsAdvInputStatisticsEntry=upsAdvInputStatisticsEntry, airIRRP100UnitStatusCompressorDriveWarningStatus=airIRRP100UnitStatusCompressorDriveWarningStatus, upsHighPrecBatteryPacks=upsHighPrecBatteryPacks, isxModularDistSysPowerKwhReset=isxModularDistSysPowerKwhReset, newCodeAuthentViaTFTP=newCodeAuthentViaTFTP, emConfigProbeHumidHysteresis=emConfigProbeHumidHysteresis, battManString2ResponseTestCurrentBenchmarkIndex=battManString2ResponseTestCurrentBenchmarkIndex, upsBasicOutput=upsBasicOutput, rPDU2PhaseStatusEntry=rPDU2PhaseStatusEntry, upsDiagSubSysFrameTable=upsDiagSubSysFrameTable, dm3StatusBreakersName=dm3StatusBreakersName, upsParallelSysRedundancyStatus=upsParallelSysRedundancyStatus, apCPSCPUfreq=apCPSCPUfreq, upsParallelTotalOutputPower=upsParallelTotalOutputPower, iemConfigContactName=iemConfigContactName, airFMSysResetRunHours=airFMSysResetRunHours, rPDU2SensorTempHumidityConfigTempHysteresisF=rPDU2SensorTempHumidityConfigTempHysteresisF, battManSystemAmbientTempF=battManSystemAmbientTempF, rPDULoadStatusLoad=rPDULoadStatusLoad, airFMSysOutputTable=airFMSysOutputTable, upsHighPrecInputMinLineVoltage=upsHighPrecInputMinLineVoltage, battManString1ResponseTestChangeIndex=battManString1ResponseTestChangeIndex, airFMSysAlarmMapInputEntry=airFMSysAlarmMapInputEntry, airIRRCUnitConfigIdleOnCoolFail=airIRRCUnitConfigIdleOnCoolFail, memBeaconConfigModuleNumber=memBeaconConfigModuleNumber, upsAdvConfigUpperBypassVoltTolerance=upsAdvConfigUpperBypassVoltTolerance, xATSGeneratorHighBatteryVolt=xATSGeneratorHighBatteryVolt, xATSSource1Quality=xATSSource1Quality, airIRRP100UnitStatus=airIRRP100UnitStatus, airFMSysAlarmMapExpMod2WaterDetected=airFMSysAlarmMapExpMod2WaterDetected, memInputAnalogCalibrationPoint4=memInputAnalogCalibrationPoint4, airIRmPmPWWHeatingHysteresisF=airIRmPmPWWHeatingHysteresisF, apcEnvLowTempThresholdViolation=apcEnvLowTempThresholdViolation, rPDU2SensorTempHumidityConfigName=rPDU2SensorTempHumidityConfigName, sPDUMasterControl=sPDUMasterControl, airIRmPmPWWHeatingStartTemp=airIRmPmPWWHeatingStartTemp, airIRSCUnitSetptsFanSpeedPreference=airIRSCUnitSetptsFanSpeedPreference, xATSSystemOutputPhaseEntry=xATSSystemOutputPhaseEntry)
mibBuilder.exportSymbols("PowerNet-MIB", xATSGeneratorSettingsNumberCrank=xATSGeneratorSettingsNumberCrank, rPDUOutletBank=rPDUOutletBank, rARUStatus=rARUStatus, sPDUOutletConfigMSPmupsP1LowTemp=sPDUOutletConfigMSPmupsP1LowTemp, memOutputLocation=memOutputLocation, airIRG3CMStatusAverageFanSpeed=airIRG3CMStatusAverageFanSpeed, iemConfigProbeTempHysteresis=iemConfigProbeTempHysteresis, upsCriticalConditionCleared=upsCriticalConditionCleared, upsHighPrecBatteryPackCartridgeReplaceDate=upsHighPrecBatteryPackCartridgeReplaceDate, airFMSysAlarmMapInput3=airFMSysAlarmMapInput3, airIRmPmEheating3=airIRmPmEheating3, rPDUBankPhaseOverload=rPDUBankPhaseOverload, emsSensorStatusSensorSystemName=emsSensorStatusSensorSystemName, airIRG2RDT2ThresholdsSupplyAirHighTempUS=airIRG2RDT2ThresholdsSupplyAirHighTempUS, airIRG3RDUConfigEntry=airIRG3RDUConfigEntry, cpsInfoSerialPortSigCD=cpsInfoSerialPortSigCD, netlock=netlock, apcLocalDisplayIdentDisplayType=apcLocalDisplayIdentDisplayType, upsOutput=upsOutput, xATSSystemOutputTotalApparentPower=xATSSystemOutputTotalApparentPower, airFMSysActualTempCtrlMethod=airFMSysActualTempCtrlMethod, coolingUnitConfigurationDiscreteTableSize=coolingUnitConfigurationDiscreteTableSize, airIRG2RDT2ServiceIntervals=airIRG2RDT2ServiceIntervals, upsAsiUpsControlServerRequestShutdown=upsAsiUpsControlServerRequestShutdown, rPDU2BankConfigNearOverloadCurrentThreshold=rPDU2BankConfigNearOverloadCurrentThreshold, airFMSystem=airFMSystem, airIRRP100UnitThresholdsReturnAirHighTempMetric=airIRRP100UnitThresholdsReturnAirHighTempMetric, cpsInfoSerialPortTable=cpsInfoSerialPortTable, upsDiagnosticIM=upsDiagnosticIM, airIRmPmFan1Type=airIRmPmFan1Type, airIRmPmSensor8Defect=airIRmPmSensor8Defect, isxModularDistSysOutputVoltageThresholdMin=isxModularDistSysOutputVoltageThresholdMin, upsPhaseInputVoltage=upsPhaseInputVoltage, mtrapargsOctetString04=mtrapargsOctetString04, airIRRP500UnitStatusFluidFlowMetric=airIRRP500UnitStatusFluidFlowMetric, rPDUOutletPhase=rPDUOutletPhase, dcmim2ConfigBattFunctTestDuration=dcmim2ConfigBattFunctTestDuration, dm3StatusConvPresent=dm3StatusConvPresent, xPDUSystemOutputPower=xPDUSystemOutputPower, cpsInfoSerialPortErrBreaks=cpsInfoSerialPortErrBreaks, airIRmPmWaterTemperatureC=airIRmPmWaterTemperatureC, atsStatusOutput=atsStatusOutput, atsHardwareStatusOk=atsHardwareStatusOk, galaxy7000UPS300kVA=galaxy7000UPS300kVA, airIRG2AlarmsIndex=airIRG2AlarmsIndex, airIRRP500UnitServiceIntervalHeaterAlarm=airIRRP500UnitServiceIntervalHeaterAlarm, airIRmPmMinLimitWaterTemperatureF=airIRmPmMinLimitWaterTemperatureF, airIRmAlarmsTable=airIRmAlarmsTable, galaxyVMUPS225kVA=galaxyVMUPS225kVA, airIRmPmPump1StartTemperature=airIRmPmPump1StartTemperature, upsAdvBatteryReplaceIndicator=upsAdvBatteryReplaceIndicator, isxModularDistModuleInfoSerialNumber=isxModularDistModuleInfoSerialNumber, upsDiagSubSysBattMonitorFirmwareRev=upsDiagSubSysBattMonitorFirmwareRev, airIRRP500UnitStatusInputState=airIRRP500UnitStatusInputState, sPDUMasterConfigMSPName=sPDUMasterConfigMSPName, rPDU2BankStatusIndex=rPDU2BankStatusIndex, dm3StatusOEMshuntGain=dm3StatusOEMshuntGain, upsDiagIMStatus=upsDiagIMStatus, upsDiagSwitchGearInputSwitchStatus=upsDiagSwitchGearInputSwitchStatus, xPDUBypassInputVoltagePhaseTable=xPDUBypassInputVoltagePhaseTable, dm3StatusLVDState=dm3StatusLVDState, xPDUBranchBreakerTieIndicator=xPDUBranchBreakerTieIndicator, airFMStatusSystemAverageRetTempC=airFMStatusSystemAverageRetTempC, rPDU2SensorDiscreteConfigNormalState=rPDU2SensorDiscreteConfigNormalState, sPDUOutletConfigVMOutletName=sPDUOutletConfigVMOutletName, upsDiagSubSysFrameSerialNum=upsDiagSubSysFrameSerialNum, airIRmPmEheating2ManOpEnable=airIRmPmEheating2ManOpEnable, upsPhaseNumInputs=upsPhaseNumInputs, upsOutletGroupStatusOutletType=upsOutletGroupStatusOutletType, airIRRP500GroupStatusCoolOutput=airIRRP500GroupStatusCoolOutput, xATSGeneratorFuelSystemRuntimePower=xATSGeneratorFuelSystemRuntimePower, airIRG3RDUStatusOutputState=airIRG3RDUStatusOutputState, airIRmPmFan3=airIRmPmFan3, rPDU2SensorTempHumidityConfigHumidityMinThresh=rPDU2SensorTempHumidityConfigHumidityMinThresh, airIRRP100UnitStatusCompressorDriveDCLinkVoltage=airIRRP100UnitStatusCompressorDriveDCLinkVoltage, airFMModHumModuleIndex=airFMModHumModuleIndex, airIRG2Group=airIRG2Group, xATSGeneratorAdvStatusEngineRPM=xATSGeneratorAdvStatusEngineRPM, airFMSysCndsrFluidVlvType=airFMSysCndsrFluidVlvType, emsSensorConnected=emsSensorConnected, airIRG3RDUSetpointsTable=airIRG3RDUSetpointsTable, dm3StatusBattCurrent=dm3StatusBattCurrent, xATSSwitchSettingsNeutralTransferTime=xATSSwitchSettingsNeutralTransferTime, battManUnitStatusEntry=battManUnitStatusEntry, coolingUnitConfiguration=coolingUnitConfiguration, airIRSCUnitRunHoursEvaporatorFan3=airIRSCUnitRunHoursEvaporatorFan3, airIRmAlarmsIndex=airIRmAlarmsIndex, xATSGeneratorHighBatteryVoltCleared=xATSGeneratorHighBatteryVoltCleared, airIRSCGroupStatusMinReturnAirTempMetric=airIRSCGroupStatusMinReturnAirTempMetric, sPDUOutletConfigMSPmupsEntry=sPDUOutletConfigMSPmupsEntry, isxModularOutputVoltageMaxThresholdViolation=isxModularOutputVoltageMaxThresholdViolation, atsStatus24VPowerSupply=atsStatus24VPowerSupply, airIRRCUnitServiceIntervalsAirFilterAlarm=airIRRCUnitServiceIntervalsAirFilterAlarm, airIRmPmSetpointTemperatureNightC=airIRmPmSetpointTemperatureNightC, upsAdvBatteryEstimatedChargeTime=upsAdvBatteryEstimatedChargeTime, atsControl=atsControl, airIRmPmUnitEvaporationTemperature1=airIRmPmUnitEvaporationTemperature1, atsConfigBankTable=atsConfigBankTable, airIRRCUnitStatusFluidFlowMetric=airIRRCUnitStatusFluidFlowMetric, envMinTempThresholdViolationCleared=envMinTempThresholdViolationCleared, atsConfig=atsConfig, airFMGroupLoadShareReheatRequests=airFMGroupLoadShareReheatRequests, airIRmPmEheating4StartTemperatureF=airIRmPmEheating4StartTemperatureF, rPDU2DevicePropertiesMaxPhaseCurrentRating=rPDU2DevicePropertiesMaxPhaseCurrentRating, dcmim2StatusBattery=dcmim2StatusBattery, iemConfigContactsEntry=iemConfigContactsEntry, rPDUOutletConfigMonitoredEntry=rPDUOutletConfigMonitoredEntry, dm3ConfigBattDischargeAlarm=dm3ConfigBattDischargeAlarm, upsHighPrecBatteryPackStatus=upsHighPrecBatteryPackStatus, pduCircuitPanelInputOvercurrentCleared=pduCircuitPanelInputOvercurrentCleared, airIRmPmMaintenance=airIRmPmMaintenance, rPDUStatusOutletIndex=rPDUStatusOutletIndex, airIRmPmPump2StartTemperatureK=airIRmPmPump2StartTemperatureK, acceptThisDevice=acceptThisDevice, upsParallelInputMaxCurrent=upsParallelInputMaxCurrent, upsPhaseInputCurrent=upsPhaseInputCurrent, rARUIdentName=rARUIdentName, sPDUOutletConfigVMIndex=sPDUOutletConfigVMIndex, dcFanFailAlarmCleared=dcFanFailAlarmCleared, airIRG3CMThresholdsEntry=airIRG3CMThresholdsEntry, xPDUOutputCurrentLowAlarmCleared=xPDUOutputCurrentLowAlarmCleared, emsOutputRelayConfigOutputRelayNormalState=emsOutputRelayConfigOutputRelayNormalState, airACRC300Series=airACRC300Series, xPDUBreakerChangeEvent=xPDUBreakerChangeEvent, memModulesStatusModelNumber=memModulesStatusModelNumber, emsOutputRelayStatusOutputRelayState=emsOutputRelayStatusOutputRelayState, rPDU2OutletSwitchedControlCommand=rPDU2OutletSwitchedControlCommand, emsBeaconDisconnected=emsBeaconDisconnected, aruHighTemperatureAlarmCleared=aruHighTemperatureAlarmCleared, airIRmPmPump1Speed=airIRmPmPump1Speed, airIRRP500UnitRunHoursHeater1=airIRRP500UnitRunHoursHeater1, battManString2BatteryCalibTableSize=battManString2BatteryCalibTableSize, mspCommunicationEstablished=mspCommunicationEstablished, battManString1BatteryTableSize=battManString1BatteryTableSize, battManAlarmCharger=battManAlarmCharger, airIRRP500GroupSetpointsCoolUS=airIRRP500GroupSetpointsCoolUS, dm3ConfigHighKneeTemp=dm3ConfigHighKneeTemp, airFMModBlwr1HeatsinkTempC=airFMModBlwr1HeatsinkTempC, airIRRP100GroupStatusMaxRackInletTempUS=airIRRP100GroupStatusMaxRackInletTempUS, airIRSCUnitThresholdsReturnAirHighTempUS=airIRSCUnitThresholdsReturnAirHighTempUS, airIRG3GroupConfigFanSpeedControl=airIRG3GroupConfigFanSpeedControl, rPDU2PhasePropertiesIndex=rPDU2PhasePropertiesIndex, airIRG3CMStatusLiquidTempMetric=airIRG3CMStatusLiquidTempMetric, memSensorsHumidity=memSensorsHumidity, airIRG3GroupSetpointsIndex=airIRG3GroupSetpointsIndex, xATSSwitchBlockMapSetting=xATSSwitchBlockMapSetting, rPDUOutletDevColdstartDelay=rPDUOutletDevColdstartDelay, airIRmPmEheating2StartTemperatureF=airIRmPmEheating2StartTemperatureF, airFMSysAlarmMapSysHighEnvTemp=airFMSysAlarmMapSysHighEnvTemp, airIRRP100UnitStatusRackInletTemperature3Metric=airIRRP100UnitStatusRackInletTemperature3Metric, airIRmPmSensor4Defect=airIRmPmSensor4Defect, apcOutletStateAbnormal=apcOutletStateAbnormal, cpsEthIPmask=cpsEthIPmask, airFMSysLowSplyTempF=airFMSysLowSplyTempF, airIRG3CMThresholdsReturnAirTempHighMetric=airIRG3CMThresholdsReturnAirTempHighMetric, airIRmPmLastMaintenanceDay=airIRmPmLastMaintenanceDay, emsInputContactStatusInputContactNormalState=emsInputContactStatusInputContactNormalState, accessPXConfigRearDoorMaxOpenTime=accessPXConfigRearDoorMaxOpenTime, airIRRD100Series=airIRRD100Series, contactFaultResolved=contactFaultResolved, isxModularDistModuleInfoDateOfManufacture=isxModularDistModuleInfoDateOfManufacture, xATSGeneratorHighACVEventCleared=xATSGeneratorHighACVEventCleared, xATSDevice=xATSDevice, upsWarningConditionCleared=upsWarningConditionCleared, iemLowHumidThresholdViolation=iemLowHumidThresholdViolation, isxModularDistSysOutputFrequency=isxModularDistSysOutputFrequency, xPDUOutputNeutralCurrentHighAlarm=xPDUOutputNeutralCurrentHighAlarm, airIRRCGroupConfigAltitudeUS=airIRRCGroupConfigAltitudeUS, upsPhysicalLayout=upsPhysicalLayout, airIRmPmPump3Runtime=airIRmPmPump3Runtime, airIRmPmFan1ManOpEnable=airIRmPmFan1ManOpEnable, airFMAlarmDescription=airFMAlarmDescription, rPDU2SensorDiscreteStatusEntry=rPDU2SensorDiscreteStatusEntry, atsCalibrationNumOutputPhases=atsCalibrationNumOutputPhases, envLowHumidityThresholdViolation=envLowHumidityThresholdViolation, battManString1BatteryOpenCell=battManString1BatteryOpenCell, rARUSensorsTempHighThresh=rARUSensorsTempHighThresh, airIRG3CMStatusEntry=airIRG3CMStatusEntry, upsAdvOutputPeakCurrent=upsAdvOutputPeakCurrent, rPDU2DeviceConfigOutletsPeakLoadReset=rPDU2DeviceConfigOutletsPeakLoadReset, airFMModBlwr2ElOvSetting=airFMModBlwr2ElOvSetting, iemConfigProbeMinHumidThreshold=iemConfigProbeMinHumidThreshold, atsIdentHardwareRev=atsIdentHardwareRev, ais5000UPS100kVA=ais5000UPS100kVA, airFMStatusSystemCoolingEnabled=airFMStatusSystemCoolingEnabled, airIRmPmDrycooler2WinterStartTemp=airIRmPmDrycooler2WinterStartTemp, atsOutputMinPower=atsOutputMinPower, upsDiagSubSysIntBypSwitchIndex=upsDiagSubSysIntBypSwitchIndex, airIRmPmUnitCondensationTemperature1C=airIRmPmUnitCondensationTemperature1C, sPDUOutletPowerOffTime=sPDUOutletPowerOffTime, airIRG2AlarmsEventCode=airIRG2AlarmsEventCode, airIRmPmFan1Speed=airIRmPmFan1Speed, xPDUSystemBreakerPosition=xPDUSystemBreakerPosition, sPDUOutletConfigMSPmupsP2HiHum=sPDUOutletConfigMSPmupsP2HiHum, dm3ConfigInRlyAlarm=dm3ConfigInRlyAlarm, memInputs=memInputs, dm3StatusRelays=dm3StatusRelays, xPDUDeviceNominalOutputVoltage=xPDUDeviceNominalOutputVoltage, battManIdentProductName=battManIdentProductName, airFMSysAlarmMapInput=airFMSysAlarmMapInput, temperatureThresholdViolation1=temperatureThresholdViolation1, airFMSysAlarmMapExpMod1AnyAlarm=airFMSysAlarmMapExpMod1AnyAlarm, sPDUOutletConfigMSPmupsP2HiTemp=sPDUOutletConfigMSPmupsP2HiTemp, upsDiagSubSysDCCircuitBreakerEntry=upsDiagSubSysDCCircuitBreakerEntry, cpsCardConfInter=cpsCardConfInter, upsParallelOutputPhaseEntry=upsParallelOutputPhaseEntry, upsHighPrecBatteryPackTable=upsHighPrecBatteryPackTable, airIRG3GroupStatusMinReturnAirTempUS=airIRG3GroupStatusMinReturnAirTempUS, airIRRP100UnitStatusRackInletTemperature2Metric=airIRRP100UnitStatusRackInletTemperature2Metric, airFMModStatus=airFMModStatus, dm3ConfigBreakersTableSize=dm3ConfigBreakersTableSize, dcmim2StatusSystem=dcmim2StatusSystem, rARUStatusEntry=rARUStatusEntry, airIRSCUnitRunHours=airIRSCUnitRunHours, battManStringDischargeLess5Seconds=battManStringDischargeLess5Seconds, airIRG3IdentHardwareRevision=airIRG3IdentHardwareRevision, coolingUnitStatusAnalogScale=coolingUnitStatusAnalogScale, airIRG2GroupSetptsCoolDeadbandUS=airIRG2GroupSetptsCoolDeadbandUS, dm3StatusFusesName=dm3StatusFusesName, airIRRP500GroupStatusActiveFlowControlStatus=airIRRP500GroupStatusActiveFlowControlStatus, airIRG2AlarmsEntry=airIRG2AlarmsEntry, airIRRP500GroupConfigNumberofBackupUnits=airIRRP500GroupConfigNumberofBackupUnits, airIRmPmDrycooler4Hysteresis=airIRmPmDrycooler4Hysteresis, apcOutputShortCircuit=apcOutputShortCircuit, airIRRCUnitStatusRackInletTempUS=airIRRCUnitStatusRackInletTempUS, battManString1OhmicValueTableSize=battManString1OhmicValueTableSize, rsLostRedundancy=rsLostRedundancy, pduCircuitPanelFrequencyOutofRangeCleared=pduCircuitPanelFrequencyOutofRangeCleared, rPDUOutletPhaseTable=rPDUOutletPhaseTable, dm3ConfigConvFailSafe=dm3ConfigConvFailSafe, isxModularSubfeedHighCurrentThresholdViolationCleared=isxModularSubfeedHighCurrentThresholdViolationCleared, rARUIdent=rARUIdent, airIRmPmSensor17Defect=airIRmPmSensor17Defect, upsHighPrecBatteryPackCartridgeInstallDate=upsHighPrecBatteryPackCartridgeInstallDate, battManSystemConfigurationInvalid=battManSystemConfigurationInvalid, xPDUDeviceCrossTieOutputPresent=xPDUDeviceCrossTieOutputPresent, airIRSCUnitIdentName=airIRSCUnitIdentName, isxModularDistInfo=isxModularDistInfo, airFMModSerialNumber=airFMModSerialNumber, upsBatteryFrameLayoutTableSize=upsBatteryFrameLayoutTableSize, dcmim2StatusBattMfgCapacity=dcmim2StatusBattMfgCapacity, xATSTestingResultsLastUnloadedDuration=xATSTestingResultsLastUnloadedDuration, airIRmPmDrycooler1Failure=airIRmPmDrycooler1Failure, airFMGroupCfgDmdFightSetting=airFMGroupCfgDmdFightSetting, sPDUOutletConfigMSPallEntry=sPDUOutletConfigMSPallEntry, upsDiagSubSysXRCommunicationCardTable=upsDiagSubSysXRCommunicationCardTable, atsNearOverload=atsNearOverload, battManString1ResponseTestCurrentBenchmarkEntry=battManString1ResponseTestCurrentBenchmarkEntry, rPDUOutletConfigMonitoredTableSize=rPDUOutletConfigMonitoredTableSize, galaxy300UPS15kVA31=galaxy300UPS15kVA31, consolePortServer=consolePortServer, apcEnvLTDecTempRateViolation=apcEnvLTDecTempRateViolation, iemConfigRelaysEntry=iemConfigRelaysEntry, airFMSysCtrlHum=airFMSysCtrlHum)
mibBuilder.exportSymbols("PowerNet-MIB", airFMSysCoolState=airFMSysCoolState, cpsInfoSerialPortName=cpsInfoSerialPortName, battManString1ResponseTestChangeEntry=battManString1ResponseTestChangeEntry, galaxy5000UPS80KVA=galaxy5000UPS80KVA, battManString1BatteryUserHighVoltageAlarm=battManString1BatteryUserHighVoltageAlarm, dcmim2StatusSysRectCurrent=dcmim2StatusSysRectCurrent, airIRRC=airIRRC, airIRmPmSensor9Failure=airIRmPmSensor9Failure, emsProbeConfigProbeName=emsProbeConfigProbeName, emStatusProbeNumber=emStatusProbeNumber, airIRSCUnitStatusOperateMode=airIRSCUnitStatusOperateMode, rPDU2PhaseStatusPower=rPDU2PhaseStatusPower, coolingUnitConfigurationStringValue=coolingUnitConfigurationStringValue, pduGroundOvercurrentCleared=pduGroundOvercurrentCleared, dm3StatusInRlyName=dm3StatusInRlyName, dm3StatusBattTemp=dm3StatusBattTemp, upsAdvStateDP300ESpecificFaults=upsAdvStateDP300ESpecificFaults, xPDUBreakerPositionAlarm=xPDUBreakerPositionAlarm, airIRmPmPump2Running=airIRmPmPump2Running, envHighTempThresholdViolationCleared=envHighTempThresholdViolationCleared, upsBasicSystemPFCStatus=upsBasicSystemPFCStatus, rARUStatusAruDeviceCount=rARUStatusAruDeviceCount, airIRRP500GroupConfigNumberOfActiveFlowControllers=airIRRP500GroupConfigNumberOfActiveFlowControllers, xATSGeneratorOutputPower=xATSGeneratorOutputPower, uioOutputRelayStatusTableSize=uioOutputRelayStatusTableSize, airIRSCGroupConfigFanSpeedControl=airIRSCGroupConfigFanSpeedControl, airFMModBlwr1Current=airFMModBlwr1Current, upsDiagSwitchGearInstallationLoadPct=upsDiagSwitchGearInstallationLoadPct, airFMSysAlarmMapInputOutputIndex=airFMSysAlarmMapInputOutputIndex, upsDiagSwitchGearBypassSwitchStatus=upsDiagSwitchGearBypassSwitchStatus, airFMIdentContact=airFMIdentContact, airFMModBlwr1DecTime=airFMModBlwr1DecTime, symmetraPx48kVA=symmetraPx48kVA, sPDUOutletConfigTableSize=sPDUOutletConfigTableSize, dm3ConfigOutRlyDelay=dm3ConfigOutRlyDelay, airIRG3CMStatusVaporTempMetric=airIRG3CMStatusVaporTempMetric, isxcEnterprise=isxcEnterprise, memModulesConfigModuleLocation=memModulesConfigModuleLocation, atsCalibrationPowerSupplyVoltageEntry=atsCalibrationPowerSupplyVoltageEntry, airIRRP100GroupConfigHumidifySensitivityBand=airIRRP100GroupConfigHumidifySensitivityBand, airIRRCUnitIdentID=airIRRCUnitIdentID, battManString2BatteryOpenCell=battManString2BatteryOpenCell, xATSSource2PhaseEntry=xATSSource2PhaseEntry, sPDUOutletStatusVMName=sPDUOutletStatusVMName, dm3ConfigFusesAlarm=dm3ConfigFusesAlarm, battManString1ResponseTestCurrentBenchmarkTableSize=battManString1ResponseTestCurrentBenchmarkTableSize, rPDU2OutletSwitchedStatusEntry=rPDU2OutletSwitchedStatusEntry, airIRRP100UnitStatusContainmtDPUS=airIRRP100UnitStatusContainmtDPUS, airIRmPmDehumidificMaxWaterTempF=airIRmPmDehumidificMaxWaterTempF, memInputsStatusModuleNumber=memInputsStatusModuleNumber, battManString2ResponseTestCurrentBenchmarkTableSize=battManString2ResponseTestCurrentBenchmarkTableSize, airIRmPmDrycooler1HysteresisF=airIRmPmDrycooler1HysteresisF, upsInternalOverTemperatureCleared=upsInternalOverTemperatureCleared, onbatterycommunicationLost=onbatterycommunicationLost, emStatusProbesEntry=emStatusProbesEntry, apcEnvHighTempThresholdViolationCleared=apcEnvHighTempThresholdViolationCleared, rPDUOutletDevCommand=rPDUOutletDevCommand, xPDUSystemOutputTotalPower=xPDUSystemOutputTotalPower, mspOutletConfigChange=mspOutletConfigChange, atsStatusVoltageOutStatus=atsStatusVoltageOutStatus, upsDiagIMManufactureDate=upsDiagIMManufactureDate)
